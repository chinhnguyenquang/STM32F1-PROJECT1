
Project_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a20  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006b30  08006b30  00007b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c30  08006c30  00008010  2**0
                  CONTENTS
  4 .ARM          00000000  08006c30  08006c30  00008010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c30  08006c30  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006c30  08006c30  00007c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c38  08006c38  00007c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006c3c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  20000010  08006c4c  00008010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08006c4c  0000835c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e35  00000000  00000000  00008039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c9  00000000  00000000  0001be6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0001f438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef9  00000000  00000000  00020750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b66d  00000000  00000000  00021649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a9b4  00000000  00000000  0003ccb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092dca  00000000  00000000  0005766a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea434  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050ec  00000000  00000000  000ea478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000ef564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08006b18 	.word	0x08006b18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08006b18 	.word	0x08006b18

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_d2f>:
 80004c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80004d0:	bf24      	itt	cs
 80004d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80004d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80004da:	d90d      	bls.n	80004f8 <__aeabi_d2f+0x30>
 80004dc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80004e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004e8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80004ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004f0:	bf08      	it	eq
 80004f2:	f020 0001 	biceq.w	r0, r0, #1
 80004f6:	4770      	bx	lr
 80004f8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80004fc:	d121      	bne.n	8000542 <__aeabi_d2f+0x7a>
 80004fe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000502:	bfbc      	itt	lt
 8000504:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000508:	4770      	bxlt	lr
 800050a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800050e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000512:	f1c2 0218 	rsb	r2, r2, #24
 8000516:	f1c2 0c20 	rsb	ip, r2, #32
 800051a:	fa10 f30c 	lsls.w	r3, r0, ip
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	bf18      	it	ne
 8000524:	f040 0001 	orrne.w	r0, r0, #1
 8000528:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800052c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000530:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000534:	ea40 000c 	orr.w	r0, r0, ip
 8000538:	fa23 f302 	lsr.w	r3, r3, r2
 800053c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000540:	e7cc      	b.n	80004dc <__aeabi_d2f+0x14>
 8000542:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000546:	d107      	bne.n	8000558 <__aeabi_d2f+0x90>
 8000548:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800054c:	bf1e      	ittt	ne
 800054e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000552:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000556:	4770      	bxne	lr
 8000558:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800055c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000560:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__aeabi_frsub>:
 8000568:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800056c:	e002      	b.n	8000574 <__addsf3>
 800056e:	bf00      	nop

08000570 <__aeabi_fsub>:
 8000570:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000574 <__addsf3>:
 8000574:	0042      	lsls	r2, r0, #1
 8000576:	bf1f      	itttt	ne
 8000578:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800057c:	ea92 0f03 	teqne	r2, r3
 8000580:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000584:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000588:	d06a      	beq.n	8000660 <__addsf3+0xec>
 800058a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800058e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000592:	bfc1      	itttt	gt
 8000594:	18d2      	addgt	r2, r2, r3
 8000596:	4041      	eorgt	r1, r0
 8000598:	4048      	eorgt	r0, r1
 800059a:	4041      	eorgt	r1, r0
 800059c:	bfb8      	it	lt
 800059e:	425b      	neglt	r3, r3
 80005a0:	2b19      	cmp	r3, #25
 80005a2:	bf88      	it	hi
 80005a4:	4770      	bxhi	lr
 80005a6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80005aa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005ae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80005b2:	bf18      	it	ne
 80005b4:	4240      	negne	r0, r0
 80005b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80005ba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80005be:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80005c2:	bf18      	it	ne
 80005c4:	4249      	negne	r1, r1
 80005c6:	ea92 0f03 	teq	r2, r3
 80005ca:	d03f      	beq.n	800064c <__addsf3+0xd8>
 80005cc:	f1a2 0201 	sub.w	r2, r2, #1
 80005d0:	fa41 fc03 	asr.w	ip, r1, r3
 80005d4:	eb10 000c 	adds.w	r0, r0, ip
 80005d8:	f1c3 0320 	rsb	r3, r3, #32
 80005dc:	fa01 f103 	lsl.w	r1, r1, r3
 80005e0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80005e4:	d502      	bpl.n	80005ec <__addsf3+0x78>
 80005e6:	4249      	negs	r1, r1
 80005e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005ec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80005f0:	d313      	bcc.n	800061a <__addsf3+0xa6>
 80005f2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80005f6:	d306      	bcc.n	8000606 <__addsf3+0x92>
 80005f8:	0840      	lsrs	r0, r0, #1
 80005fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005fe:	f102 0201 	add.w	r2, r2, #1
 8000602:	2afe      	cmp	r2, #254	@ 0xfe
 8000604:	d251      	bcs.n	80006aa <__addsf3+0x136>
 8000606:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800060a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800060e:	bf08      	it	eq
 8000610:	f020 0001 	biceq.w	r0, r0, #1
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	4770      	bx	lr
 800061a:	0049      	lsls	r1, r1, #1
 800061c:	eb40 0000 	adc.w	r0, r0, r0
 8000620:	3a01      	subs	r2, #1
 8000622:	bf28      	it	cs
 8000624:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000628:	d2ed      	bcs.n	8000606 <__addsf3+0x92>
 800062a:	fab0 fc80 	clz	ip, r0
 800062e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000632:	ebb2 020c 	subs.w	r2, r2, ip
 8000636:	fa00 f00c 	lsl.w	r0, r0, ip
 800063a:	bfaa      	itet	ge
 800063c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000640:	4252      	neglt	r2, r2
 8000642:	4318      	orrge	r0, r3
 8000644:	bfbc      	itt	lt
 8000646:	40d0      	lsrlt	r0, r2
 8000648:	4318      	orrlt	r0, r3
 800064a:	4770      	bx	lr
 800064c:	f092 0f00 	teq	r2, #0
 8000650:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000654:	bf06      	itte	eq
 8000656:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800065a:	3201      	addeq	r2, #1
 800065c:	3b01      	subne	r3, #1
 800065e:	e7b5      	b.n	80005cc <__addsf3+0x58>
 8000660:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000664:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000668:	bf18      	it	ne
 800066a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800066e:	d021      	beq.n	80006b4 <__addsf3+0x140>
 8000670:	ea92 0f03 	teq	r2, r3
 8000674:	d004      	beq.n	8000680 <__addsf3+0x10c>
 8000676:	f092 0f00 	teq	r2, #0
 800067a:	bf08      	it	eq
 800067c:	4608      	moveq	r0, r1
 800067e:	4770      	bx	lr
 8000680:	ea90 0f01 	teq	r0, r1
 8000684:	bf1c      	itt	ne
 8000686:	2000      	movne	r0, #0
 8000688:	4770      	bxne	lr
 800068a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800068e:	d104      	bne.n	800069a <__addsf3+0x126>
 8000690:	0040      	lsls	r0, r0, #1
 8000692:	bf28      	it	cs
 8000694:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000698:	4770      	bx	lr
 800069a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800069e:	bf3c      	itt	cc
 80006a0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80006a4:	4770      	bxcc	lr
 80006a6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006aa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80006ae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006b2:	4770      	bx	lr
 80006b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006b8:	bf16      	itet	ne
 80006ba:	4608      	movne	r0, r1
 80006bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006c0:	4601      	movne	r1, r0
 80006c2:	0242      	lsls	r2, r0, #9
 80006c4:	bf06      	itte	eq
 80006c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006ca:	ea90 0f01 	teqeq	r0, r1
 80006ce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80006d2:	4770      	bx	lr

080006d4 <__aeabi_ui2f>:
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	e004      	b.n	80006e4 <__aeabi_i2f+0x8>
 80006da:	bf00      	nop

080006dc <__aeabi_i2f>:
 80006dc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	ea5f 0c00 	movs.w	ip, r0
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80006f0:	4601      	mov	r1, r0
 80006f2:	f04f 0000 	mov.w	r0, #0
 80006f6:	e01c      	b.n	8000732 <__aeabi_l2f+0x2a>

080006f8 <__aeabi_ul2f>:
 80006f8:	ea50 0201 	orrs.w	r2, r0, r1
 80006fc:	bf08      	it	eq
 80006fe:	4770      	bxeq	lr
 8000700:	f04f 0300 	mov.w	r3, #0
 8000704:	e00a      	b.n	800071c <__aeabi_l2f+0x14>
 8000706:	bf00      	nop

08000708 <__aeabi_l2f>:
 8000708:	ea50 0201 	orrs.w	r2, r0, r1
 800070c:	bf08      	it	eq
 800070e:	4770      	bxeq	lr
 8000710:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000714:	d502      	bpl.n	800071c <__aeabi_l2f+0x14>
 8000716:	4240      	negs	r0, r0
 8000718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800071c:	ea5f 0c01 	movs.w	ip, r1
 8000720:	bf02      	ittt	eq
 8000722:	4684      	moveq	ip, r0
 8000724:	4601      	moveq	r1, r0
 8000726:	2000      	moveq	r0, #0
 8000728:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800072c:	bf08      	it	eq
 800072e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000732:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000736:	fabc f28c 	clz	r2, ip
 800073a:	3a08      	subs	r2, #8
 800073c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000740:	db10      	blt.n	8000764 <__aeabi_l2f+0x5c>
 8000742:	fa01 fc02 	lsl.w	ip, r1, r2
 8000746:	4463      	add	r3, ip
 8000748:	fa00 fc02 	lsl.w	ip, r0, r2
 800074c:	f1c2 0220 	rsb	r2, r2, #32
 8000750:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000754:	fa20 f202 	lsr.w	r2, r0, r2
 8000758:	eb43 0002 	adc.w	r0, r3, r2
 800075c:	bf08      	it	eq
 800075e:	f020 0001 	biceq.w	r0, r0, #1
 8000762:	4770      	bx	lr
 8000764:	f102 0220 	add.w	r2, r2, #32
 8000768:	fa01 fc02 	lsl.w	ip, r1, r2
 800076c:	f1c2 0220 	rsb	r2, r2, #32
 8000770:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000774:	fa21 f202 	lsr.w	r2, r1, r2
 8000778:	eb43 0002 	adc.w	r0, r3, r2
 800077c:	bf08      	it	eq
 800077e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000782:	4770      	bx	lr

08000784 <__aeabi_fmul>:
 8000784:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000788:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800078c:	bf1e      	ittt	ne
 800078e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000792:	ea92 0f0c 	teqne	r2, ip
 8000796:	ea93 0f0c 	teqne	r3, ip
 800079a:	d06f      	beq.n	800087c <__aeabi_fmul+0xf8>
 800079c:	441a      	add	r2, r3
 800079e:	ea80 0c01 	eor.w	ip, r0, r1
 80007a2:	0240      	lsls	r0, r0, #9
 80007a4:	bf18      	it	ne
 80007a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007aa:	d01e      	beq.n	80007ea <__aeabi_fmul+0x66>
 80007ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80007b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007b8:	fba0 3101 	umull	r3, r1, r0, r1
 80007bc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80007c0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80007c4:	bf3e      	ittt	cc
 80007c6:	0049      	lslcc	r1, r1, #1
 80007c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007cc:	005b      	lslcc	r3, r3, #1
 80007ce:	ea40 0001 	orr.w	r0, r0, r1
 80007d2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80007d6:	2afd      	cmp	r2, #253	@ 0xfd
 80007d8:	d81d      	bhi.n	8000816 <__aeabi_fmul+0x92>
 80007da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80007de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007e2:	bf08      	it	eq
 80007e4:	f020 0001 	biceq.w	r0, r0, #1
 80007e8:	4770      	bx	lr
 80007ea:	f090 0f00 	teq	r0, #0
 80007ee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80007f2:	bf08      	it	eq
 80007f4:	0249      	lsleq	r1, r1, #9
 80007f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007fe:	3a7f      	subs	r2, #127	@ 0x7f
 8000800:	bfc2      	ittt	gt
 8000802:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000806:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800080a:	4770      	bxgt	lr
 800080c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	3a01      	subs	r2, #1
 8000816:	dc5d      	bgt.n	80008d4 <__aeabi_fmul+0x150>
 8000818:	f112 0f19 	cmn.w	r2, #25
 800081c:	bfdc      	itt	le
 800081e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000822:	4770      	bxle	lr
 8000824:	f1c2 0200 	rsb	r2, r2, #0
 8000828:	0041      	lsls	r1, r0, #1
 800082a:	fa21 f102 	lsr.w	r1, r1, r2
 800082e:	f1c2 0220 	rsb	r2, r2, #32
 8000832:	fa00 fc02 	lsl.w	ip, r0, r2
 8000836:	ea5f 0031 	movs.w	r0, r1, rrx
 800083a:	f140 0000 	adc.w	r0, r0, #0
 800083e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000842:	bf08      	it	eq
 8000844:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000848:	4770      	bx	lr
 800084a:	f092 0f00 	teq	r2, #0
 800084e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000852:	bf02      	ittt	eq
 8000854:	0040      	lsleq	r0, r0, #1
 8000856:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800085a:	3a01      	subeq	r2, #1
 800085c:	d0f9      	beq.n	8000852 <__aeabi_fmul+0xce>
 800085e:	ea40 000c 	orr.w	r0, r0, ip
 8000862:	f093 0f00 	teq	r3, #0
 8000866:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800086a:	bf02      	ittt	eq
 800086c:	0049      	lsleq	r1, r1, #1
 800086e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000872:	3b01      	subeq	r3, #1
 8000874:	d0f9      	beq.n	800086a <__aeabi_fmul+0xe6>
 8000876:	ea41 010c 	orr.w	r1, r1, ip
 800087a:	e78f      	b.n	800079c <__aeabi_fmul+0x18>
 800087c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000880:	ea92 0f0c 	teq	r2, ip
 8000884:	bf18      	it	ne
 8000886:	ea93 0f0c 	teqne	r3, ip
 800088a:	d00a      	beq.n	80008a2 <__aeabi_fmul+0x11e>
 800088c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000890:	bf18      	it	ne
 8000892:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000896:	d1d8      	bne.n	800084a <__aeabi_fmul+0xc6>
 8000898:	ea80 0001 	eor.w	r0, r0, r1
 800089c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80008a0:	4770      	bx	lr
 80008a2:	f090 0f00 	teq	r0, #0
 80008a6:	bf17      	itett	ne
 80008a8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80008ac:	4608      	moveq	r0, r1
 80008ae:	f091 0f00 	teqne	r1, #0
 80008b2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80008b6:	d014      	beq.n	80008e2 <__aeabi_fmul+0x15e>
 80008b8:	ea92 0f0c 	teq	r2, ip
 80008bc:	d101      	bne.n	80008c2 <__aeabi_fmul+0x13e>
 80008be:	0242      	lsls	r2, r0, #9
 80008c0:	d10f      	bne.n	80008e2 <__aeabi_fmul+0x15e>
 80008c2:	ea93 0f0c 	teq	r3, ip
 80008c6:	d103      	bne.n	80008d0 <__aeabi_fmul+0x14c>
 80008c8:	024b      	lsls	r3, r1, #9
 80008ca:	bf18      	it	ne
 80008cc:	4608      	movne	r0, r1
 80008ce:	d108      	bne.n	80008e2 <__aeabi_fmul+0x15e>
 80008d0:	ea80 0001 	eor.w	r0, r0, r1
 80008d4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80008d8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008dc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008e0:	4770      	bx	lr
 80008e2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008e6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80008ea:	4770      	bx	lr

080008ec <__aeabi_fdiv>:
 80008ec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008f4:	bf1e      	ittt	ne
 80008f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008fa:	ea92 0f0c 	teqne	r2, ip
 80008fe:	ea93 0f0c 	teqne	r3, ip
 8000902:	d069      	beq.n	80009d8 <__aeabi_fdiv+0xec>
 8000904:	eba2 0203 	sub.w	r2, r2, r3
 8000908:	ea80 0c01 	eor.w	ip, r0, r1
 800090c:	0249      	lsls	r1, r1, #9
 800090e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000912:	d037      	beq.n	8000984 <__aeabi_fdiv+0x98>
 8000914:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000918:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800091c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000920:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000924:	428b      	cmp	r3, r1
 8000926:	bf38      	it	cc
 8000928:	005b      	lslcc	r3, r3, #1
 800092a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800092e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000932:	428b      	cmp	r3, r1
 8000934:	bf24      	itt	cs
 8000936:	1a5b      	subcs	r3, r3, r1
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000940:	bf24      	itt	cs
 8000942:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000946:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800094e:	bf24      	itt	cs
 8000950:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800095c:	bf24      	itt	cs
 800095e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000962:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000966:	011b      	lsls	r3, r3, #4
 8000968:	bf18      	it	ne
 800096a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800096e:	d1e0      	bne.n	8000932 <__aeabi_fdiv+0x46>
 8000970:	2afd      	cmp	r2, #253	@ 0xfd
 8000972:	f63f af50 	bhi.w	8000816 <__aeabi_fmul+0x92>
 8000976:	428b      	cmp	r3, r1
 8000978:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800097c:	bf08      	it	eq
 800097e:	f020 0001 	biceq.w	r0, r0, #1
 8000982:	4770      	bx	lr
 8000984:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000988:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800098c:	327f      	adds	r2, #127	@ 0x7f
 800098e:	bfc2      	ittt	gt
 8000990:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000994:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000998:	4770      	bxgt	lr
 800099a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800099e:	f04f 0300 	mov.w	r3, #0
 80009a2:	3a01      	subs	r2, #1
 80009a4:	e737      	b.n	8000816 <__aeabi_fmul+0x92>
 80009a6:	f092 0f00 	teq	r2, #0
 80009aa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80009ae:	bf02      	ittt	eq
 80009b0:	0040      	lsleq	r0, r0, #1
 80009b2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80009b6:	3a01      	subeq	r2, #1
 80009b8:	d0f9      	beq.n	80009ae <__aeabi_fdiv+0xc2>
 80009ba:	ea40 000c 	orr.w	r0, r0, ip
 80009be:	f093 0f00 	teq	r3, #0
 80009c2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009c6:	bf02      	ittt	eq
 80009c8:	0049      	lsleq	r1, r1, #1
 80009ca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80009ce:	3b01      	subeq	r3, #1
 80009d0:	d0f9      	beq.n	80009c6 <__aeabi_fdiv+0xda>
 80009d2:	ea41 010c 	orr.w	r1, r1, ip
 80009d6:	e795      	b.n	8000904 <__aeabi_fdiv+0x18>
 80009d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009dc:	ea92 0f0c 	teq	r2, ip
 80009e0:	d108      	bne.n	80009f4 <__aeabi_fdiv+0x108>
 80009e2:	0242      	lsls	r2, r0, #9
 80009e4:	f47f af7d 	bne.w	80008e2 <__aeabi_fmul+0x15e>
 80009e8:	ea93 0f0c 	teq	r3, ip
 80009ec:	f47f af70 	bne.w	80008d0 <__aeabi_fmul+0x14c>
 80009f0:	4608      	mov	r0, r1
 80009f2:	e776      	b.n	80008e2 <__aeabi_fmul+0x15e>
 80009f4:	ea93 0f0c 	teq	r3, ip
 80009f8:	d104      	bne.n	8000a04 <__aeabi_fdiv+0x118>
 80009fa:	024b      	lsls	r3, r1, #9
 80009fc:	f43f af4c 	beq.w	8000898 <__aeabi_fmul+0x114>
 8000a00:	4608      	mov	r0, r1
 8000a02:	e76e      	b.n	80008e2 <__aeabi_fmul+0x15e>
 8000a04:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a08:	bf18      	it	ne
 8000a0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a0e:	d1ca      	bne.n	80009a6 <__aeabi_fdiv+0xba>
 8000a10:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000a14:	f47f af5c 	bne.w	80008d0 <__aeabi_fmul+0x14c>
 8000a18:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000a1c:	f47f af3c 	bne.w	8000898 <__aeabi_fmul+0x114>
 8000a20:	e75f      	b.n	80008e2 <__aeabi_fmul+0x15e>
 8000a22:	bf00      	nop

08000a24 <__gesf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpsf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__lesf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpsf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpsf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4e:	d011      	beq.n	8000a74 <__cmpsf2+0x40>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a56:	bf18      	it	ne
 8000a58:	ea90 0f01 	teqne	r0, r1
 8000a5c:	bf58      	it	pl
 8000a5e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a62:	bf88      	it	hi
 8000a64:	17c8      	asrhi	r0, r1, #31
 8000a66:	bf38      	it	cc
 8000a68:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a6c:	bf18      	it	ne
 8000a6e:	f040 0001 	orrne.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a78:	d102      	bne.n	8000a80 <__cmpsf2+0x4c>
 8000a7a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a7e:	d105      	bne.n	8000a8c <__cmpsf2+0x58>
 8000a80:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a84:	d1e4      	bne.n	8000a50 <__cmpsf2+0x1c>
 8000a86:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a8a:	d0e1      	beq.n	8000a50 <__cmpsf2+0x1c>
 8000a8c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_cfrcmple>:
 8000a94:	4684      	mov	ip, r0
 8000a96:	4608      	mov	r0, r1
 8000a98:	4661      	mov	r1, ip
 8000a9a:	e7ff      	b.n	8000a9c <__aeabi_cfcmpeq>

08000a9c <__aeabi_cfcmpeq>:
 8000a9c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a9e:	f7ff ffc9 	bl	8000a34 <__cmpsf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000aac <__aeabi_fcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cfcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cfcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_fcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cfcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_fcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffd2 	bl	8000a94 <__aeabi_cfrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_fcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc8 	bl	8000a94 <__aeabi_cfrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_f2uiz>:
 8000b10:	0042      	lsls	r2, r0, #1
 8000b12:	d20e      	bcs.n	8000b32 <__aeabi_f2uiz+0x22>
 8000b14:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b18:	d30b      	bcc.n	8000b32 <__aeabi_f2uiz+0x22>
 8000b1a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b22:	d409      	bmi.n	8000b38 <__aeabi_f2uiz+0x28>
 8000b24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr
 8000b38:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b3c:	d101      	bne.n	8000b42 <__aeabi_f2uiz+0x32>
 8000b3e:	0242      	lsls	r2, r0, #9
 8000b40:	d102      	bne.n	8000b48 <__aeabi_f2uiz+0x38>
 8000b42:	f04f 30ff 	mov.w	r0, #4294967295
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <HAL_UARTEx_RxEventCallback>:




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0b      	ldr	r2, [pc, #44]	@ (8000b90 <HAL_UARTEx_RxEventCallback+0x40>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d110      	bne.n	8000b88 <HAL_UARTEx_RxEventCallback+0x38>
	{
		_Modbus_Slave.Check_Buffer(USART1);
 8000b66:	490a      	ldr	r1, [pc, #40]	@ (8000b90 <HAL_UARTEx_RxEventCallback+0x40>)
 8000b68:	480a      	ldr	r0, [pc, #40]	@ (8000b94 <HAL_UARTEx_RxEventCallback+0x44>)
 8000b6a:	f005 fa0e 	bl	8005f8a <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef>
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) _Modbus_Slave.RxData, 10);
 8000b6e:	220a      	movs	r2, #10
 8000b70:	4909      	ldr	r1, [pc, #36]	@ (8000b98 <HAL_UARTEx_RxEventCallback+0x48>)
 8000b72:	480a      	ldr	r0, [pc, #40]	@ (8000b9c <HAL_UARTEx_RxEventCallback+0x4c>)
 8000b74:	f004 f8a9 	bl	8004cca <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000b78:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <HAL_UARTEx_RxEventCallback+0x50>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <HAL_UARTEx_RxEventCallback+0x50>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f022 0204 	bic.w	r2, r2, #4
 8000b86:	601a      	str	r2, [r3, #0]

	}


}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40013800 	.word	0x40013800
 8000b94:	2000004c 	.word	0x2000004c
 8000b98:	2000004f 	.word	0x2000004f
 8000b9c:	200002a4 	.word	0x200002a4
 8000ba0:	200002ec 	.word	0x200002ec

08000ba4 <HAL_GPIO_EXTI_Callback>:



uint32_t cur_time_ext=0,pre_time_ext=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	80fb      	strh	r3, [r7, #6]
 /* Prevent unused argument(s) compilation warning */
 UNUSED(GPIO_Pin);
 	 cur_time_ext=HAL_GetTick();
 8000bae:	f000 fdc9 	bl	8001744 <HAL_GetTick>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000bb6:	6013      	str	r3, [r2, #0]
	 if ((GPIO_Pin==GPIO_PIN_5)||(cur_time_ext-pre_time_ext>10)){
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	2b20      	cmp	r3, #32
 8000bbc:	d006      	beq.n	8000bcc <HAL_GPIO_EXTI_Callback+0x28>
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	2b0a      	cmp	r3, #10
 8000bca:	d90c      	bls.n	8000be6 <HAL_GPIO_EXTI_Callback+0x42>
		 Status_stm32=(Status_stm32==NORMAL)?SLAVE_ID:NORMAL;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	bf14      	ite	ne
 8000bd4:	2301      	movne	r3, #1
 8000bd6:	2300      	moveq	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000bde:	701a      	strb	r2, [r3, #0]
		 Status_initial_LCD=true;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x58>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
	 }
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000188 	.word	0x20000188
 8000bf4:	2000018c 	.word	0x2000018c
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000001 	.word	0x20000001

08000c00 <Tacvu_HIENTHI>:





void Tacvu_HIENTHI(void){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	id=_Modbus_Slave.Slave_id_to_Eeprom;
 8000c04:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <Tacvu_HIENTHI+0x54>)
 8000c06:	881a      	ldrh	r2, [r3, #0]
 8000c08:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <Tacvu_HIENTHI+0x58>)
 8000c0a:	801a      	strh	r2, [r3, #0]
	if (Status_stm32==NORMAL){
 8000c0c:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <Tacvu_HIENTHI+0x5c>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d114      	bne.n	8000c3e <Tacvu_HIENTHI+0x3e>
		_Ht621b.clearAll();
 8000c14:	4812      	ldr	r0, [pc, #72]	@ (8000c60 <Tacvu_HIENTHI+0x60>)
 8000c16:	f005 fc71 	bl	80064fc <_ZN6HT16218clearAllEv>
		_Ht621b.displayOn();
 8000c1a:	4811      	ldr	r0, [pc, #68]	@ (8000c60 <Tacvu_HIENTHI+0x60>)
 8000c1c:	f005 fc52 	bl	80064c4 <_ZN6HT16219displayOnEv>
		_Ht621b.Write_Float_Linex(temperature_Sm9541_cur,2);
 8000c20:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <Tacvu_HIENTHI+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2202      	movs	r2, #2
 8000c26:	4619      	mov	r1, r3
 8000c28:	480d      	ldr	r0, [pc, #52]	@ (8000c60 <Tacvu_HIENTHI+0x60>)
 8000c2a:	f005 fd49 	bl	80066c0 <_ZN6HT162117Write_Float_LinexEfh>
		_Ht621b.Write_INT_Linex(pressure_Sm9541_cur,1);
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <Tacvu_HIENTHI+0x68>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2201      	movs	r2, #1
 8000c34:	4619      	mov	r1, r3
 8000c36:	480a      	ldr	r0, [pc, #40]	@ (8000c60 <Tacvu_HIENTHI+0x60>)
 8000c38:	f005 fe0c 	bl	8006854 <_ZN6HT162115Write_INT_LinexEfh>
		_Ht621b.clearAll();
		_Ht621b.Write_Id(_Modbus_Slave.Slave_id);


	}
}
 8000c3c:	e008      	b.n	8000c50 <Tacvu_HIENTHI+0x50>
		_Ht621b.clearAll();
 8000c3e:	4808      	ldr	r0, [pc, #32]	@ (8000c60 <Tacvu_HIENTHI+0x60>)
 8000c40:	f005 fc5c 	bl	80064fc <_ZN6HT16218clearAllEv>
		_Ht621b.Write_Id(_Modbus_Slave.Slave_id);
 8000c44:	4b03      	ldr	r3, [pc, #12]	@ (8000c54 <Tacvu_HIENTHI+0x54>)
 8000c46:	789b      	ldrb	r3, [r3, #2]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <Tacvu_HIENTHI+0x60>)
 8000c4c:	f005 fee0 	bl	8006a10 <_ZN6HT16218Write_IdEh>
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000004c 	.word	0x2000004c
 8000c58:	20000190 	.word	0x20000190
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	2000002c 	.word	0x2000002c
 8000c64:	2000017c 	.word	0x2000017c
 8000c68:	20000180 	.word	0x20000180

08000c6c <_Z20ThucThiTacVuTheoFlagv>:
// BIEN GIA TRI CUA SWITCH
extern uint8_t Response_Switch;
extern uint16_t Value_Switch_Pre;

/////         THUC THI TAC VU THEO FLAG //////////
void ThucThiTacVuTheoFlag(){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	if (_Flags.Flag.t500ms){

	}
    if (_Flags.Flag.t1s) {
 8000c70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <_Z20ThucThiTacVuTheoFlagv+0x74>)
 8000c72:	7c5b      	ldrb	r3, [r3, #17]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d017      	beq.n	8000ca8 <_Z20ThucThiTacVuTheoFlagv+0x3c>
    	Status_Current_Switch(); //UPDATE CURRENT SWITCH
 8000c78:	f005 fb22 	bl	80062c0 <Status_Current_Switch>
        	if (Get_Tempe_Press(&temperature_Sm9541, &pressure_Sm9541)){
 8000c7c:	4919      	ldr	r1, [pc, #100]	@ (8000ce4 <_Z20ThucThiTacVuTheoFlagv+0x78>)
 8000c7e:	481a      	ldr	r0, [pc, #104]	@ (8000ce8 <_Z20ThucThiTacVuTheoFlagv+0x7c>)
 8000c80:	f005 fa9a 	bl	80061b8 <Get_Tempe_Press>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bf14      	ite	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	2300      	moveq	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d009      	beq.n	8000ca8 <_Z20ThucThiTacVuTheoFlagv+0x3c>
        		temperature_Sm9541_cur=temperature_Sm9541,
 8000c94:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <_Z20ThucThiTacVuTheoFlagv+0x7c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a14      	ldr	r2, [pc, #80]	@ (8000cec <_Z20ThucThiTacVuTheoFlagv+0x80>)
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <_Z20ThucThiTacVuTheoFlagv+0x78>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
        		pressure_Sm9541_cur=pressure_Sm9541;
 8000ca0:	4a13      	ldr	r2, [pc, #76]	@ (8000cf0 <_Z20ThucThiTacVuTheoFlagv+0x84>)
 8000ca2:	6013      	str	r3, [r2, #0]
        	Tacvu_HIENTHI();
 8000ca4:	f7ff ffac 	bl	8000c00 <Tacvu_HIENTHI>
    	}

    }
    if (_Flags.Flag.t4s){
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <_Z20ThucThiTacVuTheoFlagv+0x74>)
 8000caa:	7c9b      	ldrb	r3, [r3, #18]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d015      	beq.n	8000cdc <_Z20ThucThiTacVuTheoFlagv+0x70>
        	if (Get_Tempe_Press(&temperature_Sm9541, &pressure_Sm9541)){
 8000cb0:	490c      	ldr	r1, [pc, #48]	@ (8000ce4 <_Z20ThucThiTacVuTheoFlagv+0x78>)
 8000cb2:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <_Z20ThucThiTacVuTheoFlagv+0x7c>)
 8000cb4:	f005 fa80 	bl	80061b8 <Get_Tempe_Press>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	bf14      	ite	ne
 8000cbe:	2301      	movne	r3, #1
 8000cc0:	2300      	moveq	r3, #0
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d009      	beq.n	8000cdc <_Z20ThucThiTacVuTheoFlagv+0x70>
        		temperature_Sm9541_cur=temperature_Sm9541,
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <_Z20ThucThiTacVuTheoFlagv+0x7c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <_Z20ThucThiTacVuTheoFlagv+0x80>)
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <_Z20ThucThiTacVuTheoFlagv+0x78>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
        		pressure_Sm9541_cur=pressure_Sm9541;
 8000cd4:	4a06      	ldr	r2, [pc, #24]	@ (8000cf0 <_Z20ThucThiTacVuTheoFlagv+0x84>)
 8000cd6:	6013      	str	r3, [r2, #0]

        	Tacvu_HIENTHI();
 8000cd8:	f7ff ff92 	bl	8000c00 <Tacvu_HIENTHI>
    	}
    }
    if (_Flags.Flag.t10s){

    }
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000160 	.word	0x20000160
 8000ce4:	20000178 	.word	0x20000178
 8000ce8:	20000174 	.word	0x20000174
 8000cec:	2000017c 	.word	0x2000017c
 8000cf0:	20000180 	.word	0x20000180

08000cf4 <Check_Slaveid>:


#define ADD_Flash_Slave_ID 0x0801FCF0
///////////          LUU ID VAO FLASH (EEPROM)  /////////////////
void Check_Slaveid(){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	id=_Modbus_Slave.Slave_id;
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <Check_Slaveid+0x40>)
 8000cfa:	789b      	ldrb	r3, [r3, #2]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <Check_Slaveid+0x44>)
 8000d00:	801a      	strh	r2, [r3, #0]
	if(_Modbus_Slave.Slave_id!=_Modbus_Slave.Slave_id_to_Eeprom){
 8000d02:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <Check_Slaveid+0x40>)
 8000d04:	789b      	ldrb	r3, [r3, #2]
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <Check_Slaveid+0x40>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d00e      	beq.n	8000d2e <Check_Slaveid+0x3a>
		Flash_ErasePage(127);
 8000d10:	207f      	movs	r0, #127	@ 0x7f
 8000d12:	f004 fedc 	bl	8005ace <Flash_ErasePage>
		Flash_Write(FLASH_TYPEPROGRAM_WORD,ADD_Flash_Slave_ID,_Modbus_Slave.Slave_id_to_Eeprom);
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <Check_Slaveid+0x40>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4907      	ldr	r1, [pc, #28]	@ (8000d3c <Check_Slaveid+0x48>)
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f004 fefa 	bl	8005b18 <Flash_Write>
		_Modbus_Slave.Slave_id=_Modbus_Slave.Slave_id_to_Eeprom;
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <Check_Slaveid+0x40>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4b02      	ldr	r3, [pc, #8]	@ (8000d34 <Check_Slaveid+0x40>)
 8000d2c:	709a      	strb	r2, [r3, #2]
	}

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000004c 	.word	0x2000004c
 8000d38:	20000190 	.word	0x20000190
 8000d3c:	0801fcf0 	.word	0x0801fcf0

08000d40 <initial_UART_DMA>:

void initial_UART_DMA(){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, _Modbus_Slave.RxData, 10);
 8000d44:	220a      	movs	r2, #10
 8000d46:	4907      	ldr	r1, [pc, #28]	@ (8000d64 <initial_UART_DMA+0x24>)
 8000d48:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <initial_UART_DMA+0x28>)
 8000d4a:	f003 ffbe 	bl	8004cca <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000d4e:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <initial_UART_DMA+0x2c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <initial_UART_DMA+0x2c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0204 	bic.w	r2, r2, #4
 8000d5c:	601a      	str	r2, [r3, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000004f 	.word	0x2000004f
 8000d68:	200002a4 	.word	0x200002a4
 8000d6c:	200002ec 	.word	0x200002ec

08000d70 <alt_main>:
/////////////////////////////////////////////////////////////////////////////
void alt_main()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	/* Initialization */

	initial_UART_DMA();
 8000d74:	f7ff ffe4 	bl	8000d40 <initial_UART_DMA>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4811      	ldr	r0, [pc, #68]	@ (8000dc0 <alt_main+0x50>)
 8000d7c:	f003 fb28 	bl	80043d0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,399);
 8000d80:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <alt_main+0x50>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f240 128f 	movw	r2, #399	@ 0x18f
 8000d88:	635a      	str	r2, [r3, #52]	@ 0x34
	 // _Ht621b.All_on();
	HAL_ADC_Start_DMA(&hadc1, &data_adc, 1);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	490d      	ldr	r1, [pc, #52]	@ (8000dc4 <alt_main+0x54>)
 8000d8e:	480e      	ldr	r0, [pc, #56]	@ (8000dc8 <alt_main+0x58>)
 8000d90:	f000 fdba 	bl	8001908 <HAL_ADC_Start_DMA>

	Status_Current_Switch();
 8000d94:	f005 fa94 	bl	80062c0 <Status_Current_Switch>
	while (1)
	{
		/* Super loop */
		_Flags.TurnONFlags();
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <alt_main+0x5c>)
 8000d9a:	f004 fed9 	bl	8005b50 <_ZN5Flags11TurnONFlagsEv>
		if (Status_initial_LCD){Status_initial_LCD=false;Tacvu_HIENTHI();}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <alt_main+0x60>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d004      	beq.n	8000db0 <alt_main+0x40>
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <alt_main+0x60>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
 8000dac:	f7ff ff28 	bl	8000c00 <Tacvu_HIENTHI>
		Check_Slaveid();
 8000db0:	f7ff ffa0 	bl	8000cf4 <Check_Slaveid>
		//Tacvu_HIENTHI();

		//        	Tacvu_HIENTHI();
		ThucThiTacVuTheoFlag();
 8000db4:	f7ff ff5a 	bl	8000c6c <_Z20ThucThiTacVuTheoFlagv>
		_Flags.TurnOFFFlags();
 8000db8:	4804      	ldr	r0, [pc, #16]	@ (8000dcc <alt_main+0x5c>)
 8000dba:	f004 ff2d 	bl	8005c18 <_ZN5Flags12TurnOFFFlagsEv>
		_Flags.TurnONFlags();
 8000dbe:	e7eb      	b.n	8000d98 <alt_main+0x28>
 8000dc0:	2000025c 	.word	0x2000025c
 8000dc4:	20000184 	.word	0x20000184
 8000dc8:	20000194 	.word	0x20000194
 8000dcc:	20000160 	.word	0x20000160
 8000dd0:	20000001 	.word	0x20000001

08000dd4 <_Z41__static_initialization_and_destruction_0ii>:

	}
}
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d10a      	bne.n	8000dfa <_Z41__static_initialization_and_destruction_0ii+0x26>
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d105      	bne.n	8000dfa <_Z41__static_initialization_and_destruction_0ii+0x26>
HT1621 _Ht621b;
 8000dee:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000df0:	f005 faaa 	bl	8006348 <_ZN6HT1621C1Ev>
Modbus_Slave _Modbus_Slave;
 8000df4:	4804      	ldr	r0, [pc, #16]	@ (8000e08 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000df6:	f004 ffa9 	bl	8005d4c <_ZN12Modbus_SlaveC1Ev>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000002c 	.word	0x2000002c
 8000e08:	2000004c 	.word	0x2000004c

08000e0c <_GLOBAL__sub_I__Ht621b>:
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff ffdd 	bl	8000dd4 <_Z41__static_initialization_and_destruction_0ii>
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e20:	f000 fc38 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e24:	f000 f810 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e28:	f000 f99e 	bl	8001168 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e2c:	f000 f976 	bl	800111c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e30:	f000 f94a 	bl	80010c8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e34:	f000 f896 	bl	8000f64 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000e38:	f000 f856 	bl	8000ee8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e3c:	f000 f8c0 	bl	8000fc0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  alt_main();
 8000e40:	f7ff ff96 	bl	8000d70 <alt_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <main+0x28>

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b094      	sub	sp, #80	@ 0x50
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e52:	2228      	movs	r2, #40	@ 0x28
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f005 fe32 	bl	8006ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e80:	2310      	movs	r3, #16
 8000e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f002 fd89 	bl	80039a4 <HAL_RCC_OscConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000e98:	f000 f9be 	bl	8001218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fff6 	bl	8003ea8 <HAL_RCC_ClockConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000ec2:	f000 f9a9 	bl	8001218 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f003 f977 	bl	80041c4 <HAL_RCCEx_PeriphCLKConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000edc:	f000 f99c 	bl	8001218 <Error_Handler>
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3750      	adds	r7, #80	@ 0x50
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <MX_ADC1_Init+0x74>)
 8000efa:	4a19      	ldr	r2, [pc, #100]	@ (8000f60 <MX_ADC1_Init+0x78>)
 8000efc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000efe:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <MX_ADC1_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <MX_ADC1_Init+0x74>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <MX_ADC1_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <MX_ADC1_Init+0x74>)
 8000f12:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000f16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f18:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <MX_ADC1_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <MX_ADC1_Init+0x74>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f24:	480d      	ldr	r0, [pc, #52]	@ (8000f5c <MX_ADC1_Init+0x74>)
 8000f26:	f000 fc17 	bl	8001758 <HAL_ADC_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000f30:	f000 f972 	bl	8001218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <MX_ADC1_Init+0x74>)
 8000f46:	f000 fdd9 	bl	8001afc <HAL_ADC_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000f50:	f000 f962 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000194 	.word	0x20000194
 8000f60:	40012400 	.word	0x40012400

08000f64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f6a:	4a13      	ldr	r2, [pc, #76]	@ (8000fb8 <MX_I2C1_Init+0x54>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f70:	4a12      	ldr	r2, [pc, #72]	@ (8000fbc <MX_I2C1_Init+0x58>)
 8000f72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f94:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa0:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000fa2:	f001 ff09 	bl	8002db8 <HAL_I2C_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fac:	f000 f934 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000208 	.word	0x20000208
 8000fb8:	40005400 	.word	0x40005400
 8000fbc:	000186a0 	.word	0x000186a0

08000fc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b092      	sub	sp, #72	@ 0x48
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
 8000fe0:	615a      	str	r2, [r3, #20]
 8000fe2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2220      	movs	r2, #32
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 fd68 	bl	8006ac0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ff0:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <MX_TIM1_Init+0x100>)
 8000ff2:	4a34      	ldr	r2, [pc, #208]	@ (80010c4 <MX_TIM1_Init+0x104>)
 8000ff4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ff6:	4b32      	ldr	r3, [pc, #200]	@ (80010c0 <MX_TIM1_Init+0x100>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b30      	ldr	r3, [pc, #192]	@ (80010c0 <MX_TIM1_Init+0x100>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001002:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <MX_TIM1_Init+0x100>)
 8001004:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001008:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100a:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <MX_TIM1_Init+0x100>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001010:	4b2b      	ldr	r3, [pc, #172]	@ (80010c0 <MX_TIM1_Init+0x100>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <MX_TIM1_Init+0x100>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800101c:	4828      	ldr	r0, [pc, #160]	@ (80010c0 <MX_TIM1_Init+0x100>)
 800101e:	f003 f987 	bl	8004330 <HAL_TIM_PWM_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001028:	f000 f8f6 	bl	8001218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102c:	2300      	movs	r3, #0
 800102e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001034:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001038:	4619      	mov	r1, r3
 800103a:	4821      	ldr	r0, [pc, #132]	@ (80010c0 <MX_TIM1_Init+0x100>)
 800103c:	f003 fd46 	bl	8004acc <HAL_TIMEx_MasterConfigSynchronization>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001046:	f000 f8e7 	bl	8001218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800104a:	2360      	movs	r3, #96	@ 0x60
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001056:	2300      	movs	r3, #0
 8001058:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106a:	2200      	movs	r2, #0
 800106c:	4619      	mov	r1, r3
 800106e:	4814      	ldr	r0, [pc, #80]	@ (80010c0 <MX_TIM1_Init+0x100>)
 8001070:	f003 fa50 	bl	8004514 <HAL_TIM_PWM_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800107a:	f000 f8cd 	bl	8001218 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001092:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001096:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	4619      	mov	r1, r3
 80010a0:	4807      	ldr	r0, [pc, #28]	@ (80010c0 <MX_TIM1_Init+0x100>)
 80010a2:	f003 fd71 	bl	8004b88 <HAL_TIMEx_ConfigBreakDeadTime>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80010ac:	f000 f8b4 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010b0:	4803      	ldr	r0, [pc, #12]	@ (80010c0 <MX_TIM1_Init+0x100>)
 80010b2:	f000 f9bf 	bl	8001434 <HAL_TIM_MspPostInit>

}
 80010b6:	bf00      	nop
 80010b8:	3748      	adds	r7, #72	@ 0x48
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000025c 	.word	0x2000025c
 80010c4:	40012c00 	.word	0x40012c00

080010c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <MX_USART1_UART_Init+0x4c>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <MX_USART1_UART_Init+0x50>)
 80010d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <MX_USART1_UART_Init+0x4c>)
 80010d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <MX_USART1_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <MX_USART1_UART_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <MX_USART1_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010ec:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <MX_USART1_UART_Init+0x4c>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f2:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <MX_USART1_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <MX_USART1_UART_Init+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	@ (8001114 <MX_USART1_UART_Init+0x4c>)
 8001100:	f003 fd93 	bl	8004c2a <HAL_UART_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800110a:	f000 f885 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200002a4 	.word	0x200002a4
 8001118:	40013800 	.word	0x40013800

0800111c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001122:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <MX_DMA_Init+0x48>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a0f      	ldr	r2, [pc, #60]	@ (8001164 <MX_DMA_Init+0x48>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6153      	str	r3, [r2, #20]
 800112e:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <MX_DMA_Init+0x48>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	200b      	movs	r0, #11
 8001140:	f000 ffad 	bl	800209e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001144:	200b      	movs	r0, #11
 8001146:	f000 ffc6 	bl	80020d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	200f      	movs	r0, #15
 8001150:	f000 ffa5 	bl	800209e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001154:	200f      	movs	r0, #15
 8001156:	f000 ffbe 	bl	80020d6 <HAL_NVIC_EnableIRQ>

}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b22      	ldr	r3, [pc, #136]	@ (8001208 <MX_GPIO_Init+0xa0>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a21      	ldr	r2, [pc, #132]	@ (8001208 <MX_GPIO_Init+0xa0>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <MX_GPIO_Init+0xa0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <MX_GPIO_Init+0xa0>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a1b      	ldr	r2, [pc, #108]	@ (8001208 <MX_GPIO_Init+0xa0>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_GPIO_Init+0xa0>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80011b2:	4816      	ldr	r0, [pc, #88]	@ (800120c <MX_GPIO_Init+0xa4>)
 80011b4:	f001 fdd0 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011b8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2302      	movs	r3, #2
 80011c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	4619      	mov	r1, r3
 80011d0:	480e      	ldr	r0, [pc, #56]	@ (800120c <MX_GPIO_Init+0xa4>)
 80011d2:	f001 fc3d 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011d6:	2320      	movs	r3, #32
 80011d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011da:	4b0d      	ldr	r3, [pc, #52]	@ (8001210 <MX_GPIO_Init+0xa8>)
 80011dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011de:	2301      	movs	r3, #1
 80011e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	4619      	mov	r1, r3
 80011e8:	480a      	ldr	r0, [pc, #40]	@ (8001214 <MX_GPIO_Init+0xac>)
 80011ea:	f001 fc31 	bl	8002a50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2017      	movs	r0, #23
 80011f4:	f000 ff53 	bl	800209e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011f8:	2017      	movs	r0, #23
 80011fa:	f000 ff6c 	bl	80020d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000
 800120c:	40010800 	.word	0x40010800
 8001210:	10210000 	.word	0x10210000
 8001214:	40010c00 	.word	0x40010c00

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
}
 800121e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <Error_Handler+0x8>

08001224 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <HAL_MspInit+0x5c>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <HAL_MspInit+0x5c>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6193      	str	r3, [r2, #24]
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_MspInit+0x5c>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <HAL_MspInit+0x5c>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a0e      	ldr	r2, [pc, #56]	@ (8001280 <HAL_MspInit+0x5c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124c:	61d3      	str	r3, [r2, #28]
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <HAL_MspInit+0x5c>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_MspInit+0x60>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <HAL_MspInit+0x60>)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	40021000 	.word	0x40021000
 8001284:	40010000 	.word	0x40010000

08001288 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a28      	ldr	r2, [pc, #160]	@ (8001344 <HAL_ADC_MspInit+0xbc>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d149      	bne.n	800133c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012a8:	4b27      	ldr	r3, [pc, #156]	@ (8001348 <HAL_ADC_MspInit+0xc0>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a26      	ldr	r2, [pc, #152]	@ (8001348 <HAL_ADC_MspInit+0xc0>)
 80012ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <HAL_ADC_MspInit+0xc0>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <HAL_ADC_MspInit+0xc0>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a20      	ldr	r2, [pc, #128]	@ (8001348 <HAL_ADC_MspInit+0xc0>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <HAL_ADC_MspInit+0xc0>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012d8:	2304      	movs	r3, #4
 80012da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012dc:	2303      	movs	r3, #3
 80012de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4619      	mov	r1, r3
 80012e6:	4819      	ldr	r0, [pc, #100]	@ (800134c <HAL_ADC_MspInit+0xc4>)
 80012e8:	f001 fbb2 	bl	8002a50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012ec:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <HAL_ADC_MspInit+0xc8>)
 80012ee:	4a19      	ldr	r2, [pc, #100]	@ (8001354 <HAL_ADC_MspInit+0xcc>)
 80012f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f2:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <HAL_ADC_MspInit+0xc8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_ADC_MspInit+0xc8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012fe:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <HAL_ADC_MspInit+0xc8>)
 8001300:	2280      	movs	r2, #128	@ 0x80
 8001302:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001304:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <HAL_ADC_MspInit+0xc8>)
 8001306:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800130a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800130c:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <HAL_ADC_MspInit+0xc8>)
 800130e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001312:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001314:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <HAL_ADC_MspInit+0xc8>)
 8001316:	2220      	movs	r2, #32
 8001318:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800131a:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <HAL_ADC_MspInit+0xc8>)
 800131c:	2200      	movs	r2, #0
 800131e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001320:	480b      	ldr	r0, [pc, #44]	@ (8001350 <HAL_ADC_MspInit+0xc8>)
 8001322:	f000 fef3 	bl	800210c <HAL_DMA_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800132c:	f7ff ff74 	bl	8001218 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a07      	ldr	r2, [pc, #28]	@ (8001350 <HAL_ADC_MspInit+0xc8>)
 8001334:	621a      	str	r2, [r3, #32]
 8001336:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <HAL_ADC_MspInit+0xc8>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800133c:	bf00      	nop
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40012400 	.word	0x40012400
 8001348:	40021000 	.word	0x40021000
 800134c:	40010800 	.word	0x40010800
 8001350:	200001c4 	.word	0x200001c4
 8001354:	40020008 	.word	0x40020008

08001358 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	@ 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a1d      	ldr	r2, [pc, #116]	@ (80013e8 <HAL_I2C_MspInit+0x90>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d132      	bne.n	80013de <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001378:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <HAL_I2C_MspInit+0x94>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a1b      	ldr	r2, [pc, #108]	@ (80013ec <HAL_I2C_MspInit+0x94>)
 800137e:	f043 0308 	orr.w	r3, r3, #8
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <HAL_I2C_MspInit+0x94>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001390:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001396:	2312      	movs	r3, #18
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4812      	ldr	r0, [pc, #72]	@ (80013f0 <HAL_I2C_MspInit+0x98>)
 80013a6:	f001 fb53 	bl	8002a50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80013aa:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <HAL_I2C_MspInit+0x9c>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80013b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80013b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
 80013c0:	4a0c      	ldr	r2, [pc, #48]	@ (80013f4 <HAL_I2C_MspInit+0x9c>)
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c6:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <HAL_I2C_MspInit+0x94>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a08      	ldr	r2, [pc, #32]	@ (80013ec <HAL_I2C_MspInit+0x94>)
 80013cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013d0:	61d3      	str	r3, [r2, #28]
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <HAL_I2C_MspInit+0x94>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	@ 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40005400 	.word	0x40005400
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	40010000 	.word	0x40010000

080013f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a09      	ldr	r2, [pc, #36]	@ (800142c <HAL_TIM_PWM_MspInit+0x34>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10b      	bne.n	8001422 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <HAL_TIM_PWM_MspInit+0x38>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4a08      	ldr	r2, [pc, #32]	@ (8001430 <HAL_TIM_PWM_MspInit+0x38>)
 8001410:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001414:	6193      	str	r3, [r2, #24]
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <HAL_TIM_PWM_MspInit+0x38>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	40012c00 	.word	0x40012c00
 8001430:	40021000 	.word	0x40021000

08001434 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a10      	ldr	r2, [pc, #64]	@ (8001490 <HAL_TIM_MspPostInit+0x5c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d118      	bne.n	8001486 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <HAL_TIM_MspPostInit+0x60>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a0e      	ldr	r2, [pc, #56]	@ (8001494 <HAL_TIM_MspPostInit+0x60>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <HAL_TIM_MspPostInit+0x60>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800146c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001470:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2302      	movs	r3, #2
 8001478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	@ (8001498 <HAL_TIM_MspPostInit+0x64>)
 8001482:	f001 fae5 	bl	8002a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001486:	bf00      	nop
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40012c00 	.word	0x40012c00
 8001494:	40021000 	.word	0x40021000
 8001498:	40010800 	.word	0x40010800

0800149c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a33      	ldr	r2, [pc, #204]	@ (8001584 <HAL_UART_MspInit+0xe8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d15f      	bne.n	800157c <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014bc:	4b32      	ldr	r3, [pc, #200]	@ (8001588 <HAL_UART_MspInit+0xec>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a31      	ldr	r2, [pc, #196]	@ (8001588 <HAL_UART_MspInit+0xec>)
 80014c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001588 <HAL_UART_MspInit+0xec>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <HAL_UART_MspInit+0xec>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001588 <HAL_UART_MspInit+0xec>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b29      	ldr	r3, [pc, #164]	@ (8001588 <HAL_UART_MspInit+0xec>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4619      	mov	r1, r3
 8001500:	4822      	ldr	r0, [pc, #136]	@ (800158c <HAL_UART_MspInit+0xf0>)
 8001502:	f001 faa5 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800150a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	481c      	ldr	r0, [pc, #112]	@ (800158c <HAL_UART_MspInit+0xf0>)
 800151c:	f001 fa98 	bl	8002a50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001520:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <HAL_UART_MspInit+0xf4>)
 8001522:	4a1c      	ldr	r2, [pc, #112]	@ (8001594 <HAL_UART_MspInit+0xf8>)
 8001524:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001526:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <HAL_UART_MspInit+0xf4>)
 8001528:	2200      	movs	r2, #0
 800152a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <HAL_UART_MspInit+0xf4>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001532:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <HAL_UART_MspInit+0xf4>)
 8001534:	2280      	movs	r2, #128	@ 0x80
 8001536:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <HAL_UART_MspInit+0xf4>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800153e:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <HAL_UART_MspInit+0xf4>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_UART_MspInit+0xf4>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800154a:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <HAL_UART_MspInit+0xf4>)
 800154c:	2200      	movs	r2, #0
 800154e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001550:	480f      	ldr	r0, [pc, #60]	@ (8001590 <HAL_UART_MspInit+0xf4>)
 8001552:	f000 fddb 	bl	800210c <HAL_DMA_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800155c:	f7ff fe5c 	bl	8001218 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a0b      	ldr	r2, [pc, #44]	@ (8001590 <HAL_UART_MspInit+0xf4>)
 8001564:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001566:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <HAL_UART_MspInit+0xf4>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2100      	movs	r1, #0
 8001570:	2025      	movs	r0, #37	@ 0x25
 8001572:	f000 fd94 	bl	800209e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001576:	2025      	movs	r0, #37	@ 0x25
 8001578:	f000 fdad 	bl	80020d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40013800 	.word	0x40013800
 8001588:	40021000 	.word	0x40021000
 800158c:	40010800 	.word	0x40010800
 8001590:	200002ec 	.word	0x200002ec
 8001594:	40020058 	.word	0x40020058

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <NMI_Handler+0x4>

080015a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <HardFault_Handler+0x4>

080015a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <MemManage_Handler+0x4>

080015b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <UsageFault_Handler+0x4>

080015c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e8:	f000 f89a 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015f4:	4802      	ldr	r0, [pc, #8]	@ (8001600 <DMA1_Channel1_IRQHandler+0x10>)
 80015f6:	f000 fef7 	bl	80023e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200001c4 	.word	0x200001c4

08001604 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001608:	4802      	ldr	r0, [pc, #8]	@ (8001614 <DMA1_Channel5_IRQHandler+0x10>)
 800160a:	f000 feed 	bl	80023e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200002ec 	.word	0x200002ec

08001618 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800161c:	2020      	movs	r0, #32
 800161e:	f001 fbb3 	bl	8002d88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800162c:	4802      	ldr	r0, [pc, #8]	@ (8001638 <USART1_IRQHandler+0x10>)
 800162e:	f003 fba5 	bl	8004d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200002a4 	.word	0x200002a4

0800163c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001648:	f7ff fff8 	bl	800163c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800164c:	480b      	ldr	r0, [pc, #44]	@ (800167c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800164e:	490c      	ldr	r1, [pc, #48]	@ (8001680 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001650:	4a0c      	ldr	r2, [pc, #48]	@ (8001684 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a09      	ldr	r2, [pc, #36]	@ (8001688 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001664:	4c09      	ldr	r4, [pc, #36]	@ (800168c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001672:	f005 fa2d 	bl	8006ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001676:	f7ff fbd1 	bl	8000e1c <main>
  bx lr
 800167a:	4770      	bx	lr
  ldr r0, =_sdata
 800167c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001680:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001684:	08006c3c 	.word	0x08006c3c
  ldr r2, =_sbss
 8001688:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800168c:	2000035c 	.word	0x2000035c

08001690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC1_2_IRQHandler>
	...

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <HAL_Init+0x28>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a07      	ldr	r2, [pc, #28]	@ (80016bc <HAL_Init+0x28>)
 800169e:	f043 0310 	orr.w	r3, r3, #16
 80016a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f000 fcef 	bl	8002088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016aa:	200f      	movs	r0, #15
 80016ac:	f000 f808 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b0:	f7ff fdb8 	bl	8001224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40022000 	.word	0x40022000

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <HAL_InitTick+0x54>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HAL_InitTick+0x58>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 fd07 	bl	80020f2 <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d80a      	bhi.n	800170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f000 fccf 	bl	800209e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001700:	4a06      	ldr	r2, [pc, #24]	@ (800171c <HAL_InitTick+0x5c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000004 	.word	0x20000004
 8001718:	2000000c 	.word	0x2000000c
 800171c:	20000008 	.word	0x20000008

08001720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b05      	ldr	r3, [pc, #20]	@ (800173c <HAL_IncTick+0x1c>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <HAL_IncTick+0x20>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a03      	ldr	r2, [pc, #12]	@ (8001740 <HAL_IncTick+0x20>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	2000000c 	.word	0x2000000c
 8001740:	20000330 	.word	0x20000330

08001744 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b02      	ldr	r3, [pc, #8]	@ (8001754 <HAL_GetTick+0x10>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	20000330 	.word	0x20000330

08001758 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0be      	b.n	80018f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d109      	bne.n	800179c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fd76 	bl	8001288 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 faff 	bl	8001da0 <ADC_ConversionStop_Disable>
 80017a2:	4603      	mov	r3, r0
 80017a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f040 8099 	bne.w	80018e6 <HAL_ADC_Init+0x18e>
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f040 8095 	bne.w	80018e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017c4:	f023 0302 	bic.w	r3, r3, #2
 80017c8:	f043 0202 	orr.w	r2, r3, #2
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7b1b      	ldrb	r3, [r3, #12]
 80017de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017f0:	d003      	beq.n	80017fa <HAL_ADC_Init+0xa2>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d102      	bne.n	8001800 <HAL_ADC_Init+0xa8>
 80017fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017fe:	e000      	b.n	8001802 <HAL_ADC_Init+0xaa>
 8001800:	2300      	movs	r3, #0
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7d1b      	ldrb	r3, [r3, #20]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d119      	bne.n	8001844 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7b1b      	ldrb	r3, [r3, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	3b01      	subs	r3, #1
 800181e:	035a      	lsls	r2, r3, #13
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	e00b      	b.n	8001844 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001830:	f043 0220 	orr.w	r2, r3, #32
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183c:	f043 0201 	orr.w	r2, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	430a      	orrs	r2, r1
 8001856:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	4b28      	ldr	r3, [pc, #160]	@ (8001900 <HAL_ADC_Init+0x1a8>)
 8001860:	4013      	ands	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	430b      	orrs	r3, r1
 800186a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001874:	d003      	beq.n	800187e <HAL_ADC_Init+0x126>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d104      	bne.n	8001888 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	3b01      	subs	r3, #1
 8001884:	051b      	lsls	r3, r3, #20
 8001886:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	430a      	orrs	r2, r1
 800189a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <HAL_ADC_Init+0x1ac>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d10b      	bne.n	80018c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b6:	f023 0303 	bic.w	r3, r3, #3
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018c2:	e018      	b.n	80018f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c8:	f023 0312 	bic.w	r3, r3, #18
 80018cc:	f043 0210 	orr.w	r2, r3, #16
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018e4:	e007      	b.n	80018f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ea:	f043 0210 	orr.w	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	ffe1f7fd 	.word	0xffe1f7fd
 8001904:	ff1f0efe 	.word	0xff1f0efe

08001908 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a64      	ldr	r2, [pc, #400]	@ (8001ab0 <HAL_ADC_Start_DMA+0x1a8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d004      	beq.n	800192c <HAL_ADC_Start_DMA+0x24>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a63      	ldr	r2, [pc, #396]	@ (8001ab4 <HAL_ADC_Start_DMA+0x1ac>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d106      	bne.n	800193a <HAL_ADC_Start_DMA+0x32>
 800192c:	4b60      	ldr	r3, [pc, #384]	@ (8001ab0 <HAL_ADC_Start_DMA+0x1a8>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001934:	2b00      	cmp	r3, #0
 8001936:	f040 80b3 	bne.w	8001aa0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_ADC_Start_DMA+0x40>
 8001944:	2302      	movs	r3, #2
 8001946:	e0ae      	b.n	8001aa6 <HAL_ADC_Start_DMA+0x19e>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f000 f9cb 	bl	8001cec <ADC_Enable>
 8001956:	4603      	mov	r3, r0
 8001958:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	2b00      	cmp	r3, #0
 800195e:	f040 809a 	bne.w	8001a96 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001966:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a4e      	ldr	r2, [pc, #312]	@ (8001ab4 <HAL_ADC_Start_DMA+0x1ac>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d105      	bne.n	800198c <HAL_ADC_Start_DMA+0x84>
 8001980:	4b4b      	ldr	r3, [pc, #300]	@ (8001ab0 <HAL_ADC_Start_DMA+0x1a8>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d115      	bne.n	80019b8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001990:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d026      	beq.n	80019f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019b6:	e01d      	b.n	80019f4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019bc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a39      	ldr	r2, [pc, #228]	@ (8001ab0 <HAL_ADC_Start_DMA+0x1a8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d004      	beq.n	80019d8 <HAL_ADC_Start_DMA+0xd0>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a38      	ldr	r2, [pc, #224]	@ (8001ab4 <HAL_ADC_Start_DMA+0x1ac>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d10d      	bne.n	80019f4 <HAL_ADC_Start_DMA+0xec>
 80019d8:	4b35      	ldr	r3, [pc, #212]	@ (8001ab0 <HAL_ADC_Start_DMA+0x1a8>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d007      	beq.n	80019f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a04:	f023 0206 	bic.w	r2, r3, #6
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a0c:	e002      	b.n	8001a14 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	4a25      	ldr	r2, [pc, #148]	@ (8001ab8 <HAL_ADC_Start_DMA+0x1b0>)
 8001a22:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4a24      	ldr	r2, [pc, #144]	@ (8001abc <HAL_ADC_Start_DMA+0x1b4>)
 8001a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	4a23      	ldr	r2, [pc, #140]	@ (8001ac0 <HAL_ADC_Start_DMA+0x1b8>)
 8001a32:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f06f 0202 	mvn.w	r2, #2
 8001a3c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a4c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a18      	ldr	r0, [r3, #32]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	334c      	adds	r3, #76	@ 0x4c
 8001a58:	4619      	mov	r1, r3
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f000 fbaf 	bl	80021c0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a6c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a70:	d108      	bne.n	8001a84 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001a80:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a82:	e00f      	b.n	8001aa4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001a92:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a94:	e006      	b.n	8001aa4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001a9e:	e001      	b.n	8001aa4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40012400 	.word	0x40012400
 8001ab4:	40012800 	.word	0x40012800
 8001ab8:	08001e23 	.word	0x08001e23
 8001abc:	08001e9f 	.word	0x08001e9f
 8001ac0:	08001ebb 	.word	0x08001ebb

08001ac4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x20>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e0dc      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x1da>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b06      	cmp	r3, #6
 8001b2a:	d81c      	bhi.n	8001b66 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b05      	subs	r3, #5
 8001b3e:	221f      	movs	r2, #31
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	4019      	ands	r1, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3b05      	subs	r3, #5
 8001b58:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b64:	e03c      	b.n	8001be0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d81c      	bhi.n	8001ba8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3b23      	subs	r3, #35	@ 0x23
 8001b80:	221f      	movs	r2, #31
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	4019      	ands	r1, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	3b23      	subs	r3, #35	@ 0x23
 8001b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ba6:	e01b      	b.n	8001be0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3b41      	subs	r3, #65	@ 0x41
 8001bba:	221f      	movs	r2, #31
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	4019      	ands	r1, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3b41      	subs	r3, #65	@ 0x41
 8001bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b09      	cmp	r3, #9
 8001be6:	d91c      	bls.n	8001c22 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68d9      	ldr	r1, [r3, #12]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b1e      	subs	r3, #30
 8001bfa:	2207      	movs	r2, #7
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4019      	ands	r1, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	6898      	ldr	r0, [r3, #8]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	3b1e      	subs	r3, #30
 8001c14:	fa00 f203 	lsl.w	r2, r0, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	e019      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6919      	ldr	r1, [r3, #16]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	2207      	movs	r2, #7
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	4019      	ands	r1, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	6898      	ldr	r0, [r3, #8]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d003      	beq.n	8001c66 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c62:	2b11      	cmp	r3, #17
 8001c64:	d132      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d125      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d126      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c8c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b10      	cmp	r3, #16
 8001c94:	d11a      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c96:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a13      	ldr	r2, [pc, #76]	@ (8001ce8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca0:	0c9a      	lsrs	r2, r3, #18
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cac:	e002      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f9      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x1b2>
 8001cba:	e007      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	40012400 	.word	0x40012400
 8001ce4:	20000004 	.word	0x20000004
 8001ce8:	431bde83 	.word	0x431bde83

08001cec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d040      	beq.n	8001d8c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0201 	orr.w	r2, r2, #1
 8001d18:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d98 <ADC_Enable+0xac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001d9c <ADC_Enable+0xb0>)
 8001d20:	fba2 2303 	umull	r2, r3, r2, r3
 8001d24:	0c9b      	lsrs	r3, r3, #18
 8001d26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d28:	e002      	b.n	8001d30 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f9      	bne.n	8001d2a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d36:	f7ff fd05 	bl	8001744 <HAL_GetTick>
 8001d3a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d3c:	e01f      	b.n	8001d7e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d3e:	f7ff fd01 	bl	8001744 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d918      	bls.n	8001d7e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d011      	beq.n	8001d7e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5e:	f043 0210 	orr.w	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6a:	f043 0201 	orr.w	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e007      	b.n	8001d8e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d1d8      	bne.n	8001d3e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000004 	.word	0x20000004
 8001d9c:	431bde83 	.word	0x431bde83

08001da0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d12e      	bne.n	8001e18 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dca:	f7ff fcbb 	bl	8001744 <HAL_GetTick>
 8001dce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dd0:	e01b      	b.n	8001e0a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001dd2:	f7ff fcb7 	bl	8001744 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d914      	bls.n	8001e0a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d10d      	bne.n	8001e0a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df2:	f043 0210 	orr.w	r2, r3, #16
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfe:	f043 0201 	orr.w	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e007      	b.n	8001e1a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d0dc      	beq.n	8001dd2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e34:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d127      	bne.n	8001e8c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e40:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e52:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e56:	d115      	bne.n	8001e84 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d111      	bne.n	8001e84 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d105      	bne.n	8001e84 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f7ff fe1d 	bl	8001ac4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e8a:	e004      	b.n	8001e96 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	4798      	blx	r3
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7ff fe12 	bl	8001ad6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed8:	f043 0204 	orr.w	r2, r3, #4
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f7ff fe01 	bl	8001ae8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <__NVIC_SetPriorityGrouping+0x44>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f22:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <__NVIC_SetPriorityGrouping+0x44>)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	60d3      	str	r3, [r2, #12]
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f3c:	4b04      	ldr	r3, [pc, #16]	@ (8001f50 <__NVIC_GetPriorityGrouping+0x18>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	f003 0307 	and.w	r3, r3, #7
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	db0b      	blt.n	8001f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	f003 021f 	and.w	r2, r3, #31
 8001f6c:	4906      	ldr	r1, [pc, #24]	@ (8001f88 <__NVIC_EnableIRQ+0x34>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	2001      	movs	r0, #1
 8001f76:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	@ (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	@ (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	@ 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	@ 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002054:	d301      	bcc.n	800205a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002056:	2301      	movs	r3, #1
 8002058:	e00f      	b.n	800207a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205a:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <SysTick_Config+0x40>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002062:	210f      	movs	r1, #15
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f7ff ff90 	bl	8001f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800206c:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <SysTick_Config+0x40>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002072:	4b04      	ldr	r3, [pc, #16]	@ (8002084 <SysTick_Config+0x40>)
 8002074:	2207      	movs	r2, #7
 8002076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	e000e010 	.word	0xe000e010

08002088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff2d 	bl	8001ef0 <__NVIC_SetPriorityGrouping>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b0:	f7ff ff42 	bl	8001f38 <__NVIC_GetPriorityGrouping>
 80020b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	6978      	ldr	r0, [r7, #20]
 80020bc:	f7ff ff90 	bl	8001fe0 <NVIC_EncodePriority>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff5f 	bl	8001f8c <__NVIC_SetPriority>
}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff35 	bl	8001f54 <__NVIC_EnableIRQ>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff ffa2 	bl	8002044 <SysTick_Config>
 8002100:	4603      	mov	r3, r0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e043      	b.n	80021aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	4b22      	ldr	r3, [pc, #136]	@ (80021b4 <HAL_DMA_Init+0xa8>)
 800212a:	4413      	add	r3, r2
 800212c:	4a22      	ldr	r2, [pc, #136]	@ (80021b8 <HAL_DMA_Init+0xac>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	009a      	lsls	r2, r3, #2
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a1f      	ldr	r2, [pc, #124]	@ (80021bc <HAL_DMA_Init+0xb0>)
 800213e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002156:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800215a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	bffdfff8 	.word	0xbffdfff8
 80021b8:	cccccccd 	.word	0xcccccccd
 80021bc:	40020000 	.word	0x40020000

080021c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_DMA_Start_IT+0x20>
 80021dc:	2302      	movs	r3, #2
 80021de:	e04b      	b.n	8002278 <HAL_DMA_Start_IT+0xb8>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d13a      	bne.n	800226a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0201 	bic.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f9eb 	bl	80025f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 020e 	orr.w	r2, r2, #14
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	e00f      	b.n	8002258 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0204 	bic.w	r2, r2, #4
 8002246:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 020a 	orr.w	r2, r2, #10
 8002256:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e005      	b.n	8002276 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002272:	2302      	movs	r3, #2
 8002274:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002276:	7dfb      	ldrb	r3, [r7, #23]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d008      	beq.n	80022aa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2204      	movs	r2, #4
 800229c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e020      	b.n	80022ec <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 020e 	bic.w	r2, r2, #14
 80022b8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d2:	2101      	movs	r1, #1
 80022d4:	fa01 f202 	lsl.w	r2, r1, r2
 80022d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d005      	beq.n	800231c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2204      	movs	r2, #4
 8002314:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
 800231a:	e051      	b.n	80023c0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 020e 	bic.w	r2, r2, #14
 800232a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a22      	ldr	r2, [pc, #136]	@ (80023cc <HAL_DMA_Abort_IT+0xd4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d029      	beq.n	800239a <HAL_DMA_Abort_IT+0xa2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a21      	ldr	r2, [pc, #132]	@ (80023d0 <HAL_DMA_Abort_IT+0xd8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d022      	beq.n	8002396 <HAL_DMA_Abort_IT+0x9e>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1f      	ldr	r2, [pc, #124]	@ (80023d4 <HAL_DMA_Abort_IT+0xdc>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01a      	beq.n	8002390 <HAL_DMA_Abort_IT+0x98>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1e      	ldr	r2, [pc, #120]	@ (80023d8 <HAL_DMA_Abort_IT+0xe0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d012      	beq.n	800238a <HAL_DMA_Abort_IT+0x92>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1c      	ldr	r2, [pc, #112]	@ (80023dc <HAL_DMA_Abort_IT+0xe4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00a      	beq.n	8002384 <HAL_DMA_Abort_IT+0x8c>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a1b      	ldr	r2, [pc, #108]	@ (80023e0 <HAL_DMA_Abort_IT+0xe8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d102      	bne.n	800237e <HAL_DMA_Abort_IT+0x86>
 8002378:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800237c:	e00e      	b.n	800239c <HAL_DMA_Abort_IT+0xa4>
 800237e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002382:	e00b      	b.n	800239c <HAL_DMA_Abort_IT+0xa4>
 8002384:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002388:	e008      	b.n	800239c <HAL_DMA_Abort_IT+0xa4>
 800238a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800238e:	e005      	b.n	800239c <HAL_DMA_Abort_IT+0xa4>
 8002390:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002394:	e002      	b.n	800239c <HAL_DMA_Abort_IT+0xa4>
 8002396:	2310      	movs	r3, #16
 8002398:	e000      	b.n	800239c <HAL_DMA_Abort_IT+0xa4>
 800239a:	2301      	movs	r3, #1
 800239c:	4a11      	ldr	r2, [pc, #68]	@ (80023e4 <HAL_DMA_Abort_IT+0xec>)
 800239e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	4798      	blx	r3
    } 
  }
  return status;
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40020008 	.word	0x40020008
 80023d0:	4002001c 	.word	0x4002001c
 80023d4:	40020030 	.word	0x40020030
 80023d8:	40020044 	.word	0x40020044
 80023dc:	40020058 	.word	0x40020058
 80023e0:	4002006c 	.word	0x4002006c
 80023e4:	40020000 	.word	0x40020000

080023e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	2204      	movs	r2, #4
 8002406:	409a      	lsls	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d04f      	beq.n	80024b0 <HAL_DMA_IRQHandler+0xc8>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d04a      	beq.n	80024b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d107      	bne.n	8002438 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0204 	bic.w	r2, r2, #4
 8002436:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a66      	ldr	r2, [pc, #408]	@ (80025d8 <HAL_DMA_IRQHandler+0x1f0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d029      	beq.n	8002496 <HAL_DMA_IRQHandler+0xae>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a65      	ldr	r2, [pc, #404]	@ (80025dc <HAL_DMA_IRQHandler+0x1f4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d022      	beq.n	8002492 <HAL_DMA_IRQHandler+0xaa>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a63      	ldr	r2, [pc, #396]	@ (80025e0 <HAL_DMA_IRQHandler+0x1f8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01a      	beq.n	800248c <HAL_DMA_IRQHandler+0xa4>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a62      	ldr	r2, [pc, #392]	@ (80025e4 <HAL_DMA_IRQHandler+0x1fc>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d012      	beq.n	8002486 <HAL_DMA_IRQHandler+0x9e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a60      	ldr	r2, [pc, #384]	@ (80025e8 <HAL_DMA_IRQHandler+0x200>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d00a      	beq.n	8002480 <HAL_DMA_IRQHandler+0x98>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a5f      	ldr	r2, [pc, #380]	@ (80025ec <HAL_DMA_IRQHandler+0x204>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d102      	bne.n	800247a <HAL_DMA_IRQHandler+0x92>
 8002474:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002478:	e00e      	b.n	8002498 <HAL_DMA_IRQHandler+0xb0>
 800247a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800247e:	e00b      	b.n	8002498 <HAL_DMA_IRQHandler+0xb0>
 8002480:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002484:	e008      	b.n	8002498 <HAL_DMA_IRQHandler+0xb0>
 8002486:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800248a:	e005      	b.n	8002498 <HAL_DMA_IRQHandler+0xb0>
 800248c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002490:	e002      	b.n	8002498 <HAL_DMA_IRQHandler+0xb0>
 8002492:	2340      	movs	r3, #64	@ 0x40
 8002494:	e000      	b.n	8002498 <HAL_DMA_IRQHandler+0xb0>
 8002496:	2304      	movs	r3, #4
 8002498:	4a55      	ldr	r2, [pc, #340]	@ (80025f0 <HAL_DMA_IRQHandler+0x208>)
 800249a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 8094 	beq.w	80025ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80024ae:	e08e      	b.n	80025ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b4:	2202      	movs	r2, #2
 80024b6:	409a      	lsls	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d056      	beq.n	800256e <HAL_DMA_IRQHandler+0x186>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d051      	beq.n	800256e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10b      	bne.n	80024f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 020a 	bic.w	r2, r2, #10
 80024e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a38      	ldr	r2, [pc, #224]	@ (80025d8 <HAL_DMA_IRQHandler+0x1f0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d029      	beq.n	800254e <HAL_DMA_IRQHandler+0x166>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a37      	ldr	r2, [pc, #220]	@ (80025dc <HAL_DMA_IRQHandler+0x1f4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d022      	beq.n	800254a <HAL_DMA_IRQHandler+0x162>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a35      	ldr	r2, [pc, #212]	@ (80025e0 <HAL_DMA_IRQHandler+0x1f8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d01a      	beq.n	8002544 <HAL_DMA_IRQHandler+0x15c>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a34      	ldr	r2, [pc, #208]	@ (80025e4 <HAL_DMA_IRQHandler+0x1fc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d012      	beq.n	800253e <HAL_DMA_IRQHandler+0x156>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a32      	ldr	r2, [pc, #200]	@ (80025e8 <HAL_DMA_IRQHandler+0x200>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00a      	beq.n	8002538 <HAL_DMA_IRQHandler+0x150>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a31      	ldr	r2, [pc, #196]	@ (80025ec <HAL_DMA_IRQHandler+0x204>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d102      	bne.n	8002532 <HAL_DMA_IRQHandler+0x14a>
 800252c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002530:	e00e      	b.n	8002550 <HAL_DMA_IRQHandler+0x168>
 8002532:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002536:	e00b      	b.n	8002550 <HAL_DMA_IRQHandler+0x168>
 8002538:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800253c:	e008      	b.n	8002550 <HAL_DMA_IRQHandler+0x168>
 800253e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002542:	e005      	b.n	8002550 <HAL_DMA_IRQHandler+0x168>
 8002544:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002548:	e002      	b.n	8002550 <HAL_DMA_IRQHandler+0x168>
 800254a:	2320      	movs	r3, #32
 800254c:	e000      	b.n	8002550 <HAL_DMA_IRQHandler+0x168>
 800254e:	2302      	movs	r3, #2
 8002550:	4a27      	ldr	r2, [pc, #156]	@ (80025f0 <HAL_DMA_IRQHandler+0x208>)
 8002552:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002560:	2b00      	cmp	r3, #0
 8002562:	d034      	beq.n	80025ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800256c:	e02f      	b.n	80025ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	2208      	movs	r2, #8
 8002574:	409a      	lsls	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d028      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x1e8>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d023      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 020e 	bic.w	r2, r2, #14
 8002596:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f202 	lsl.w	r2, r1, r2
 80025a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	4798      	blx	r3
    }
  }
  return;
 80025ce:	bf00      	nop
 80025d0:	bf00      	nop
}
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40020008 	.word	0x40020008
 80025dc:	4002001c 	.word	0x4002001c
 80025e0:	40020030 	.word	0x40020030
 80025e4:	40020044 	.word	0x40020044
 80025e8:	40020058 	.word	0x40020058
 80025ec:	4002006c 	.word	0x4002006c
 80025f0:	40020000 	.word	0x40020000

080025f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800260a:	2101      	movs	r1, #1
 800260c:	fa01 f202 	lsl.w	r2, r1, r2
 8002610:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b10      	cmp	r3, #16
 8002620:	d108      	bne.n	8002634 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002632:	e007      	b.n	8002644 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	60da      	str	r2, [r3, #12]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
	...

08002650 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800266a:	4b2f      	ldr	r3, [pc, #188]	@ (8002728 <HAL_FLASH_Program+0xd8>)
 800266c:	7e1b      	ldrb	r3, [r3, #24]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_FLASH_Program+0x26>
 8002672:	2302      	movs	r3, #2
 8002674:	e054      	b.n	8002720 <HAL_FLASH_Program+0xd0>
 8002676:	4b2c      	ldr	r3, [pc, #176]	@ (8002728 <HAL_FLASH_Program+0xd8>)
 8002678:	2201      	movs	r2, #1
 800267a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800267c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002680:	f000 f8a8 	bl	80027d4 <FLASH_WaitForLastOperation>
 8002684:	4603      	mov	r3, r0
 8002686:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002688:	7dfb      	ldrb	r3, [r7, #23]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d144      	bne.n	8002718 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d102      	bne.n	800269a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002694:	2301      	movs	r3, #1
 8002696:	757b      	strb	r3, [r7, #21]
 8002698:	e007      	b.n	80026aa <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d102      	bne.n	80026a6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80026a0:	2302      	movs	r3, #2
 80026a2:	757b      	strb	r3, [r7, #21]
 80026a4:	e001      	b.n	80026aa <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80026a6:	2304      	movs	r3, #4
 80026a8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	75bb      	strb	r3, [r7, #22]
 80026ae:	e02d      	b.n	800270c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80026b0:	7dbb      	ldrb	r3, [r7, #22]
 80026b2:	005a      	lsls	r2, r3, #1
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	eb02 0c03 	add.w	ip, r2, r3
 80026ba:	7dbb      	ldrb	r3, [r7, #22]
 80026bc:	0119      	lsls	r1, r3, #4
 80026be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026c2:	f1c1 0620 	rsb	r6, r1, #32
 80026c6:	f1a1 0020 	sub.w	r0, r1, #32
 80026ca:	fa22 f401 	lsr.w	r4, r2, r1
 80026ce:	fa03 f606 	lsl.w	r6, r3, r6
 80026d2:	4334      	orrs	r4, r6
 80026d4:	fa23 f000 	lsr.w	r0, r3, r0
 80026d8:	4304      	orrs	r4, r0
 80026da:	fa23 f501 	lsr.w	r5, r3, r1
 80026de:	b2a3      	uxth	r3, r4
 80026e0:	4619      	mov	r1, r3
 80026e2:	4660      	mov	r0, ip
 80026e4:	f000 f85a 	bl	800279c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026e8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80026ec:	f000 f872 	bl	80027d4 <FLASH_WaitForLastOperation>
 80026f0:	4603      	mov	r3, r0
 80026f2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80026f4:	4b0d      	ldr	r3, [pc, #52]	@ (800272c <HAL_FLASH_Program+0xdc>)
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	4a0c      	ldr	r2, [pc, #48]	@ (800272c <HAL_FLASH_Program+0xdc>)
 80026fa:	f023 0301 	bic.w	r3, r3, #1
 80026fe:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002700:	7dfb      	ldrb	r3, [r7, #23]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d107      	bne.n	8002716 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002706:	7dbb      	ldrb	r3, [r7, #22]
 8002708:	3301      	adds	r3, #1
 800270a:	75bb      	strb	r3, [r7, #22]
 800270c:	7dba      	ldrb	r2, [r7, #22]
 800270e:	7d7b      	ldrb	r3, [r7, #21]
 8002710:	429a      	cmp	r2, r3
 8002712:	d3cd      	bcc.n	80026b0 <HAL_FLASH_Program+0x60>
 8002714:	e000      	b.n	8002718 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002716:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002718:	4b03      	ldr	r3, [pc, #12]	@ (8002728 <HAL_FLASH_Program+0xd8>)
 800271a:	2200      	movs	r2, #0
 800271c:	761a      	strb	r2, [r3, #24]

  return status;
 800271e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002720:	4618      	mov	r0, r3
 8002722:	371c      	adds	r7, #28
 8002724:	46bd      	mov	sp, r7
 8002726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002728:	20000338 	.word	0x20000338
 800272c:	40022000 	.word	0x40022000

08002730 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800273a:	4b0d      	ldr	r3, [pc, #52]	@ (8002770 <HAL_FLASH_Unlock+0x40>)
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00d      	beq.n	8002762 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002746:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <HAL_FLASH_Unlock+0x40>)
 8002748:	4a0a      	ldr	r2, [pc, #40]	@ (8002774 <HAL_FLASH_Unlock+0x44>)
 800274a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800274c:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <HAL_FLASH_Unlock+0x40>)
 800274e:	4a0a      	ldr	r2, [pc, #40]	@ (8002778 <HAL_FLASH_Unlock+0x48>)
 8002750:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002752:	4b07      	ldr	r3, [pc, #28]	@ (8002770 <HAL_FLASH_Unlock+0x40>)
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002762:	79fb      	ldrb	r3, [r7, #7]
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40022000 	.word	0x40022000
 8002774:	45670123 	.word	0x45670123
 8002778:	cdef89ab 	.word	0xcdef89ab

0800277c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002780:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <HAL_FLASH_Lock+0x1c>)
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	4a04      	ldr	r2, [pc, #16]	@ (8002798 <HAL_FLASH_Lock+0x1c>)
 8002786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800278a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40022000 	.word	0x40022000

0800279c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027a8:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <FLASH_Program_HalfWord+0x30>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80027ae:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <FLASH_Program_HalfWord+0x34>)
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	4a07      	ldr	r2, [pc, #28]	@ (80027d0 <FLASH_Program_HalfWord+0x34>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	887a      	ldrh	r2, [r7, #2]
 80027be:	801a      	strh	r2, [r3, #0]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000338 	.word	0x20000338
 80027d0:	40022000 	.word	0x40022000

080027d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7fe ffb2 	bl	8001744 <HAL_GetTick>
 80027e0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80027e2:	e010      	b.n	8002806 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ea:	d00c      	beq.n	8002806 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <FLASH_WaitForLastOperation+0x2e>
 80027f2:	f7fe ffa7 	bl	8001744 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d201      	bcs.n	8002806 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e025      	b.n	8002852 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002806:	4b15      	ldr	r3, [pc, #84]	@ (800285c <FLASH_WaitForLastOperation+0x88>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1e8      	bne.n	80027e4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002812:	4b12      	ldr	r3, [pc, #72]	@ (800285c <FLASH_WaitForLastOperation+0x88>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800281e:	4b0f      	ldr	r3, [pc, #60]	@ (800285c <FLASH_WaitForLastOperation+0x88>)
 8002820:	2220      	movs	r2, #32
 8002822:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002824:	4b0d      	ldr	r3, [pc, #52]	@ (800285c <FLASH_WaitForLastOperation+0x88>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10b      	bne.n	8002848 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002830:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <FLASH_WaitForLastOperation+0x88>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800283c:	4b07      	ldr	r3, [pc, #28]	@ (800285c <FLASH_WaitForLastOperation+0x88>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002848:	f000 f80a 	bl	8002860 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40022000 	.word	0x40022000

08002860 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800286a:	4b23      	ldr	r3, [pc, #140]	@ (80028f8 <FLASH_SetErrorCode+0x98>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002876:	4b21      	ldr	r3, [pc, #132]	@ (80028fc <FLASH_SetErrorCode+0x9c>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f043 0302 	orr.w	r3, r3, #2
 800287e:	4a1f      	ldr	r2, [pc, #124]	@ (80028fc <FLASH_SetErrorCode+0x9c>)
 8002880:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f043 0310 	orr.w	r3, r3, #16
 8002888:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800288a:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <FLASH_SetErrorCode+0x98>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002896:	4b19      	ldr	r3, [pc, #100]	@ (80028fc <FLASH_SetErrorCode+0x9c>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	4a17      	ldr	r2, [pc, #92]	@ (80028fc <FLASH_SetErrorCode+0x9c>)
 80028a0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80028aa:	4b13      	ldr	r3, [pc, #76]	@ (80028f8 <FLASH_SetErrorCode+0x98>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80028b6:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <FLASH_SetErrorCode+0x9c>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	4a0f      	ldr	r2, [pc, #60]	@ (80028fc <FLASH_SetErrorCode+0x9c>)
 80028c0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80028c2:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <FLASH_SetErrorCode+0x98>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	4a0c      	ldr	r2, [pc, #48]	@ (80028f8 <FLASH_SetErrorCode+0x98>)
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f240 1201 	movw	r2, #257	@ 0x101
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d106      	bne.n	80028e6 <FLASH_SetErrorCode+0x86>
 80028d8:	4b07      	ldr	r3, [pc, #28]	@ (80028f8 <FLASH_SetErrorCode+0x98>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	4a06      	ldr	r2, [pc, #24]	@ (80028f8 <FLASH_SetErrorCode+0x98>)
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	61d3      	str	r3, [r2, #28]
}  
 80028e4:	e002      	b.n	80028ec <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80028e6:	4a04      	ldr	r2, [pc, #16]	@ (80028f8 <FLASH_SetErrorCode+0x98>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	60d3      	str	r3, [r2, #12]
}  
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40022000 	.word	0x40022000
 80028fc:	20000338 	.word	0x20000338

08002900 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002912:	4b2f      	ldr	r3, [pc, #188]	@ (80029d0 <HAL_FLASHEx_Erase+0xd0>)
 8002914:	7e1b      	ldrb	r3, [r3, #24]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_FLASHEx_Erase+0x1e>
 800291a:	2302      	movs	r3, #2
 800291c:	e053      	b.n	80029c6 <HAL_FLASHEx_Erase+0xc6>
 800291e:	4b2c      	ldr	r3, [pc, #176]	@ (80029d0 <HAL_FLASHEx_Erase+0xd0>)
 8002920:	2201      	movs	r2, #1
 8002922:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d116      	bne.n	800295a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800292c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002930:	f7ff ff50 	bl	80027d4 <FLASH_WaitForLastOperation>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d141      	bne.n	80029be <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800293a:	2001      	movs	r0, #1
 800293c:	f000 f84c 	bl	80029d8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002940:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002944:	f7ff ff46 	bl	80027d4 <FLASH_WaitForLastOperation>
 8002948:	4603      	mov	r3, r0
 800294a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800294c:	4b21      	ldr	r3, [pc, #132]	@ (80029d4 <HAL_FLASHEx_Erase+0xd4>)
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	4a20      	ldr	r2, [pc, #128]	@ (80029d4 <HAL_FLASHEx_Erase+0xd4>)
 8002952:	f023 0304 	bic.w	r3, r3, #4
 8002956:	6113      	str	r3, [r2, #16]
 8002958:	e031      	b.n	80029be <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800295a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800295e:	f7ff ff39 	bl	80027d4 <FLASH_WaitForLastOperation>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d12a      	bne.n	80029be <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f04f 32ff 	mov.w	r2, #4294967295
 800296e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	e019      	b.n	80029ac <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002978:	68b8      	ldr	r0, [r7, #8]
 800297a:	f000 f849 	bl	8002a10 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800297e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002982:	f7ff ff27 	bl	80027d4 <FLASH_WaitForLastOperation>
 8002986:	4603      	mov	r3, r0
 8002988:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800298a:	4b12      	ldr	r3, [pc, #72]	@ (80029d4 <HAL_FLASHEx_Erase+0xd4>)
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	4a11      	ldr	r2, [pc, #68]	@ (80029d4 <HAL_FLASHEx_Erase+0xd4>)
 8002990:	f023 0302 	bic.w	r3, r3, #2
 8002994:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	601a      	str	r2, [r3, #0]
            break;
 80029a2:	e00c      	b.n	80029be <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029aa:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	029a      	lsls	r2, r3, #10
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	4413      	add	r3, r2
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d3dc      	bcc.n	8002978 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029be:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <HAL_FLASHEx_Erase+0xd0>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	761a      	strb	r2, [r3, #24]

  return status;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000338 	.word	0x20000338
 80029d4:	40022000 	.word	0x40022000

080029d8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80029e0:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <FLASH_MassErase+0x30>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80029e6:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <FLASH_MassErase+0x34>)
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	4a08      	ldr	r2, [pc, #32]	@ (8002a0c <FLASH_MassErase+0x34>)
 80029ec:	f043 0304 	orr.w	r3, r3, #4
 80029f0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80029f2:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <FLASH_MassErase+0x34>)
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	4a05      	ldr	r2, [pc, #20]	@ (8002a0c <FLASH_MassErase+0x34>)
 80029f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029fc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	20000338 	.word	0x20000338
 8002a0c:	40022000 	.word	0x40022000

08002a10 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a18:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <FLASH_PageErase+0x38>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a4c <FLASH_PageErase+0x3c>)
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	4a0a      	ldr	r2, [pc, #40]	@ (8002a4c <FLASH_PageErase+0x3c>)
 8002a24:	f043 0302 	orr.w	r3, r3, #2
 8002a28:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002a2a:	4a08      	ldr	r2, [pc, #32]	@ (8002a4c <FLASH_PageErase+0x3c>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a30:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <FLASH_PageErase+0x3c>)
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	4a05      	ldr	r2, [pc, #20]	@ (8002a4c <FLASH_PageErase+0x3c>)
 8002a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a3a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000338 	.word	0x20000338
 8002a4c:	40022000 	.word	0x40022000

08002a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b08b      	sub	sp, #44	@ 0x2c
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a62:	e169      	b.n	8002d38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a64:	2201      	movs	r2, #1
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	f040 8158 	bne.w	8002d32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4a9a      	ldr	r2, [pc, #616]	@ (8002cf0 <HAL_GPIO_Init+0x2a0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d05e      	beq.n	8002b4a <HAL_GPIO_Init+0xfa>
 8002a8c:	4a98      	ldr	r2, [pc, #608]	@ (8002cf0 <HAL_GPIO_Init+0x2a0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d875      	bhi.n	8002b7e <HAL_GPIO_Init+0x12e>
 8002a92:	4a98      	ldr	r2, [pc, #608]	@ (8002cf4 <HAL_GPIO_Init+0x2a4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d058      	beq.n	8002b4a <HAL_GPIO_Init+0xfa>
 8002a98:	4a96      	ldr	r2, [pc, #600]	@ (8002cf4 <HAL_GPIO_Init+0x2a4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d86f      	bhi.n	8002b7e <HAL_GPIO_Init+0x12e>
 8002a9e:	4a96      	ldr	r2, [pc, #600]	@ (8002cf8 <HAL_GPIO_Init+0x2a8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d052      	beq.n	8002b4a <HAL_GPIO_Init+0xfa>
 8002aa4:	4a94      	ldr	r2, [pc, #592]	@ (8002cf8 <HAL_GPIO_Init+0x2a8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d869      	bhi.n	8002b7e <HAL_GPIO_Init+0x12e>
 8002aaa:	4a94      	ldr	r2, [pc, #592]	@ (8002cfc <HAL_GPIO_Init+0x2ac>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d04c      	beq.n	8002b4a <HAL_GPIO_Init+0xfa>
 8002ab0:	4a92      	ldr	r2, [pc, #584]	@ (8002cfc <HAL_GPIO_Init+0x2ac>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d863      	bhi.n	8002b7e <HAL_GPIO_Init+0x12e>
 8002ab6:	4a92      	ldr	r2, [pc, #584]	@ (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d046      	beq.n	8002b4a <HAL_GPIO_Init+0xfa>
 8002abc:	4a90      	ldr	r2, [pc, #576]	@ (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d85d      	bhi.n	8002b7e <HAL_GPIO_Init+0x12e>
 8002ac2:	2b12      	cmp	r3, #18
 8002ac4:	d82a      	bhi.n	8002b1c <HAL_GPIO_Init+0xcc>
 8002ac6:	2b12      	cmp	r3, #18
 8002ac8:	d859      	bhi.n	8002b7e <HAL_GPIO_Init+0x12e>
 8002aca:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad0 <HAL_GPIO_Init+0x80>)
 8002acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad0:	08002b4b 	.word	0x08002b4b
 8002ad4:	08002b25 	.word	0x08002b25
 8002ad8:	08002b37 	.word	0x08002b37
 8002adc:	08002b79 	.word	0x08002b79
 8002ae0:	08002b7f 	.word	0x08002b7f
 8002ae4:	08002b7f 	.word	0x08002b7f
 8002ae8:	08002b7f 	.word	0x08002b7f
 8002aec:	08002b7f 	.word	0x08002b7f
 8002af0:	08002b7f 	.word	0x08002b7f
 8002af4:	08002b7f 	.word	0x08002b7f
 8002af8:	08002b7f 	.word	0x08002b7f
 8002afc:	08002b7f 	.word	0x08002b7f
 8002b00:	08002b7f 	.word	0x08002b7f
 8002b04:	08002b7f 	.word	0x08002b7f
 8002b08:	08002b7f 	.word	0x08002b7f
 8002b0c:	08002b7f 	.word	0x08002b7f
 8002b10:	08002b7f 	.word	0x08002b7f
 8002b14:	08002b2d 	.word	0x08002b2d
 8002b18:	08002b41 	.word	0x08002b41
 8002b1c:	4a79      	ldr	r2, [pc, #484]	@ (8002d04 <HAL_GPIO_Init+0x2b4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d013      	beq.n	8002b4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b22:	e02c      	b.n	8002b7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	623b      	str	r3, [r7, #32]
          break;
 8002b2a:	e029      	b.n	8002b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	3304      	adds	r3, #4
 8002b32:	623b      	str	r3, [r7, #32]
          break;
 8002b34:	e024      	b.n	8002b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	3308      	adds	r3, #8
 8002b3c:	623b      	str	r3, [r7, #32]
          break;
 8002b3e:	e01f      	b.n	8002b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	330c      	adds	r3, #12
 8002b46:	623b      	str	r3, [r7, #32]
          break;
 8002b48:	e01a      	b.n	8002b80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d102      	bne.n	8002b58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b52:	2304      	movs	r3, #4
 8002b54:	623b      	str	r3, [r7, #32]
          break;
 8002b56:	e013      	b.n	8002b80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d105      	bne.n	8002b6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b60:	2308      	movs	r3, #8
 8002b62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	611a      	str	r2, [r3, #16]
          break;
 8002b6a:	e009      	b.n	8002b80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b6c:	2308      	movs	r3, #8
 8002b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	615a      	str	r2, [r3, #20]
          break;
 8002b76:	e003      	b.n	8002b80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	623b      	str	r3, [r7, #32]
          break;
 8002b7c:	e000      	b.n	8002b80 <HAL_GPIO_Init+0x130>
          break;
 8002b7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2bff      	cmp	r3, #255	@ 0xff
 8002b84:	d801      	bhi.n	8002b8a <HAL_GPIO_Init+0x13a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	e001      	b.n	8002b8e <HAL_GPIO_Init+0x13e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	2bff      	cmp	r3, #255	@ 0xff
 8002b94:	d802      	bhi.n	8002b9c <HAL_GPIO_Init+0x14c>
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	e002      	b.n	8002ba2 <HAL_GPIO_Init+0x152>
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9e:	3b08      	subs	r3, #8
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	210f      	movs	r1, #15
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	6a39      	ldr	r1, [r7, #32]
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80b1 	beq.w	8002d32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8002d08 <HAL_GPIO_Init+0x2b8>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	4a4c      	ldr	r2, [pc, #304]	@ (8002d08 <HAL_GPIO_Init+0x2b8>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6193      	str	r3, [r2, #24]
 8002bdc:	4b4a      	ldr	r3, [pc, #296]	@ (8002d08 <HAL_GPIO_Init+0x2b8>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002be8:	4a48      	ldr	r2, [pc, #288]	@ (8002d0c <HAL_GPIO_Init+0x2bc>)
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	3302      	adds	r3, #2
 8002bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	220f      	movs	r2, #15
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a40      	ldr	r2, [pc, #256]	@ (8002d10 <HAL_GPIO_Init+0x2c0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d013      	beq.n	8002c3c <HAL_GPIO_Init+0x1ec>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a3f      	ldr	r2, [pc, #252]	@ (8002d14 <HAL_GPIO_Init+0x2c4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00d      	beq.n	8002c38 <HAL_GPIO_Init+0x1e8>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d18 <HAL_GPIO_Init+0x2c8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d007      	beq.n	8002c34 <HAL_GPIO_Init+0x1e4>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a3d      	ldr	r2, [pc, #244]	@ (8002d1c <HAL_GPIO_Init+0x2cc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d101      	bne.n	8002c30 <HAL_GPIO_Init+0x1e0>
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e006      	b.n	8002c3e <HAL_GPIO_Init+0x1ee>
 8002c30:	2304      	movs	r3, #4
 8002c32:	e004      	b.n	8002c3e <HAL_GPIO_Init+0x1ee>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e002      	b.n	8002c3e <HAL_GPIO_Init+0x1ee>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <HAL_GPIO_Init+0x1ee>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c40:	f002 0203 	and.w	r2, r2, #3
 8002c44:	0092      	lsls	r2, r2, #2
 8002c46:	4093      	lsls	r3, r2
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c4e:	492f      	ldr	r1, [pc, #188]	@ (8002d0c <HAL_GPIO_Init+0x2bc>)
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	3302      	adds	r3, #2
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d006      	beq.n	8002c76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c68:	4b2d      	ldr	r3, [pc, #180]	@ (8002d20 <HAL_GPIO_Init+0x2d0>)
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	492c      	ldr	r1, [pc, #176]	@ (8002d20 <HAL_GPIO_Init+0x2d0>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	608b      	str	r3, [r1, #8]
 8002c74:	e006      	b.n	8002c84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c76:	4b2a      	ldr	r3, [pc, #168]	@ (8002d20 <HAL_GPIO_Init+0x2d0>)
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	4928      	ldr	r1, [pc, #160]	@ (8002d20 <HAL_GPIO_Init+0x2d0>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d006      	beq.n	8002c9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c90:	4b23      	ldr	r3, [pc, #140]	@ (8002d20 <HAL_GPIO_Init+0x2d0>)
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	4922      	ldr	r1, [pc, #136]	@ (8002d20 <HAL_GPIO_Init+0x2d0>)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60cb      	str	r3, [r1, #12]
 8002c9c:	e006      	b.n	8002cac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c9e:	4b20      	ldr	r3, [pc, #128]	@ (8002d20 <HAL_GPIO_Init+0x2d0>)
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	491e      	ldr	r1, [pc, #120]	@ (8002d20 <HAL_GPIO_Init+0x2d0>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d006      	beq.n	8002cc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cb8:	4b19      	ldr	r3, [pc, #100]	@ (8002d20 <HAL_GPIO_Init+0x2d0>)
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	4918      	ldr	r1, [pc, #96]	@ (8002d20 <HAL_GPIO_Init+0x2d0>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	604b      	str	r3, [r1, #4]
 8002cc4:	e006      	b.n	8002cd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cc6:	4b16      	ldr	r3, [pc, #88]	@ (8002d20 <HAL_GPIO_Init+0x2d0>)
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	4914      	ldr	r1, [pc, #80]	@ (8002d20 <HAL_GPIO_Init+0x2d0>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d021      	beq.n	8002d24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d20 <HAL_GPIO_Init+0x2d0>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	490e      	ldr	r1, [pc, #56]	@ (8002d20 <HAL_GPIO_Init+0x2d0>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	600b      	str	r3, [r1, #0]
 8002cec:	e021      	b.n	8002d32 <HAL_GPIO_Init+0x2e2>
 8002cee:	bf00      	nop
 8002cf0:	10320000 	.word	0x10320000
 8002cf4:	10310000 	.word	0x10310000
 8002cf8:	10220000 	.word	0x10220000
 8002cfc:	10210000 	.word	0x10210000
 8002d00:	10120000 	.word	0x10120000
 8002d04:	10110000 	.word	0x10110000
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40010000 	.word	0x40010000
 8002d10:	40010800 	.word	0x40010800
 8002d14:	40010c00 	.word	0x40010c00
 8002d18:	40011000 	.word	0x40011000
 8002d1c:	40011400 	.word	0x40011400
 8002d20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d24:	4b0b      	ldr	r3, [pc, #44]	@ (8002d54 <HAL_GPIO_Init+0x304>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	4909      	ldr	r1, [pc, #36]	@ (8002d54 <HAL_GPIO_Init+0x304>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	3301      	adds	r3, #1
 8002d36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f47f ae8e 	bne.w	8002a64 <HAL_GPIO_Init+0x14>
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	372c      	adds	r7, #44	@ 0x2c
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	40010400 	.word	0x40010400

08002d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	807b      	strh	r3, [r7, #2]
 8002d64:	4613      	mov	r3, r2
 8002d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d68:	787b      	ldrb	r3, [r7, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d74:	e003      	b.n	8002d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d76:	887b      	ldrh	r3, [r7, #2]
 8002d78:	041a      	lsls	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	611a      	str	r2, [r3, #16]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d92:	4b08      	ldr	r3, [pc, #32]	@ (8002db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d006      	beq.n	8002dac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d9e:	4a05      	ldr	r2, [pc, #20]	@ (8002db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fefc 	bl	8000ba4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40010400 	.word	0x40010400

08002db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e12b      	b.n	8003022 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fe faba 	bl	8001358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2224      	movs	r2, #36	@ 0x24
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e1c:	f001 f98c 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8002e20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4a81      	ldr	r2, [pc, #516]	@ (800302c <HAL_I2C_Init+0x274>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d807      	bhi.n	8002e3c <HAL_I2C_Init+0x84>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a80      	ldr	r2, [pc, #512]	@ (8003030 <HAL_I2C_Init+0x278>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	bf94      	ite	ls
 8002e34:	2301      	movls	r3, #1
 8002e36:	2300      	movhi	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	e006      	b.n	8002e4a <HAL_I2C_Init+0x92>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a7d      	ldr	r2, [pc, #500]	@ (8003034 <HAL_I2C_Init+0x27c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	bf94      	ite	ls
 8002e44:	2301      	movls	r3, #1
 8002e46:	2300      	movhi	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e0e7      	b.n	8003022 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4a78      	ldr	r2, [pc, #480]	@ (8003038 <HAL_I2C_Init+0x280>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	0c9b      	lsrs	r3, r3, #18
 8002e5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4a6a      	ldr	r2, [pc, #424]	@ (800302c <HAL_I2C_Init+0x274>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d802      	bhi.n	8002e8c <HAL_I2C_Init+0xd4>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	e009      	b.n	8002ea0 <HAL_I2C_Init+0xe8>
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	4a69      	ldr	r2, [pc, #420]	@ (800303c <HAL_I2C_Init+0x284>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	099b      	lsrs	r3, r3, #6
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002eb2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	495c      	ldr	r1, [pc, #368]	@ (800302c <HAL_I2C_Init+0x274>)
 8002ebc:	428b      	cmp	r3, r1
 8002ebe:	d819      	bhi.n	8002ef4 <HAL_I2C_Init+0x13c>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1e59      	subs	r1, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ece:	1c59      	adds	r1, r3, #1
 8002ed0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ed4:	400b      	ands	r3, r1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_I2C_Init+0x138>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1e59      	subs	r1, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eee:	e051      	b.n	8002f94 <HAL_I2C_Init+0x1dc>
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	e04f      	b.n	8002f94 <HAL_I2C_Init+0x1dc>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d111      	bne.n	8002f20 <HAL_I2C_Init+0x168>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e58      	subs	r0, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	440b      	add	r3, r1
 8002f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e012      	b.n	8002f46 <HAL_I2C_Init+0x18e>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e58      	subs	r0, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	0099      	lsls	r1, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Init+0x196>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e022      	b.n	8002f94 <HAL_I2C_Init+0x1dc>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10e      	bne.n	8002f74 <HAL_I2C_Init+0x1bc>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1e58      	subs	r0, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	440b      	add	r3, r1
 8002f64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f72:	e00f      	b.n	8002f94 <HAL_I2C_Init+0x1dc>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1e58      	subs	r0, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	0099      	lsls	r1, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	6809      	ldr	r1, [r1, #0]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002fc2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6911      	ldr	r1, [r2, #16]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68d2      	ldr	r2, [r2, #12]
 8002fce:	4311      	orrs	r1, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	000186a0 	.word	0x000186a0
 8003030:	001e847f 	.word	0x001e847f
 8003034:	003d08ff 	.word	0x003d08ff
 8003038:	431bde83 	.word	0x431bde83
 800303c:	10624dd3 	.word	0x10624dd3

08003040 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08c      	sub	sp, #48	@ 0x30
 8003044:	af02      	add	r7, sp, #8
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	461a      	mov	r2, r3
 800304c:	460b      	mov	r3, r1
 800304e:	817b      	strh	r3, [r7, #10]
 8003050:	4613      	mov	r3, r2
 8003052:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7fe fb74 	bl	8001744 <HAL_GetTick>
 800305c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b20      	cmp	r3, #32
 8003068:	f040 824b 	bne.w	8003502 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800306c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2319      	movs	r3, #25
 8003072:	2201      	movs	r2, #1
 8003074:	497f      	ldr	r1, [pc, #508]	@ (8003274 <HAL_I2C_Master_Receive+0x234>)
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 fb1c 	bl	80036b4 <I2C_WaitOnFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003082:	2302      	movs	r3, #2
 8003084:	e23e      	b.n	8003504 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_I2C_Master_Receive+0x54>
 8003090:	2302      	movs	r3, #2
 8003092:	e237      	b.n	8003504 <HAL_I2C_Master_Receive+0x4c4>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d007      	beq.n	80030ba <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0201 	orr.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2222      	movs	r2, #34	@ 0x22
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2210      	movs	r2, #16
 80030d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	893a      	ldrh	r2, [r7, #8]
 80030ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4a5f      	ldr	r2, [pc, #380]	@ (8003278 <HAL_I2C_Master_Receive+0x238>)
 80030fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030fc:	8979      	ldrh	r1, [r7, #10]
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fa08 	bl	8003518 <I2C_MasterRequestRead>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e1f8      	b.n	8003504 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003116:	2b00      	cmp	r3, #0
 8003118:	d113      	bne.n	8003142 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	e1cc      	b.n	80034dc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003146:	2b01      	cmp	r3, #1
 8003148:	d11e      	bne.n	8003188 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003158:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800315a:	b672      	cpsid	i
}
 800315c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800315e:	2300      	movs	r3, #0
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003182:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003184:	b662      	cpsie	i
}
 8003186:	e035      	b.n	80031f4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318c:	2b02      	cmp	r3, #2
 800318e:	d11e      	bne.n	80031ce <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800319e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031a0:	b672      	cpsid	i
}
 80031a2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031ca:	b662      	cpsie	i
}
 80031cc:	e012      	b.n	80031f4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80031f4:	e172      	b.n	80034dc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	f200 811f 	bhi.w	800343e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003204:	2b01      	cmp	r3, #1
 8003206:	d123      	bne.n	8003250 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 fb6b 	bl	80038e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e173      	b.n	8003504 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800324e:	e145      	b.n	80034dc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003254:	2b02      	cmp	r3, #2
 8003256:	d152      	bne.n	80032fe <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325e:	2200      	movs	r2, #0
 8003260:	4906      	ldr	r1, [pc, #24]	@ (800327c <HAL_I2C_Master_Receive+0x23c>)
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fa26 	bl	80036b4 <I2C_WaitOnFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e148      	b.n	8003504 <HAL_I2C_Master_Receive+0x4c4>
 8003272:	bf00      	nop
 8003274:	00100002 	.word	0x00100002
 8003278:	ffff0000 	.word	0xffff0000
 800327c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003280:	b672      	cpsid	i
}
 8003282:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032c6:	b662      	cpsie	i
}
 80032c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032fc:	e0ee      	b.n	80034dc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003304:	2200      	movs	r2, #0
 8003306:	4981      	ldr	r1, [pc, #516]	@ (800350c <HAL_I2C_Master_Receive+0x4cc>)
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f9d3 	bl	80036b4 <I2C_WaitOnFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0f5      	b.n	8003504 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003326:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003328:	b672      	cpsid	i
}
 800332a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800335e:	4b6c      	ldr	r3, [pc, #432]	@ (8003510 <HAL_I2C_Master_Receive+0x4d0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	08db      	lsrs	r3, r3, #3
 8003364:	4a6b      	ldr	r2, [pc, #428]	@ (8003514 <HAL_I2C_Master_Receive+0x4d4>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	0a1a      	lsrs	r2, r3, #8
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	00da      	lsls	r2, r3, #3
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	3b01      	subs	r3, #1
 800337c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d118      	bne.n	80033b6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	f043 0220 	orr.w	r2, r3, #32
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80033a6:	b662      	cpsie	i
}
 80033a8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e0a6      	b.n	8003504 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d1d9      	bne.n	8003378 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003406:	b662      	cpsie	i
}
 8003408:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800343c:	e04e      	b.n	80034dc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800343e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003440:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fa50 	bl	80038e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e058      	b.n	8003504 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b04      	cmp	r3, #4
 8003490:	d124      	bne.n	80034dc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003496:	2b03      	cmp	r3, #3
 8003498:	d107      	bne.n	80034aa <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034a8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f47f ae88 	bne.w	80031f6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	e000      	b.n	8003504 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003502:	2302      	movs	r3, #2
  }
}
 8003504:	4618      	mov	r0, r3
 8003506:	3728      	adds	r7, #40	@ 0x28
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	00010004 	.word	0x00010004
 8003510:	20000004 	.word	0x20000004
 8003514:	14f8b589 	.word	0x14f8b589

08003518 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	460b      	mov	r3, r1
 8003526:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800353c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d006      	beq.n	8003552 <I2C_MasterRequestRead+0x3a>
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d003      	beq.n	8003552 <I2C_MasterRequestRead+0x3a>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003550:	d108      	bne.n	8003564 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e00b      	b.n	800357c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003568:	2b11      	cmp	r3, #17
 800356a:	d107      	bne.n	800357c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800357a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f893 	bl	80036b4 <I2C_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00d      	beq.n	80035b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035a2:	d103      	bne.n	80035ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e079      	b.n	80036a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035b8:	d108      	bne.n	80035cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035ba:	897b      	ldrh	r3, [r7, #10]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	611a      	str	r2, [r3, #16]
 80035ca:	e05f      	b.n	800368c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035cc:	897b      	ldrh	r3, [r7, #10]
 80035ce:	11db      	asrs	r3, r3, #7
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f003 0306 	and.w	r3, r3, #6
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f063 030f 	orn	r3, r3, #15
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	4930      	ldr	r1, [pc, #192]	@ (80036ac <I2C_MasterRequestRead+0x194>)
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f8dc 	bl	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e054      	b.n	80036a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035fa:	897b      	ldrh	r3, [r7, #10]
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4929      	ldr	r1, [pc, #164]	@ (80036b0 <I2C_MasterRequestRead+0x198>)
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f8cc 	bl	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e044      	b.n	80036a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800363e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f831 	bl	80036b4 <I2C_WaitOnFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00d      	beq.n	8003674 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003666:	d103      	bne.n	8003670 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e017      	b.n	80036a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003674:	897b      	ldrh	r3, [r7, #10]
 8003676:	11db      	asrs	r3, r3, #7
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f003 0306 	and.w	r3, r3, #6
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f063 030e 	orn	r3, r3, #14
 8003684:	b2da      	uxtb	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4907      	ldr	r1, [pc, #28]	@ (80036b0 <I2C_MasterRequestRead+0x198>)
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f888 	bl	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	00010008 	.word	0x00010008
 80036b0:	00010002 	.word	0x00010002

080036b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	4613      	mov	r3, r2
 80036c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036c4:	e048      	b.n	8003758 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d044      	beq.n	8003758 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ce:	f7fe f839 	bl	8001744 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d302      	bcc.n	80036e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d139      	bne.n	8003758 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	0c1b      	lsrs	r3, r3, #16
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d10d      	bne.n	800370a <I2C_WaitOnFlagUntilTimeout+0x56>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	43da      	mvns	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4013      	ands	r3, r2
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	e00c      	b.n	8003724 <I2C_WaitOnFlagUntilTimeout+0x70>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	43da      	mvns	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	4013      	ands	r3, r2
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	461a      	mov	r2, r3
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	429a      	cmp	r2, r3
 8003728:	d116      	bne.n	8003758 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	f043 0220 	orr.w	r2, r3, #32
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e023      	b.n	80037a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	0c1b      	lsrs	r3, r3, #16
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b01      	cmp	r3, #1
 8003760:	d10d      	bne.n	800377e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	43da      	mvns	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4013      	ands	r3, r2
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	e00c      	b.n	8003798 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	43da      	mvns	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	4013      	ands	r3, r2
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf0c      	ite	eq
 8003790:	2301      	moveq	r3, #1
 8003792:	2300      	movne	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	461a      	mov	r2, r3
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	429a      	cmp	r2, r3
 800379c:	d093      	beq.n	80036c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037b6:	e071      	b.n	800389c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c6:	d123      	bne.n	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	f043 0204 	orr.w	r2, r3, #4
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e067      	b.n	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d041      	beq.n	800389c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003818:	f7fd ff94 	bl	8001744 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	d302      	bcc.n	800382e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d136      	bne.n	800389c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	0c1b      	lsrs	r3, r3, #16
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d10c      	bne.n	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	43da      	mvns	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4013      	ands	r3, r2
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	bf14      	ite	ne
 800384a:	2301      	movne	r3, #1
 800384c:	2300      	moveq	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	e00b      	b.n	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	43da      	mvns	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4013      	ands	r3, r2
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	f043 0220 	orr.w	r2, r3, #32
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e021      	b.n	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	0c1b      	lsrs	r3, r3, #16
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d10c      	bne.n	80038c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	43da      	mvns	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4013      	ands	r3, r2
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e00b      	b.n	80038d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	43da      	mvns	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	bf14      	ite	ne
 80038d2:	2301      	movne	r3, #1
 80038d4:	2300      	moveq	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f47f af6d 	bne.w	80037b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038f4:	e049      	b.n	800398a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b10      	cmp	r3, #16
 8003902:	d119      	bne.n	8003938 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0210 	mvn.w	r2, #16
 800390c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e030      	b.n	800399a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003938:	f7fd ff04 	bl	8001744 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	429a      	cmp	r2, r3
 8003946:	d302      	bcc.n	800394e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d11d      	bne.n	800398a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003958:	2b40      	cmp	r3, #64	@ 0x40
 800395a:	d016      	beq.n	800398a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003976:	f043 0220 	orr.w	r2, r3, #32
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e007      	b.n	800399a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003994:	2b40      	cmp	r3, #64	@ 0x40
 8003996:	d1ae      	bne.n	80038f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e272      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 8087 	beq.w	8003ad2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039c4:	4b92      	ldr	r3, [pc, #584]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d00c      	beq.n	80039ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039d0:	4b8f      	ldr	r3, [pc, #572]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d112      	bne.n	8003a02 <HAL_RCC_OscConfig+0x5e>
 80039dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e8:	d10b      	bne.n	8003a02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ea:	4b89      	ldr	r3, [pc, #548]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d06c      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x12c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d168      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e24c      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a0a:	d106      	bne.n	8003a1a <HAL_RCC_OscConfig+0x76>
 8003a0c:	4b80      	ldr	r3, [pc, #512]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a7f      	ldr	r2, [pc, #508]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003a12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	e02e      	b.n	8003a78 <HAL_RCC_OscConfig+0xd4>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x98>
 8003a22:	4b7b      	ldr	r3, [pc, #492]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a7a      	ldr	r2, [pc, #488]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	4b78      	ldr	r3, [pc, #480]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a77      	ldr	r2, [pc, #476]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e01d      	b.n	8003a78 <HAL_RCC_OscConfig+0xd4>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCC_OscConfig+0xbc>
 8003a46:	4b72      	ldr	r3, [pc, #456]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a71      	ldr	r2, [pc, #452]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	4b6f      	ldr	r3, [pc, #444]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a6e      	ldr	r2, [pc, #440]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e00b      	b.n	8003a78 <HAL_RCC_OscConfig+0xd4>
 8003a60:	4b6b      	ldr	r3, [pc, #428]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a6a      	ldr	r2, [pc, #424]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	4b68      	ldr	r3, [pc, #416]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a67      	ldr	r2, [pc, #412]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d013      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fd fe60 	bl	8001744 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fd fe5c 	bl	8001744 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	@ 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e200      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9a:	4b5d      	ldr	r3, [pc, #372]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0xe4>
 8003aa6:	e014      	b.n	8003ad2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa8:	f7fd fe4c 	bl	8001744 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab0:	f7fd fe48 	bl	8001744 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b64      	cmp	r3, #100	@ 0x64
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e1ec      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac2:	4b53      	ldr	r3, [pc, #332]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x10c>
 8003ace:	e000      	b.n	8003ad2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d063      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ade:	4b4c      	ldr	r3, [pc, #304]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00b      	beq.n	8003b02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003aea:	4b49      	ldr	r3, [pc, #292]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d11c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x18c>
 8003af6:	4b46      	ldr	r3, [pc, #280]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d116      	bne.n	8003b30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b02:	4b43      	ldr	r3, [pc, #268]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_RCC_OscConfig+0x176>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d001      	beq.n	8003b1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e1c0      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4939      	ldr	r1, [pc, #228]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2e:	e03a      	b.n	8003ba6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d020      	beq.n	8003b7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b38:	4b36      	ldr	r3, [pc, #216]	@ (8003c14 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7fd fe01 	bl	8001744 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b46:	f7fd fdfd 	bl	8001744 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e1a1      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b58:	4b2d      	ldr	r3, [pc, #180]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b64:	4b2a      	ldr	r3, [pc, #168]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4927      	ldr	r1, [pc, #156]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	600b      	str	r3, [r1, #0]
 8003b78:	e015      	b.n	8003ba6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7a:	4b26      	ldr	r3, [pc, #152]	@ (8003c14 <HAL_RCC_OscConfig+0x270>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7fd fde0 	bl	8001744 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b88:	f7fd fddc 	bl	8001744 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e180      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d03a      	beq.n	8003c28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d019      	beq.n	8003bee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bba:	4b17      	ldr	r3, [pc, #92]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc0:	f7fd fdc0 	bl	8001744 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc8:	f7fd fdbc 	bl	8001744 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e160      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bda:	4b0d      	ldr	r3, [pc, #52]	@ (8003c10 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003be6:	2001      	movs	r0, #1
 8003be8:	f000 face 	bl	8004188 <RCC_Delay>
 8003bec:	e01c      	b.n	8003c28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bee:	4b0a      	ldr	r3, [pc, #40]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf4:	f7fd fda6 	bl	8001744 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bfa:	e00f      	b.n	8003c1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bfc:	f7fd fda2 	bl	8001744 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d908      	bls.n	8003c1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e146      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	42420000 	.word	0x42420000
 8003c18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c1c:	4b92      	ldr	r3, [pc, #584]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e9      	bne.n	8003bfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80a6 	beq.w	8003d82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c36:	2300      	movs	r3, #0
 8003c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c3a:	4b8b      	ldr	r3, [pc, #556]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10d      	bne.n	8003c62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c46:	4b88      	ldr	r3, [pc, #544]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	4a87      	ldr	r2, [pc, #540]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c50:	61d3      	str	r3, [r2, #28]
 8003c52:	4b85      	ldr	r3, [pc, #532]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5a:	60bb      	str	r3, [r7, #8]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c62:	4b82      	ldr	r3, [pc, #520]	@ (8003e6c <HAL_RCC_OscConfig+0x4c8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d118      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c6e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e6c <HAL_RCC_OscConfig+0x4c8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a7e      	ldr	r2, [pc, #504]	@ (8003e6c <HAL_RCC_OscConfig+0x4c8>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c7a:	f7fd fd63 	bl	8001744 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c82:	f7fd fd5f 	bl	8001744 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b64      	cmp	r3, #100	@ 0x64
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e103      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c94:	4b75      	ldr	r3, [pc, #468]	@ (8003e6c <HAL_RCC_OscConfig+0x4c8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x312>
 8003ca8:	4b6f      	ldr	r3, [pc, #444]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	4a6e      	ldr	r2, [pc, #440]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	6213      	str	r3, [r2, #32]
 8003cb4:	e02d      	b.n	8003d12 <HAL_RCC_OscConfig+0x36e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x334>
 8003cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	4a69      	ldr	r2, [pc, #420]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	6213      	str	r3, [r2, #32]
 8003cca:	4b67      	ldr	r3, [pc, #412]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	4a66      	ldr	r2, [pc, #408]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	f023 0304 	bic.w	r3, r3, #4
 8003cd4:	6213      	str	r3, [r2, #32]
 8003cd6:	e01c      	b.n	8003d12 <HAL_RCC_OscConfig+0x36e>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	2b05      	cmp	r3, #5
 8003cde:	d10c      	bne.n	8003cfa <HAL_RCC_OscConfig+0x356>
 8003ce0:	4b61      	ldr	r3, [pc, #388]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	4a60      	ldr	r2, [pc, #384]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003ce6:	f043 0304 	orr.w	r3, r3, #4
 8003cea:	6213      	str	r3, [r2, #32]
 8003cec:	4b5e      	ldr	r3, [pc, #376]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	4a5d      	ldr	r2, [pc, #372]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	6213      	str	r3, [r2, #32]
 8003cf8:	e00b      	b.n	8003d12 <HAL_RCC_OscConfig+0x36e>
 8003cfa:	4b5b      	ldr	r3, [pc, #364]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	4a5a      	ldr	r2, [pc, #360]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	6213      	str	r3, [r2, #32]
 8003d06:	4b58      	ldr	r3, [pc, #352]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	4a57      	ldr	r2, [pc, #348]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003d0c:	f023 0304 	bic.w	r3, r3, #4
 8003d10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d015      	beq.n	8003d46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1a:	f7fd fd13 	bl	8001744 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d20:	e00a      	b.n	8003d38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d22:	f7fd fd0f 	bl	8001744 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e0b1      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d38:	4b4b      	ldr	r3, [pc, #300]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0ee      	beq.n	8003d22 <HAL_RCC_OscConfig+0x37e>
 8003d44:	e014      	b.n	8003d70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d46:	f7fd fcfd 	bl	8001744 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4c:	e00a      	b.n	8003d64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4e:	f7fd fcf9 	bl	8001744 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e09b      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d64:	4b40      	ldr	r3, [pc, #256]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1ee      	bne.n	8003d4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d70:	7dfb      	ldrb	r3, [r7, #23]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d105      	bne.n	8003d82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d76:	4b3c      	ldr	r3, [pc, #240]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	4a3b      	ldr	r2, [pc, #236]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8087 	beq.w	8003e9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d8c:	4b36      	ldr	r3, [pc, #216]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 030c 	and.w	r3, r3, #12
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d061      	beq.n	8003e5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d146      	bne.n	8003e2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da0:	4b33      	ldr	r3, [pc, #204]	@ (8003e70 <HAL_RCC_OscConfig+0x4cc>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da6:	f7fd fccd 	bl	8001744 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dae:	f7fd fcc9 	bl	8001744 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e06d      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc0:	4b29      	ldr	r3, [pc, #164]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f0      	bne.n	8003dae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dd4:	d108      	bne.n	8003de8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dd6:	4b24      	ldr	r3, [pc, #144]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	4921      	ldr	r1, [pc, #132]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003de8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a19      	ldr	r1, [r3, #32]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	491b      	ldr	r1, [pc, #108]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e00:	4b1b      	ldr	r3, [pc, #108]	@ (8003e70 <HAL_RCC_OscConfig+0x4cc>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e06:	f7fd fc9d 	bl	8001744 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0e:	f7fd fc99 	bl	8001744 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e03d      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e20:	4b11      	ldr	r3, [pc, #68]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_RCC_OscConfig+0x46a>
 8003e2c:	e035      	b.n	8003e9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2e:	4b10      	ldr	r3, [pc, #64]	@ (8003e70 <HAL_RCC_OscConfig+0x4cc>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fd fc86 	bl	8001744 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3c:	f7fd fc82 	bl	8001744 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e026      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e4e:	4b06      	ldr	r3, [pc, #24]	@ (8003e68 <HAL_RCC_OscConfig+0x4c4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x498>
 8003e5a:	e01e      	b.n	8003e9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d107      	bne.n	8003e74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e019      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40007000 	.word	0x40007000
 8003e70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea4 <HAL_RCC_OscConfig+0x500>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d106      	bne.n	8003e96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d001      	beq.n	8003e9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40021000 	.word	0x40021000

08003ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0d0      	b.n	800405e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b6a      	ldr	r3, [pc, #424]	@ (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d910      	bls.n	8003eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b67      	ldr	r3, [pc, #412]	@ (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 0207 	bic.w	r2, r3, #7
 8003ed2:	4965      	ldr	r1, [pc, #404]	@ (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b63      	ldr	r3, [pc, #396]	@ (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0b8      	b.n	800405e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d020      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f04:	4b59      	ldr	r3, [pc, #356]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4a58      	ldr	r2, [pc, #352]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f1c:	4b53      	ldr	r3, [pc, #332]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4a52      	ldr	r2, [pc, #328]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f22:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003f26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f28:	4b50      	ldr	r3, [pc, #320]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	494d      	ldr	r1, [pc, #308]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d040      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4e:	4b47      	ldr	r3, [pc, #284]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d115      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e07f      	b.n	800405e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f66:	4b41      	ldr	r3, [pc, #260]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e073      	b.n	800405e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f76:	4b3d      	ldr	r3, [pc, #244]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e06b      	b.n	800405e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f86:	4b39      	ldr	r3, [pc, #228]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4936      	ldr	r1, [pc, #216]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f98:	f7fd fbd4 	bl	8001744 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7fd fbd0 	bl	8001744 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e053      	b.n	800405e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f003 020c 	and.w	r2, r3, #12
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1eb      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b27      	ldr	r3, [pc, #156]	@ (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d210      	bcs.n	8003ff8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b24      	ldr	r3, [pc, #144]	@ (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 0207 	bic.w	r2, r3, #7
 8003fde:	4922      	ldr	r1, [pc, #136]	@ (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe6:	4b20      	ldr	r3, [pc, #128]	@ (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e032      	b.n	800405e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004004:	4b19      	ldr	r3, [pc, #100]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4916      	ldr	r1, [pc, #88]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8004012:	4313      	orrs	r3, r2
 8004014:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004022:	4b12      	ldr	r3, [pc, #72]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	490e      	ldr	r1, [pc, #56]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	4313      	orrs	r3, r2
 8004034:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004036:	f000 f821 	bl	800407c <HAL_RCC_GetSysClockFreq>
 800403a:	4602      	mov	r2, r0
 800403c:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <HAL_RCC_ClockConfig+0x1c4>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	490a      	ldr	r1, [pc, #40]	@ (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 8004048:	5ccb      	ldrb	r3, [r1, r3]
 800404a:	fa22 f303 	lsr.w	r3, r2, r3
 800404e:	4a09      	ldr	r2, [pc, #36]	@ (8004074 <HAL_RCC_ClockConfig+0x1cc>)
 8004050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004052:	4b09      	ldr	r3, [pc, #36]	@ (8004078 <HAL_RCC_ClockConfig+0x1d0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fd fb32 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40022000 	.word	0x40022000
 800406c:	40021000 	.word	0x40021000
 8004070:	08006b30 	.word	0x08006b30
 8004074:	20000004 	.word	0x20000004
 8004078:	20000008 	.word	0x20000008

0800407c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004096:	4b1e      	ldr	r3, [pc, #120]	@ (8004110 <HAL_RCC_GetSysClockFreq+0x94>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d002      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x30>
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d003      	beq.n	80040b2 <HAL_RCC_GetSysClockFreq+0x36>
 80040aa:	e027      	b.n	80040fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040ac:	4b19      	ldr	r3, [pc, #100]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ae:	613b      	str	r3, [r7, #16]
      break;
 80040b0:	e027      	b.n	8004102 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	0c9b      	lsrs	r3, r3, #18
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	4a17      	ldr	r2, [pc, #92]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040bc:	5cd3      	ldrb	r3, [r2, r3]
 80040be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d010      	beq.n	80040ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040ca:	4b11      	ldr	r3, [pc, #68]	@ (8004110 <HAL_RCC_GetSysClockFreq+0x94>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	0c5b      	lsrs	r3, r3, #17
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	4a11      	ldr	r2, [pc, #68]	@ (800411c <HAL_RCC_GetSysClockFreq+0xa0>)
 80040d6:	5cd3      	ldrb	r3, [r2, r3]
 80040d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x98>)
 80040de:	fb03 f202 	mul.w	r2, r3, r2
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	e004      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004120 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040f0:	fb02 f303 	mul.w	r3, r2, r3
 80040f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	613b      	str	r3, [r7, #16]
      break;
 80040fa:	e002      	b.n	8004102 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040fc:	4b05      	ldr	r3, [pc, #20]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x98>)
 80040fe:	613b      	str	r3, [r7, #16]
      break;
 8004100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004102:	693b      	ldr	r3, [r7, #16]
}
 8004104:	4618      	mov	r0, r3
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000
 8004114:	007a1200 	.word	0x007a1200
 8004118:	08006b48 	.word	0x08006b48
 800411c:	08006b58 	.word	0x08006b58
 8004120:	003d0900 	.word	0x003d0900

08004124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004128:	4b02      	ldr	r3, [pc, #8]	@ (8004134 <HAL_RCC_GetHCLKFreq+0x10>)
 800412a:	681b      	ldr	r3, [r3, #0]
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr
 8004134:	20000004 	.word	0x20000004

08004138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800413c:	f7ff fff2 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 8004140:	4602      	mov	r2, r0
 8004142:	4b05      	ldr	r3, [pc, #20]	@ (8004158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	0a1b      	lsrs	r3, r3, #8
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	4903      	ldr	r1, [pc, #12]	@ (800415c <HAL_RCC_GetPCLK1Freq+0x24>)
 800414e:	5ccb      	ldrb	r3, [r1, r3]
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000
 800415c:	08006b40 	.word	0x08006b40

08004160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004164:	f7ff ffde 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 8004168:	4602      	mov	r2, r0
 800416a:	4b05      	ldr	r3, [pc, #20]	@ (8004180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	0adb      	lsrs	r3, r3, #11
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	4903      	ldr	r1, [pc, #12]	@ (8004184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004176:	5ccb      	ldrb	r3, [r1, r3]
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800417c:	4618      	mov	r0, r3
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40021000 	.word	0x40021000
 8004184:	08006b40 	.word	0x08006b40

08004188 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004190:	4b0a      	ldr	r3, [pc, #40]	@ (80041bc <RCC_Delay+0x34>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a0a      	ldr	r2, [pc, #40]	@ (80041c0 <RCC_Delay+0x38>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	0a5b      	lsrs	r3, r3, #9
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041a4:	bf00      	nop
  }
  while (Delay --);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1e5a      	subs	r2, r3, #1
 80041aa:	60fa      	str	r2, [r7, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f9      	bne.n	80041a4 <RCC_Delay+0x1c>
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	20000004 	.word	0x20000004
 80041c0:	10624dd3 	.word	0x10624dd3

080041c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d07d      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80041e0:	2300      	movs	r3, #0
 80041e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10d      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f0:	4b4c      	ldr	r3, [pc, #304]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041fa:	61d3      	str	r3, [r2, #28]
 80041fc:	4b49      	ldr	r3, [pc, #292]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004208:	2301      	movs	r3, #1
 800420a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420c:	4b46      	ldr	r3, [pc, #280]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d118      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004218:	4b43      	ldr	r3, [pc, #268]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a42      	ldr	r2, [pc, #264]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800421e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004222:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004224:	f7fd fa8e 	bl	8001744 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422a:	e008      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422c:	f7fd fa8a 	bl	8001744 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	@ 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e06d      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423e:	4b3a      	ldr	r3, [pc, #232]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800424a:	4b36      	ldr	r3, [pc, #216]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004252:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d02e      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	429a      	cmp	r2, r3
 8004266:	d027      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004268:	4b2e      	ldr	r3, [pc, #184]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004270:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004272:	4b2e      	ldr	r3, [pc, #184]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004278:	4b2c      	ldr	r3, [pc, #176]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800427e:	4a29      	ldr	r2, [pc, #164]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d014      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428e:	f7fd fa59 	bl	8001744 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004294:	e00a      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004296:	f7fd fa55 	bl	8001744 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d901      	bls.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e036      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0ee      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4917      	ldr	r1, [pc, #92]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d105      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d0:	4b14      	ldr	r3, [pc, #80]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	4a13      	ldr	r2, [pc, #76]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	490b      	ldr	r1, [pc, #44]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004306:	4b07      	ldr	r3, [pc, #28]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	4904      	ldr	r1, [pc, #16]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004314:	4313      	orrs	r3, r2
 8004316:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000
 8004328:	40007000 	.word	0x40007000
 800432c:	42420440 	.word	0x42420440

08004330 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e041      	b.n	80043c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fd f84e 	bl	80013f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3304      	adds	r3, #4
 800436c:	4619      	mov	r1, r3
 800436e:	4610      	mov	r0, r2
 8004370:	f000 f992 	bl	8004698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d109      	bne.n	80043f4 <HAL_TIM_PWM_Start+0x24>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e022      	b.n	800443a <HAL_TIM_PWM_Start+0x6a>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d109      	bne.n	800440e <HAL_TIM_PWM_Start+0x3e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	bf14      	ite	ne
 8004406:	2301      	movne	r3, #1
 8004408:	2300      	moveq	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	e015      	b.n	800443a <HAL_TIM_PWM_Start+0x6a>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d109      	bne.n	8004428 <HAL_TIM_PWM_Start+0x58>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	bf14      	ite	ne
 8004420:	2301      	movne	r3, #1
 8004422:	2300      	moveq	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	e008      	b.n	800443a <HAL_TIM_PWM_Start+0x6a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	bf14      	ite	ne
 8004434:	2301      	movne	r3, #1
 8004436:	2300      	moveq	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e05e      	b.n	8004500 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d104      	bne.n	8004452 <HAL_TIM_PWM_Start+0x82>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004450:	e013      	b.n	800447a <HAL_TIM_PWM_Start+0xaa>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b04      	cmp	r3, #4
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start+0x92>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004460:	e00b      	b.n	800447a <HAL_TIM_PWM_Start+0xaa>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d104      	bne.n	8004472 <HAL_TIM_PWM_Start+0xa2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004470:	e003      	b.n	800447a <HAL_TIM_PWM_Start+0xaa>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2201      	movs	r2, #1
 8004480:	6839      	ldr	r1, [r7, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fafe 	bl	8004a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1e      	ldr	r2, [pc, #120]	@ (8004508 <HAL_TIM_PWM_Start+0x138>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d107      	bne.n	80044a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a18      	ldr	r2, [pc, #96]	@ (8004508 <HAL_TIM_PWM_Start+0x138>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00e      	beq.n	80044ca <HAL_TIM_PWM_Start+0xfa>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b4:	d009      	beq.n	80044ca <HAL_TIM_PWM_Start+0xfa>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a14      	ldr	r2, [pc, #80]	@ (800450c <HAL_TIM_PWM_Start+0x13c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d004      	beq.n	80044ca <HAL_TIM_PWM_Start+0xfa>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a12      	ldr	r2, [pc, #72]	@ (8004510 <HAL_TIM_PWM_Start+0x140>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d111      	bne.n	80044ee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b06      	cmp	r3, #6
 80044da:	d010      	beq.n	80044fe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ec:	e007      	b.n	80044fe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0201 	orr.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40012c00 	.word	0x40012c00
 800450c:	40000400 	.word	0x40000400
 8004510:	40000800 	.word	0x40000800

08004514 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800452e:	2302      	movs	r3, #2
 8004530:	e0ae      	b.n	8004690 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b0c      	cmp	r3, #12
 800453e:	f200 809f 	bhi.w	8004680 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004542:	a201      	add	r2, pc, #4	@ (adr r2, 8004548 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	0800457d 	.word	0x0800457d
 800454c:	08004681 	.word	0x08004681
 8004550:	08004681 	.word	0x08004681
 8004554:	08004681 	.word	0x08004681
 8004558:	080045bd 	.word	0x080045bd
 800455c:	08004681 	.word	0x08004681
 8004560:	08004681 	.word	0x08004681
 8004564:	08004681 	.word	0x08004681
 8004568:	080045ff 	.word	0x080045ff
 800456c:	08004681 	.word	0x08004681
 8004570:	08004681 	.word	0x08004681
 8004574:	08004681 	.word	0x08004681
 8004578:	0800463f 	.word	0x0800463f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68b9      	ldr	r1, [r7, #8]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 f8f6 	bl	8004774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0208 	orr.w	r2, r2, #8
 8004596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0204 	bic.w	r2, r2, #4
 80045a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6999      	ldr	r1, [r3, #24]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	619a      	str	r2, [r3, #24]
      break;
 80045ba:	e064      	b.n	8004686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68b9      	ldr	r1, [r7, #8]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 f93c 	bl	8004840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6999      	ldr	r1, [r3, #24]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	021a      	lsls	r2, r3, #8
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	619a      	str	r2, [r3, #24]
      break;
 80045fc:	e043      	b.n	8004686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	4618      	mov	r0, r3
 8004606:	f000 f985 	bl	8004914 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0208 	orr.w	r2, r2, #8
 8004618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0204 	bic.w	r2, r2, #4
 8004628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69d9      	ldr	r1, [r3, #28]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	61da      	str	r2, [r3, #28]
      break;
 800463c:	e023      	b.n	8004686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	4618      	mov	r0, r3
 8004646:	f000 f9cf 	bl	80049e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69d9      	ldr	r1, [r3, #28]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	021a      	lsls	r2, r3, #8
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	61da      	str	r2, [r3, #28]
      break;
 800467e:	e002      	b.n	8004686 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	75fb      	strb	r3, [r7, #23]
      break;
 8004684:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800468e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004768 <TIM_Base_SetConfig+0xd0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00b      	beq.n	80046c8 <TIM_Base_SetConfig+0x30>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b6:	d007      	beq.n	80046c8 <TIM_Base_SetConfig+0x30>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a2c      	ldr	r2, [pc, #176]	@ (800476c <TIM_Base_SetConfig+0xd4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_Base_SetConfig+0x30>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004770 <TIM_Base_SetConfig+0xd8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d108      	bne.n	80046da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a22      	ldr	r2, [pc, #136]	@ (8004768 <TIM_Base_SetConfig+0xd0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00b      	beq.n	80046fa <TIM_Base_SetConfig+0x62>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e8:	d007      	beq.n	80046fa <TIM_Base_SetConfig+0x62>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a1f      	ldr	r2, [pc, #124]	@ (800476c <TIM_Base_SetConfig+0xd4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d003      	beq.n	80046fa <TIM_Base_SetConfig+0x62>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004770 <TIM_Base_SetConfig+0xd8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d108      	bne.n	800470c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a0d      	ldr	r2, [pc, #52]	@ (8004768 <TIM_Base_SetConfig+0xd0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d103      	bne.n	8004740 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f023 0201 	bic.w	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	611a      	str	r2, [r3, #16]
  }
}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800

08004774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f023 0201 	bic.w	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0303 	bic.w	r3, r3, #3
 80047aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f023 0302 	bic.w	r3, r3, #2
 80047bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a1c      	ldr	r2, [pc, #112]	@ (800483c <TIM_OC1_SetConfig+0xc8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d10c      	bne.n	80047ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f023 0308 	bic.w	r3, r3, #8
 80047d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f023 0304 	bic.w	r3, r3, #4
 80047e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a13      	ldr	r2, [pc, #76]	@ (800483c <TIM_OC1_SetConfig+0xc8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d111      	bne.n	8004816 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	621a      	str	r2, [r3, #32]
}
 8004830:	bf00      	nop
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40012c00 	.word	0x40012c00

08004840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	f023 0210 	bic.w	r2, r3, #16
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800486e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f023 0320 	bic.w	r3, r3, #32
 800488a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a1d      	ldr	r2, [pc, #116]	@ (8004910 <TIM_OC2_SetConfig+0xd0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d10d      	bne.n	80048bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a14      	ldr	r2, [pc, #80]	@ (8004910 <TIM_OC2_SetConfig+0xd0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d113      	bne.n	80048ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	621a      	str	r2, [r3, #32]
}
 8004906:	bf00      	nop
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr
 8004910:	40012c00 	.word	0x40012c00

08004914 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0303 	bic.w	r3, r3, #3
 800494a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800495c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a1d      	ldr	r2, [pc, #116]	@ (80049e4 <TIM_OC3_SetConfig+0xd0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d10d      	bne.n	800498e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004978:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	021b      	lsls	r3, r3, #8
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800498c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a14      	ldr	r2, [pc, #80]	@ (80049e4 <TIM_OC3_SetConfig+0xd0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d113      	bne.n	80049be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800499c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	621a      	str	r2, [r3, #32]
}
 80049d8:	bf00      	nop
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40012c00 	.word	0x40012c00

080049e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	021b      	lsls	r3, r3, #8
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	031b      	lsls	r3, r3, #12
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a0f      	ldr	r2, [pc, #60]	@ (8004a80 <TIM_OC4_SetConfig+0x98>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d109      	bne.n	8004a5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	019b      	lsls	r3, r3, #6
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	621a      	str	r2, [r3, #32]
}
 8004a76:	bf00      	nop
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr
 8004a80:	40012c00 	.word	0x40012c00

08004a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2201      	movs	r2, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1a      	ldr	r2, [r3, #32]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8004abc:	431a      	orrs	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr

08004acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e046      	b.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a16      	ldr	r2, [pc, #88]	@ (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d00e      	beq.n	8004b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b30:	d009      	beq.n	8004b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a12      	ldr	r2, [pc, #72]	@ (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d004      	beq.n	8004b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a10      	ldr	r2, [pc, #64]	@ (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d10c      	bne.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr
 8004b7c:	40012c00 	.word	0x40012c00
 8004b80:	40000400 	.word	0x40000400
 8004b84:	40000800 	.word	0x40000800

08004b88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e03d      	b.n	8004c20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr

08004c2a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e042      	b.n	8004cc2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d106      	bne.n	8004c56 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7fc fc23 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2224      	movs	r2, #36	@ 0x24
 8004c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c6c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fe94 	bl	800599c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695a      	ldr	r2, [r3, #20]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c92:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ca2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b08c      	sub	sp, #48	@ 0x30
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d146      	bne.n	8004d72 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e03f      	b.n	8004d74 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004d00:	88fb      	ldrh	r3, [r7, #6]
 8004d02:	461a      	mov	r2, r3
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 fbec 	bl	80054e4 <UART_Start_Receive_DMA>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d125      	bne.n	8004d66 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	330c      	adds	r3, #12
 8004d36:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	617b      	str	r3, [r7, #20]
   return(result);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f043 0310 	orr.w	r3, r3, #16
 8004d46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	330c      	adds	r3, #12
 8004d4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d50:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d52:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6a39      	ldr	r1, [r7, #32]
 8004d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e5      	bne.n	8004d30 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8004d64:	e002      	b.n	8004d6c <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8004d6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d70:	e000      	b.n	8004d74 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8004d72:	2302      	movs	r3, #2
  }
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3730      	adds	r7, #48	@ 0x30
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b0ba      	sub	sp, #232	@ 0xe8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004dba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10f      	bne.n	8004de2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d009      	beq.n	8004de2 <HAL_UART_IRQHandler+0x66>
 8004dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fd20 	bl	8005820 <UART_Receive_IT>
      return;
 8004de0:	e25b      	b.n	800529a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004de2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80de 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x22c>
 8004dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dfc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80d1 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00b      	beq.n	8004e2a <HAL_UART_IRQHandler+0xae>
 8004e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e22:	f043 0201 	orr.w	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00b      	beq.n	8004e4e <HAL_UART_IRQHandler+0xd2>
 8004e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d005      	beq.n	8004e4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e46:	f043 0202 	orr.w	r2, r3, #2
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00b      	beq.n	8004e72 <HAL_UART_IRQHandler+0xf6>
 8004e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6a:	f043 0204 	orr.w	r2, r3, #4
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d011      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x126>
 8004e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d105      	bne.n	8004e96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9a:	f043 0208 	orr.w	r2, r3, #8
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 81f2 	beq.w	8005290 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <HAL_UART_IRQHandler+0x14e>
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fcab 	bl	8005820 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	bf14      	ite	ne
 8004ed8:	2301      	movne	r3, #1
 8004eda:	2300      	moveq	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d103      	bne.n	8004ef6 <HAL_UART_IRQHandler+0x17a>
 8004eee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d04f      	beq.n	8004f96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fbb5 	bl	8005666 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d041      	beq.n	8004f8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3314      	adds	r3, #20
 8004f10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3314      	adds	r3, #20
 8004f32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1d9      	bne.n	8004f0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d013      	beq.n	8004f86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f62:	4a7e      	ldr	r2, [pc, #504]	@ (800515c <HAL_UART_IRQHandler+0x3e0>)
 8004f64:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fd f9c4 	bl	80022f8 <HAL_DMA_Abort_IT>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d016      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f80:	4610      	mov	r0, r2
 8004f82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	e00e      	b.n	8004fa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f9a5 	bl	80052d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8c:	e00a      	b.n	8004fa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f9a1 	bl	80052d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f94:	e006      	b.n	8004fa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f99d 	bl	80052d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004fa2:	e175      	b.n	8005290 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa4:	bf00      	nop
    return;
 8004fa6:	e173      	b.n	8005290 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	f040 814f 	bne.w	8005250 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8148 	beq.w	8005250 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8141 	beq.w	8005250 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	60bb      	str	r3, [r7, #8]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	60bb      	str	r3, [r7, #8]
 8004fe2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 80b6 	beq.w	8005160 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005000:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8145 	beq.w	8005294 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800500e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005012:	429a      	cmp	r2, r3
 8005014:	f080 813e 	bcs.w	8005294 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800501e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b20      	cmp	r3, #32
 8005028:	f000 8088 	beq.w	800513c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	330c      	adds	r3, #12
 8005032:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005036:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800503a:	e853 3f00 	ldrex	r3, [r3]
 800503e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005042:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005046:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800504a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	330c      	adds	r3, #12
 8005054:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005058:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800505c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005064:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005068:	e841 2300 	strex	r3, r2, [r1]
 800506c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1d9      	bne.n	800502c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3314      	adds	r3, #20
 800507e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005088:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800508a:	f023 0301 	bic.w	r3, r3, #1
 800508e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3314      	adds	r3, #20
 8005098:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800509c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e1      	bne.n	8005078 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3314      	adds	r3, #20
 80050ba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3314      	adds	r3, #20
 80050d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050d8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e3      	bne.n	80050b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800510a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800510c:	f023 0310 	bic.w	r3, r3, #16
 8005110:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800511e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005120:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005124:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800512c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e3      	bne.n	80050fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005136:	4618      	mov	r0, r3
 8005138:	f7fd f8a2 	bl	8002280 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800514a:	b29b      	uxth	r3, r3
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	b29b      	uxth	r3, r3
 8005150:	4619      	mov	r1, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fb fcfc 	bl	8000b50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005158:	e09c      	b.n	8005294 <HAL_UART_IRQHandler+0x518>
 800515a:	bf00      	nop
 800515c:	0800572b 	.word	0x0800572b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005168:	b29b      	uxth	r3, r3
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 808e 	beq.w	8005298 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800517c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 8089 	beq.w	8005298 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
 800518c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005198:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800519c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	330c      	adds	r3, #12
 80051a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80051ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e3      	bne.n	8005186 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3314      	adds	r3, #20
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	623b      	str	r3, [r7, #32]
   return(result);
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	f023 0301 	bic.w	r3, r3, #1
 80051d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3314      	adds	r3, #20
 80051de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80051e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e3      	bne.n	80051be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	60fb      	str	r3, [r7, #12]
   return(result);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0310 	bic.w	r3, r3, #16
 800521a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005228:	61fa      	str	r2, [r7, #28]
 800522a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	69b9      	ldr	r1, [r7, #24]
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	617b      	str	r3, [r7, #20]
   return(result);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e3      	bne.n	8005204 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005242:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7fb fc81 	bl	8000b50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800524e:	e023      	b.n	8005298 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005258:	2b00      	cmp	r3, #0
 800525a:	d009      	beq.n	8005270 <HAL_UART_IRQHandler+0x4f4>
 800525c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fa72 	bl	8005752 <UART_Transmit_IT>
    return;
 800526e:	e014      	b.n	800529a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00e      	beq.n	800529a <HAL_UART_IRQHandler+0x51e>
 800527c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fab1 	bl	80057f0 <UART_EndTransmit_IT>
    return;
 800528e:	e004      	b.n	800529a <HAL_UART_IRQHandler+0x51e>
    return;
 8005290:	bf00      	nop
 8005292:	e002      	b.n	800529a <HAL_UART_IRQHandler+0x51e>
      return;
 8005294:	bf00      	nop
 8005296:	e000      	b.n	800529a <HAL_UART_IRQHandler+0x51e>
      return;
 8005298:	bf00      	nop
  }
}
 800529a:	37e8      	adds	r7, #232	@ 0xe8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr

080052b2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr

080052d6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr

080052e8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b09c      	sub	sp, #112	@ 0x70
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d172      	bne.n	80053ea <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005306:	2200      	movs	r2, #0
 8005308:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800530a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	330c      	adds	r3, #12
 8005310:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800531a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800531c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005320:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005322:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	330c      	adds	r3, #12
 8005328:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800532a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800532c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005330:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e5      	bne.n	800530a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3314      	adds	r3, #20
 8005344:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800534e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005350:	f023 0301 	bic.w	r3, r3, #1
 8005354:	667b      	str	r3, [r7, #100]	@ 0x64
 8005356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3314      	adds	r3, #20
 800535c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800535e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005360:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005364:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800536c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e5      	bne.n	800533e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3314      	adds	r3, #20
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	623b      	str	r3, [r7, #32]
   return(result);
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005388:	663b      	str	r3, [r7, #96]	@ 0x60
 800538a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3314      	adds	r3, #20
 8005390:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005392:	633a      	str	r2, [r7, #48]	@ 0x30
 8005394:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e5      	bne.n	8005372 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053a8:	2220      	movs	r2, #32
 80053aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d119      	bne.n	80053ea <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	330c      	adds	r3, #12
 80053bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f023 0310 	bic.w	r3, r3, #16
 80053cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	330c      	adds	r3, #12
 80053d4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80053d6:	61fa      	str	r2, [r7, #28]
 80053d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	69b9      	ldr	r1, [r7, #24]
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	617b      	str	r3, [r7, #20]
   return(result);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e5      	bne.n	80053b6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ec:	2200      	movs	r2, #0
 80053ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d106      	bne.n	8005406 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053fc:	4619      	mov	r1, r3
 80053fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005400:	f7fb fba6 	bl	8000b50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005404:	e002      	b.n	800540c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005406:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005408:	f7ff ff53 	bl	80052b2 <HAL_UART_RxCpltCallback>
}
 800540c:	bf00      	nop
 800540e:	3770      	adds	r7, #112	@ 0x70
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542c:	2b01      	cmp	r3, #1
 800542e:	d108      	bne.n	8005442 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	b29b      	uxth	r3, r3
 8005438:	4619      	mov	r1, r3
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7fb fb88 	bl	8000b50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005440:	e002      	b.n	8005448 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7ff ff3e 	bl	80052c4 <HAL_UART_RxHalfCpltCallback>
}
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005460:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546c:	2b00      	cmp	r3, #0
 800546e:	bf14      	ite	ne
 8005470:	2301      	movne	r3, #1
 8005472:	2300      	moveq	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b21      	cmp	r3, #33	@ 0x21
 8005482:	d108      	bne.n	8005496 <UART_DMAError+0x46>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2200      	movs	r2, #0
 800548e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005490:	68b8      	ldr	r0, [r7, #8]
 8005492:	f000 f8c1 	bl	8005618 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bf14      	ite	ne
 80054a4:	2301      	movne	r3, #1
 80054a6:	2300      	moveq	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b22      	cmp	r3, #34	@ 0x22
 80054b6:	d108      	bne.n	80054ca <UART_DMAError+0x7a>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2200      	movs	r2, #0
 80054c2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80054c4:	68b8      	ldr	r0, [r7, #8]
 80054c6:	f000 f8ce 	bl	8005666 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ce:	f043 0210 	orr.w	r2, r3, #16
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054d6:	68b8      	ldr	r0, [r7, #8]
 80054d8:	f7ff fefd 	bl	80052d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054dc:	bf00      	nop
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b098      	sub	sp, #96	@ 0x60
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	4613      	mov	r3, r2
 80054f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	88fa      	ldrh	r2, [r7, #6]
 80054fc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2222      	movs	r2, #34	@ 0x22
 8005508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005510:	4a3e      	ldr	r2, [pc, #248]	@ (800560c <UART_Start_Receive_DMA+0x128>)
 8005512:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005518:	4a3d      	ldr	r2, [pc, #244]	@ (8005610 <UART_Start_Receive_DMA+0x12c>)
 800551a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005520:	4a3c      	ldr	r2, [pc, #240]	@ (8005614 <UART_Start_Receive_DMA+0x130>)
 8005522:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005528:	2200      	movs	r2, #0
 800552a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800552c:	f107 0308 	add.w	r3, r7, #8
 8005530:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3304      	adds	r3, #4
 800553c:	4619      	mov	r1, r3
 800553e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	f7fc fe3c 	bl	80021c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d019      	beq.n	800559a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	330c      	adds	r3, #12
 800556c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800557c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	330c      	adds	r3, #12
 8005584:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005586:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005588:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800558c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e5      	bne.n	8005566 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3314      	adds	r3, #20
 80055a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ac:	f043 0301 	orr.w	r3, r3, #1
 80055b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3314      	adds	r3, #20
 80055b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055ba:	63ba      	str	r2, [r7, #56]	@ 0x38
 80055bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80055c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e5      	bne.n	800559a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3314      	adds	r3, #20
 80055d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	617b      	str	r3, [r7, #20]
   return(result);
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3314      	adds	r3, #20
 80055ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80055ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80055f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6a39      	ldr	r1, [r7, #32]
 80055f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e5      	bne.n	80055ce <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3760      	adds	r7, #96	@ 0x60
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	080052e9 	.word	0x080052e9
 8005610:	08005415 	.word	0x08005415
 8005614:	08005451 	.word	0x08005451

08005618 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005618:	b480      	push	{r7}
 800561a:	b089      	sub	sp, #36	@ 0x24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	330c      	adds	r3, #12
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	61ba      	str	r2, [r7, #24]
 8005642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	6979      	ldr	r1, [r7, #20]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	613b      	str	r3, [r7, #16]
   return(result);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e5      	bne.n	8005620 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800565c:	bf00      	nop
 800565e:	3724      	adds	r7, #36	@ 0x24
 8005660:	46bd      	mov	sp, r7
 8005662:	bc80      	pop	{r7}
 8005664:	4770      	bx	lr

08005666 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005666:	b480      	push	{r7}
 8005668:	b095      	sub	sp, #84	@ 0x54
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	330c      	adds	r3, #12
 8005674:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800568e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005690:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005694:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800569c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e5      	bne.n	800566e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3314      	adds	r3, #20
 80056a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3314      	adds	r3, #20
 80056c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e5      	bne.n	80056a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d119      	bne.n	8005712 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	330c      	adds	r3, #12
 80056e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f023 0310 	bic.w	r3, r3, #16
 80056f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	330c      	adds	r3, #12
 80056fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056fe:	61ba      	str	r2, [r7, #24]
 8005700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6979      	ldr	r1, [r7, #20]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	613b      	str	r3, [r7, #16]
   return(result);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e5      	bne.n	80056de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005720:	bf00      	nop
 8005722:	3754      	adds	r7, #84	@ 0x54
 8005724:	46bd      	mov	sp, r7
 8005726:	bc80      	pop	{r7}
 8005728:	4770      	bx	lr

0800572a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005736:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f7ff fdc6 	bl	80052d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005752:	b480      	push	{r7}
 8005754:	b085      	sub	sp, #20
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b21      	cmp	r3, #33	@ 0x21
 8005764:	d13e      	bne.n	80057e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800576e:	d114      	bne.n	800579a <UART_Transmit_IT+0x48>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d110      	bne.n	800579a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800578c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	1c9a      	adds	r2, r3, #2
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	621a      	str	r2, [r3, #32]
 8005798:	e008      	b.n	80057ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	1c59      	adds	r1, r3, #1
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6211      	str	r1, [r2, #32]
 80057a4:	781a      	ldrb	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	4619      	mov	r1, r3
 80057ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10f      	bne.n	80057e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e000      	b.n	80057e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057e4:	2302      	movs	r3, #2
  }
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005806:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7ff fd45 	bl	80052a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08c      	sub	sp, #48	@ 0x30
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b22      	cmp	r3, #34	@ 0x22
 8005832:	f040 80ae 	bne.w	8005992 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800583e:	d117      	bne.n	8005870 <UART_Receive_IT+0x50>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d113      	bne.n	8005870 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005848:	2300      	movs	r3, #0
 800584a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	b29b      	uxth	r3, r3
 800585a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585e:	b29a      	uxth	r2, r3
 8005860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005862:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005868:	1c9a      	adds	r2, r3, #2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	629a      	str	r2, [r3, #40]	@ 0x28
 800586e:	e026      	b.n	80058be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005874:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005876:	2300      	movs	r3, #0
 8005878:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005882:	d007      	beq.n	8005894 <UART_Receive_IT+0x74>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <UART_Receive_IT+0x82>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d106      	bne.n	80058a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	b2da      	uxtb	r2, r3
 800589c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	e008      	b.n	80058b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	4619      	mov	r1, r3
 80058cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d15d      	bne.n	800598e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0220 	bic.w	r2, r2, #32
 80058e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695a      	ldr	r2, [r3, #20]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0201 	bic.w	r2, r2, #1
 8005900:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005914:	2b01      	cmp	r3, #1
 8005916:	d135      	bne.n	8005984 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	330c      	adds	r3, #12
 8005924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	613b      	str	r3, [r7, #16]
   return(result);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f023 0310 	bic.w	r3, r3, #16
 8005934:	627b      	str	r3, [r7, #36]	@ 0x24
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	330c      	adds	r3, #12
 800593c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800593e:	623a      	str	r2, [r7, #32]
 8005940:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	69f9      	ldr	r1, [r7, #28]
 8005944:	6a3a      	ldr	r2, [r7, #32]
 8005946:	e841 2300 	strex	r3, r2, [r1]
 800594a:	61bb      	str	r3, [r7, #24]
   return(result);
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1e5      	bne.n	800591e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	2b10      	cmp	r3, #16
 800595e:	d10a      	bne.n	8005976 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7fb f8e7 	bl	8000b50 <HAL_UARTEx_RxEventCallback>
 8005982:	e002      	b.n	800598a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff fc94 	bl	80052b2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	e002      	b.n	8005994 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	e000      	b.n	8005994 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005992:	2302      	movs	r3, #2
  }
}
 8005994:	4618      	mov	r0, r3
 8005996:	3730      	adds	r7, #48	@ 0x30
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80059d6:	f023 030c 	bic.w	r3, r3, #12
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6812      	ldr	r2, [r2, #0]
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	430b      	orrs	r3, r1
 80059e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a2c      	ldr	r2, [pc, #176]	@ (8005ab0 <UART_SetConfig+0x114>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d103      	bne.n	8005a0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a04:	f7fe fbac 	bl	8004160 <HAL_RCC_GetPCLK2Freq>
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	e002      	b.n	8005a12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a0c:	f7fe fb94 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8005a10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	009a      	lsls	r2, r3, #2
 8005a1c:	441a      	add	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	4a22      	ldr	r2, [pc, #136]	@ (8005ab4 <UART_SetConfig+0x118>)
 8005a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	0119      	lsls	r1, r3, #4
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009a      	lsls	r2, r3, #2
 8005a3c:	441a      	add	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a48:	4b1a      	ldr	r3, [pc, #104]	@ (8005ab4 <UART_SetConfig+0x118>)
 8005a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	2064      	movs	r0, #100	@ 0x64
 8005a52:	fb00 f303 	mul.w	r3, r0, r3
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	3332      	adds	r3, #50	@ 0x32
 8005a5c:	4a15      	ldr	r2, [pc, #84]	@ (8005ab4 <UART_SetConfig+0x118>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a68:	4419      	add	r1, r3
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	009a      	lsls	r2, r3, #2
 8005a74:	441a      	add	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a80:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab4 <UART_SetConfig+0x118>)
 8005a82:	fba3 0302 	umull	r0, r3, r3, r2
 8005a86:	095b      	lsrs	r3, r3, #5
 8005a88:	2064      	movs	r0, #100	@ 0x64
 8005a8a:	fb00 f303 	mul.w	r3, r0, r3
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	3332      	adds	r3, #50	@ 0x32
 8005a94:	4a07      	ldr	r2, [pc, #28]	@ (8005ab4 <UART_SetConfig+0x118>)
 8005a96:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	f003 020f 	and.w	r2, r3, #15
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	440a      	add	r2, r1
 8005aa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005aa8:	bf00      	nop
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	40013800 	.word	0x40013800
 8005ab4:	51eb851f 	.word	0x51eb851f

08005ab8 <Flash_Read>:
 *      Author: CHINH
 */
#include "EEPROMx.h"

uint16_t Flash_Read(uint32_t Addr)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

    return *(uint16_t *)(Addr);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	881b      	ldrh	r3, [r3, #0]

}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr

08005ace <Flash_ErasePage>:

HAL_StatusTypeDef Flash_ErasePage(uint8_t Page)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b088      	sub	sp, #32
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	assert_param(IS_FLASH_ADDRESS(Page_Address));

	HAL_FLASH_Unlock();
 8005ad8:	f7fc fe2a 	bl	8002730 <HAL_FLASH_Unlock>
    // Define the page and bank for the erase operation
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PageError = 0x0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.Banks = FLASH_BANK_1;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	613b      	str	r3, [r7, #16]
    EraseInitStruct.PageAddress =(FLASH_BASE + ((Page) * FLASH_PAGE_SIZE));
 8005ae8:	79fb      	ldrb	r3, [r7, #7]
 8005aea:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8005aee:	029b      	lsls	r3, r3, #10
 8005af0:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbPages = 1;
 8005af2:	2301      	movs	r3, #1
 8005af4:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8005af6:	f107 0208 	add.w	r2, r7, #8
 8005afa:	f107 030c 	add.w	r3, r7, #12
 8005afe:	4611      	mov	r1, r2
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fc fefd 	bl	8002900 <HAL_FLASHEx_Erase>
 8005b06:	4603      	mov	r3, r0
 8005b08:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 8005b0a:	f7fc fe37 	bl	800277c <HAL_FLASH_Lock>

  	return status;
 8005b0e:	7ffb      	ldrb	r3, [r7, #31]

}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3720      	adds	r7, #32
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <Flash_Write>:




HAL_StatusTypeDef Flash_Write(uint32_t TypeProgram,uint32_t WriteAddr, uint16_t data)
{
 8005b18:	b5b0      	push	{r4, r5, r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef state;

	assert_param((((WriteAddr) >= FLASH_START_ADDR) && ((WriteAddr) <= FLASH_END_ADDR)));

	HAL_FLASH_Unlock();
 8005b26:	f7fc fe03 	bl	8002730 <HAL_FLASH_Unlock>


	state = HAL_FLASH_Program(TypeProgram, WriteAddr,data);
 8005b2a:	88fb      	ldrh	r3, [r7, #6]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	461c      	mov	r4, r3
 8005b30:	4615      	mov	r5, r2
 8005b32:	4622      	mov	r2, r4
 8005b34:	462b      	mov	r3, r5
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7fc fd89 	bl	8002650 <HAL_FLASH_Program>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	75fb      	strb	r3, [r7, #23]

    HAL_FLASH_Lock();
 8005b42:	f7fc fe1b 	bl	800277c <HAL_FLASH_Lock>

    return state;
 8005b46:	7dfb      	ldrb	r3, [r7, #23]

}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bdb0      	pop	{r4, r5, r7, pc}

08005b50 <_ZN5Flags11TurnONFlagsEv>:
 */


#include "Flags.h"

void Flags::TurnONFlags(void) {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	#ifdef _Flag_500ms
		if ((HAL_GetTick() - StartTimer.t1s) >= 500) {
 8005b58:	f7fb fdf4 	bl	8001744 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	bf8c      	ite	hi
 8005b6c:	2301      	movhi	r3, #1
 8005b6e:	2300      	movls	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <_ZN5Flags11TurnONFlagsEv+0x36>
			Flag.t500ms = true;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	741a      	strb	r2, [r3, #16]
			StartTimer.t500ms =HAL_GetTick();
 8005b7c:	f7fb fde2 	bl	8001744 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	601a      	str	r2, [r3, #0]
		}
	#endif
    #ifdef _Flag_1s
        if ((HAL_GetTick() - StartTimer.t1s) >= 1000) {
 8005b86:	f7fb fddd 	bl	8001744 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005b96:	4293      	cmp	r3, r2
 8005b98:	bf8c      	ite	hi
 8005b9a:	2301      	movhi	r3, #1
 8005b9c:	2300      	movls	r3, #0
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <_ZN5Flags11TurnONFlagsEv+0x64>
            Flag.t1s = true;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	745a      	strb	r2, [r3, #17]
            StartTimer.t1s = HAL_GetTick();
 8005baa:	f7fb fdcb 	bl	8001744 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	605a      	str	r2, [r3, #4]
            Flag.t3s = true;
            StartTimer.t3s = HAL_GetTick();
        }
    #endif
    #ifdef _Flag_4s
        if ((HAL_GetTick() - StartTimer.t4s) >= 4000) {
 8005bb4:	f7fb fdc6 	bl	8001744 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	bf8c      	ite	hi
 8005bc8:	2301      	movhi	r3, #1
 8005bca:	2300      	movls	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <_ZN5Flags11TurnONFlagsEv+0x92>
            Flag.t4s = true;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	749a      	strb	r2, [r3, #18]
            StartTimer.t4s = HAL_GetTick();
 8005bd8:	f7fb fdb4 	bl	8001744 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	609a      	str	r2, [r3, #8]
        }
    #endif
	#ifdef _Flag_10s
		if ((HAL_GetTick() - StartTimer.t10s) >= 10000) {
 8005be2:	f7fb fdaf 	bl	8001744 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	bf8c      	ite	hi
 8005bf6:	2301      	movhi	r3, #1
 8005bf8:	2300      	movls	r3, #0
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <_ZN5Flags11TurnONFlagsEv+0xc0>
			Flag.t10s = true;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	74da      	strb	r2, [r3, #19]
			StartTimer.t10s = HAL_GetTick();
 8005c06:	f7fb fd9d 	bl	8001744 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	60da      	str	r2, [r3, #12]
		if ((HAL_GetTick() - StartTimer.t1m) >= 60000) {
			Flag.t1m = true;
			StartTimer.t1m = HAL_GetTick();
		}
	#endif
}
 8005c10:	bf00      	nop
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <_ZN5Flags12TurnOFFFlagsEv>:



void Flags::TurnOFFFlags(void) {
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
	#ifdef _Flag_500ms
		Flag.t500ms  =   false;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	741a      	strb	r2, [r3, #16]
	#endif
    #ifdef _Flag_1s
        Flag.t1s  =   false;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	745a      	strb	r2, [r3, #17]
    #endif
    #ifdef _Flag_3s
        Flag.t3s  =   false;
    #endif
    #ifdef _Flag_4s
        Flag.t4s  =   false;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	749a      	strb	r2, [r3, #18]
    #endif
	#ifdef _Flag_10s
		Flag.t10s  =   false;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	74da      	strb	r2, [r3, #19]
	#endif
	#ifdef _Flag_1m
		Flag.t1m  =   false;
	#endif

}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr
	...

08005c44 <GPIOx_Init>:
#include "Gpiox.h"

void GPIOx_Init(GPIO_TypeDef *GPIOx,uint32_t Pin,uint32_t Mode,uint32_t Pull,uint32_t Speed){
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	603b      	str	r3, [r7, #0]
		//clock enable
		if(GPIOx==GPIOA) RCC->APB2ENR |=(1<<2);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4a39      	ldr	r2, [pc, #228]	@ (8005d3c <GPIOx_Init+0xf8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d106      	bne.n	8005c68 <GPIOx_Init+0x24>
 8005c5a:	4b39      	ldr	r3, [pc, #228]	@ (8005d40 <GPIOx_Init+0xfc>)
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	4a38      	ldr	r2, [pc, #224]	@ (8005d40 <GPIOx_Init+0xfc>)
 8005c60:	f043 0304 	orr.w	r3, r3, #4
 8005c64:	6193      	str	r3, [r2, #24]
 8005c66:	e014      	b.n	8005c92 <GPIOx_Init+0x4e>
		else if(GPIOx==GPIOB) RCC->APB2ENR |=(1<<3);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4a36      	ldr	r2, [pc, #216]	@ (8005d44 <GPIOx_Init+0x100>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d106      	bne.n	8005c7e <GPIOx_Init+0x3a>
 8005c70:	4b33      	ldr	r3, [pc, #204]	@ (8005d40 <GPIOx_Init+0xfc>)
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	4a32      	ldr	r2, [pc, #200]	@ (8005d40 <GPIOx_Init+0xfc>)
 8005c76:	f043 0308 	orr.w	r3, r3, #8
 8005c7a:	6193      	str	r3, [r2, #24]
 8005c7c:	e009      	b.n	8005c92 <GPIOx_Init+0x4e>
		else if(GPIOx==GPIOC) RCC->APB2ENR |=(1<<4);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4a31      	ldr	r2, [pc, #196]	@ (8005d48 <GPIOx_Init+0x104>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d105      	bne.n	8005c92 <GPIOx_Init+0x4e>
 8005c86:	4b2e      	ldr	r3, [pc, #184]	@ (8005d40 <GPIOx_Init+0xfc>)
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	4a2d      	ldr	r2, [pc, #180]	@ (8005d40 <GPIOx_Init+0xfc>)
 8005c8c:	f043 0310 	orr.w	r3, r3, #16
 8005c90:	6193      	str	r3, [r2, #24]


		if(Pin<8){
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b07      	cmp	r3, #7
 8005c96:	d818      	bhi.n	8005cca <GPIOx_Init+0x86>
			GPIOx->CRL&=~(0xF<<(Pin*4));
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	0092      	lsls	r2, r2, #2
 8005ca0:	210f      	movs	r1, #15
 8005ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ca6:	43d2      	mvns	r2, r2
 8005ca8:	401a      	ands	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	601a      	str	r2, [r3, #0]
			GPIOx->CRL|=((Mode<<2)+Speed)<<(Pin*4);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	0099      	lsls	r1, r3, #2
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	4419      	add	r1, r3
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	e019      	b.n	8005cfe <GPIOx_Init+0xba>
		}
		else{
			GPIOx->CRH&=~(0xF<<((Pin-8)*4));
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	3a08      	subs	r2, #8
 8005cd2:	0092      	lsls	r2, r2, #2
 8005cd4:	210f      	movs	r1, #15
 8005cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8005cda:	43d2      	mvns	r2, r2
 8005cdc:	401a      	ands	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	605a      	str	r2, [r3, #4]
			GPIOx->CRH|=((Mode<<2)+Speed)<<((Pin-8)*4);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	0099      	lsls	r1, r3, #2
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	4419      	add	r1, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	3b08      	subs	r3, #8
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	605a      	str	r2, [r3, #4]
		}
		if(Pull==PU) GPIOx->ODR |=(1<<Pin);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d109      	bne.n	8005d18 <GPIOx_Init+0xd4>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	2101      	movs	r1, #1
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d10:	431a      	orrs	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	60da      	str	r2, [r3, #12]
		else if (Pull==PD) GPIOx->ODR &=~(1<<Pin);
}
 8005d16:	e00c      	b.n	8005d32 <GPIOx_Init+0xee>
		else if (Pull==PD) GPIOx->ODR &=~(1<<Pin);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d109      	bne.n	8005d32 <GPIOx_Init+0xee>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	2101      	movs	r1, #1
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	fa01 f202 	lsl.w	r2, r1, r2
 8005d2a:	43d2      	mvns	r2, r2
 8005d2c:	401a      	ands	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	60da      	str	r2, [r3, #12]
}
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr
 8005d3c:	40010800 	.word	0x40010800
 8005d40:	40021000 	.word	0x40021000
 8005d44:	40010c00 	.word	0x40010c00
 8005d48:	40011000 	.word	0x40011000

08005d4c <_ZN12Modbus_SlaveC1Ev>:
#define ILLEGAL_DATA_VALUE     0x03

#define ADD_Flash_Slave_ID 0x0801FCF0


Modbus_Slave::Modbus_Slave(){
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &=~(1<<11);
 8005d54:	4b15      	ldr	r3, [pc, #84]	@ (8005dac <_ZN12Modbus_SlaveC1Ev+0x60>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	4a14      	ldr	r2, [pc, #80]	@ (8005dac <_ZN12Modbus_SlaveC1Ev+0x60>)
 8005d5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d5e:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR &=~(1<<12);
 8005d60:	4b12      	ldr	r3, [pc, #72]	@ (8005dac <_ZN12Modbus_SlaveC1Ev+0x60>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	4a11      	ldr	r2, [pc, #68]	@ (8005dac <_ZN12Modbus_SlaveC1Ev+0x60>)
 8005d66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d6a:	60d3      	str	r3, [r2, #12]
	this->Slave_id_to_Eeprom=Flash_Read(ADD_Flash_Slave_ID);
 8005d6c:	4810      	ldr	r0, [pc, #64]	@ (8005db0 <_ZN12Modbus_SlaveC1Ev+0x64>)
 8005d6e:	f7ff fea3 	bl	8005ab8 <Flash_Read>
 8005d72:	4603      	mov	r3, r0
 8005d74:	461a      	mov	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	801a      	strh	r2, [r3, #0]
	if ((this->Slave_id_to_Eeprom<255)&&(this->Slave_id_to_Eeprom >0)) this->Slave_id=this->Slave_id_to_Eeprom;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	2bfe      	cmp	r3, #254	@ 0xfe
 8005d80:	d809      	bhi.n	8005d96 <_ZN12Modbus_SlaveC1Ev+0x4a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <_ZN12Modbus_SlaveC1Ev+0x4a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	709a      	strb	r2, [r3, #2]
 8005d94:	e005      	b.n	8005da2 <_ZN12Modbus_SlaveC1Ev+0x56>
	else{
		this->Slave_id=0x01;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	709a      	strb	r2, [r3, #2]
		this->Slave_id_to_Eeprom=0x01;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	801a      	strh	r2, [r3, #0]
	}

}
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	40010800 	.word	0x40010800
 8005db0:	0801fcf0 	.word	0x0801fcf0

08005db4 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh>:
void Modbus_Slave::USARTx_PutS_Size(USART_TypeDef *USARTx, uint8_t *data,uint8_t size){
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	70fb      	strb	r3, [r7, #3]
	uint32_t timeout=0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]
	for (uint8_t i=0;i<size;++i){
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	74fb      	strb	r3, [r7, #19]
 8005dca:	e01e      	b.n	8005e0a <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x56>
		while(!(USARTx->SR & (1<<7))){++timeout; if (timeout==0xFFFFFFF) return;};
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d02f      	beq.n	8005e3c <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x88>
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	bf0c      	ite	eq
 8005de8:	2301      	moveq	r3, #1
 8005dea:	2300      	movne	r3, #0
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1ec      	bne.n	8005dcc <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x18>
		USARTx->DR =data[i];
 8005df2:	7cfb      	ldrb	r3, [r7, #19]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	4413      	add	r3, r2
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	605a      	str	r2, [r3, #4]
		timeout=0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]
	for (uint8_t i=0;i<size;++i){
 8005e04:	7cfb      	ldrb	r3, [r7, #19]
 8005e06:	3301      	adds	r3, #1
 8005e08:	74fb      	strb	r3, [r7, #19]
 8005e0a:	7cfa      	ldrb	r2, [r7, #19]
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d3e4      	bcc.n	8005ddc <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x28>
	}
	while(!(USARTx->SR & (1<<6))) {++timeout; if (timeout==0xFFFF) return;}
 8005e12:	e007      	b.n	8005e24 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x70>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	3301      	adds	r3, #1
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00d      	beq.n	8005e40 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x8c>
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	bf0c      	ite	eq
 8005e30:	2301      	moveq	r3, #1
 8005e32:	2300      	movne	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1ec      	bne.n	8005e14 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x60>
 8005e3a:	e002      	b.n	8005e42 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x8e>
		while(!(USARTx->SR & (1<<7))){++timeout; if (timeout==0xFFFFFFF) return;};
 8005e3c:	bf00      	nop
 8005e3e:	e000      	b.n	8005e42 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh+0x8e>
	while(!(USARTx->SR & (1<<6))) {++timeout; if (timeout==0xFFFF) return;}
 8005e40:	bf00      	nop
}
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr

08005e4a <_Z5CRC16Pht>:


uint16_t CRC16 (uint8_t *nData, uint16_t wLength)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b085      	sub	sp, #20
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	460b      	mov	r3, r1
 8005e54:	807b      	strh	r3, [r7, #2]
    uint16_t temp, flag;
    temp = 0xFFFF;
 8005e56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e5a:	81fb      	strh	r3, [r7, #14]
    for (uint16_t  i = 0; i < wLength; i++)
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	81bb      	strh	r3, [r7, #12]
 8005e60:	e024      	b.n	8005eac <_Z5CRC16Pht+0x62>
    {
        temp = temp ^ nData[i];
 8005e62:	89bb      	ldrh	r3, [r7, #12]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	4413      	add	r3, r2
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	89fb      	ldrh	r3, [r7, #14]
 8005e6e:	4053      	eors	r3, r2
 8005e70:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 1; j <= 8; j++)
 8005e72:	2301      	movs	r3, #1
 8005e74:	72fb      	strb	r3, [r7, #11]
 8005e76:	e013      	b.n	8005ea0 <_Z5CRC16Pht+0x56>
        {
            flag = temp & 0x0001;
 8005e78:	89fb      	ldrh	r3, [r7, #14]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	813b      	strh	r3, [r7, #8]
            temp >>=1;
 8005e80:	89fb      	ldrh	r3, [r7, #14]
 8005e82:	085b      	lsrs	r3, r3, #1
 8005e84:	81fb      	strh	r3, [r7, #14]
            if (flag)
 8005e86:	893b      	ldrh	r3, [r7, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d006      	beq.n	8005e9a <_Z5CRC16Pht+0x50>
                temp ^= 0xA001;
 8005e8c:	89fb      	ldrh	r3, [r7, #14]
 8005e8e:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8005e92:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8005e96:	43db      	mvns	r3, r3
 8005e98:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 1; j <= 8; j++)
 8005e9a:	7afb      	ldrb	r3, [r7, #11]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	72fb      	strb	r3, [r7, #11]
 8005ea0:	7afb      	ldrb	r3, [r7, #11]
 8005ea2:	2b08      	cmp	r3, #8
 8005ea4:	d9e8      	bls.n	8005e78 <_Z5CRC16Pht+0x2e>
    for (uint16_t  i = 0; i < wLength; i++)
 8005ea6:	89bb      	ldrh	r3, [r7, #12]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	81bb      	strh	r3, [r7, #12]
 8005eac:	89ba      	ldrh	r2, [r7, #12]
 8005eae:	887b      	ldrh	r3, [r7, #2]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d3d6      	bcc.n	8005e62 <_Z5CRC16Pht+0x18>
        }
    }
    temp &= 0xFFFF;
    return temp;
 8005eb4:	89fb      	ldrh	r3, [r7, #14]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr

08005ec0 <_ZN12Modbus_Slave8sendDataEPhi>:

void Modbus_Slave::sendData(uint8_t *data, int size)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
	// we will calculate the CRC in this function itself
	uint16_t crc = CRC16(data, size);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	68b8      	ldr	r0, [r7, #8]
 8005ed4:	f7ff ffb9 	bl	8005e4a <_Z5CRC16Pht>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	82fb      	strh	r3, [r7, #22]
	data[size] = crc&0xFF;   // CRC LOW
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	8afa      	ldrh	r2, [r7, #22]
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8005ee8:	8afb      	ldrh	r3, [r7, #22]
 8005eea:	0a1b      	lsrs	r3, r3, #8
 8005eec:	b299      	uxth	r1, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	b2ca      	uxtb	r2, r1
 8005ef8:	701a      	strb	r2, [r3, #0]
	GPIOA->ODR |=(1<<11);
 8005efa:	4b12      	ldr	r3, [pc, #72]	@ (8005f44 <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	4a11      	ldr	r2, [pc, #68]	@ (8005f44 <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8005f00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005f04:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR |=(1<<12);
 8005f06:	4b0f      	ldr	r3, [pc, #60]	@ (8005f44 <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8005f44 <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8005f0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005f10:	60d3      	str	r3, [r2, #12]
	USARTx_PutS_Size(USART1,data,size+2);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	3302      	adds	r3, #2
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	490a      	ldr	r1, [pc, #40]	@ (8005f48 <_ZN12Modbus_Slave8sendDataEPhi+0x88>)
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f7ff ff48 	bl	8005db4 <_ZN12Modbus_Slave16USARTx_PutS_SizeEP13USART_TypeDefPhh>
	GPIOA->ODR &=~(1<<11);
 8005f24:	4b07      	ldr	r3, [pc, #28]	@ (8005f44 <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	4a06      	ldr	r2, [pc, #24]	@ (8005f44 <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8005f2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f2e:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR &=~(1<<12);
 8005f30:	4b04      	ldr	r3, [pc, #16]	@ (8005f44 <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	4a03      	ldr	r2, [pc, #12]	@ (8005f44 <_ZN12Modbus_Slave8sendDataEPhi+0x84>)
 8005f36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f3a:	60d3      	str	r3, [r2, #12]
}
 8005f3c:	bf00      	nop
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40010800 	.word	0x40010800
 8005f48:	40013800 	.word	0x40013800

08005f4c <_ZN12Modbus_Slave15modbusExceptionEh>:

void Modbus_Slave::modbusException (uint8_t exceptioncode)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70fb      	strb	r3, [r7, #3]
	//| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	//| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	this->TxData[0] = this->RxData[0];       // slave ID
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	78da      	ldrb	r2, [r3, #3]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	74da      	strb	r2, [r3, #19]
	this->TxData[1] = this->RxData[1]|0x80;  // adding 1 to the MSB of the function code
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	791b      	ldrb	r3, [r3, #4]
 8005f64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	751a      	strb	r2, [r3, #20]
	this->TxData[2] = exceptioncode;   // Load the Exception code
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	78fa      	ldrb	r2, [r7, #3]
 8005f72:	755a      	strb	r2, [r3, #21]
	sendData(this->TxData, 3);         // send Data... CRC will be calculated in the function
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3313      	adds	r3, #19
 8005f78:	2203      	movs	r2, #3
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff ff9f 	bl	8005ec0 <_ZN12Modbus_Slave8sendDataEPhi>
}
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef>:


//10 not function expected
uint8_t Modbus_Slave::Check_Buffer(USART_TypeDef *USARTx){
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
	uint8_t status=0;
 8005f94:	2300      	movs	r3, #0
 8005f96:	73fb      	strb	r3, [r7, #15]
		if (this->RxData[0] == this->Slave_id){
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	78da      	ldrb	r2, [r3, #3]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	789b      	ldrb	r3, [r3, #2]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d117      	bne.n	8005fd4 <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x4a>
			switch (this->RxData[1]){
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	791b      	ldrb	r3, [r3, #4]
 8005fa8:	2b06      	cmp	r3, #6
 8005faa:	d00e      	beq.n	8005fca <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x40>
 8005fac:	2b06      	cmp	r3, #6
 8005fae:	dc10      	bgt.n	8005fd2 <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x48>
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d002      	beq.n	8005fba <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x30>
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d004      	beq.n	8005fc2 <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x38>
				break;
			case 0x06:
				WriteIDRegs_FC6();
				break;
			default:
				break;
 8005fb8:	e00b      	b.n	8005fd2 <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x48>
				readHoldingRegs();
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f896 	bl	80060ec <_ZN12Modbus_Slave15readHoldingRegsEv>
				break;
 8005fc0:	e008      	b.n	8005fd4 <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x4a>
				readInputRegs_FC4();
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f80c 	bl	8005fe0 <_ZN12Modbus_Slave17readInputRegs_FC4Ev>
				break;
 8005fc8:	e004      	b.n	8005fd4 <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x4a>
				WriteIDRegs_FC6();
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f898 	bl	8006100 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev>
				break;
 8005fd0:	e000      	b.n	8005fd4 <_ZN12Modbus_Slave12Check_BufferEP13USART_TypeDef+0x4a>
				break;
 8005fd2:	bf00      	nop
			}
	}
	return status;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <_ZN12Modbus_Slave17readInputRegs_FC4Ev>:

uint8_t Modbus_Slave::readInputRegs_FC4 (void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
	uint16_t startAddr = ((this->RxData[2]<<8)|this->RxData[3]);  // start Register Address
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	795b      	ldrb	r3, [r3, #5]
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	b21a      	sxth	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	799b      	ldrb	r3, [r3, #6]
 8005ff4:	b21b      	sxth	r3, r3
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	b21b      	sxth	r3, r3
 8005ffa:	82fb      	strh	r3, [r7, #22]

	uint16_t numRegs = ((this->RxData[4]<<8)|this->RxData[5]);   // number to registers master has requested
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	79db      	ldrb	r3, [r3, #7]
 8006000:	021b      	lsls	r3, r3, #8
 8006002:	b21a      	sxth	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	7a1b      	ldrb	r3, [r3, #8]
 8006008:	b21b      	sxth	r3, r3
 800600a:	4313      	orrs	r3, r2
 800600c:	b21b      	sxth	r3, r3
 800600e:	817b      	strh	r3, [r7, #10]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8006010:	897b      	ldrh	r3, [r7, #10]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x3c>
 8006016:	897b      	ldrh	r3, [r7, #10]
 8006018:	2b7d      	cmp	r3, #125	@ 0x7d
 800601a:	d905      	bls.n	8006028 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x48>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 800601c:	2103      	movs	r1, #3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7ff ff94 	bl	8005f4c <_ZN12Modbus_Slave15modbusExceptionEh>
		return 0;
 8006024:	2300      	movs	r3, #0
 8006026:	e05b      	b.n	80060e0 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x100>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8006028:	8afa      	ldrh	r2, [r7, #22]
 800602a:	897b      	ldrh	r3, [r7, #10]
 800602c:	4413      	add	r3, r2
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	813b      	strh	r3, [r7, #8]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8006034:	893b      	ldrh	r3, [r7, #8]
 8006036:	2b31      	cmp	r3, #49	@ 0x31
 8006038:	d905      	bls.n	8006046 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x66>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800603a:	2102      	movs	r1, #2
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7ff ff85 	bl	8005f4c <_ZN12Modbus_Slave15modbusExceptionEh>
		return 0;
 8006042:	2300      	movs	r3, #0
 8006044:	e04c      	b.n	80060e0 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x100>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	this->TxData[0] = this->Slave_id;  // slave ID
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	789a      	ldrb	r2, [r3, #2]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	74da      	strb	r2, [r3, #19]
	this->TxData[1] = this->RxData[1];  // function code
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	791a      	ldrb	r2, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	751a      	strb	r2, [r3, #20]
	this->TxData[2] = numRegs*2;  // Byte count
 8006056:	897b      	ldrh	r3, [r7, #10]
 8006058:	b2db      	uxtb	r3, r3
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	b2da      	uxtb	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	755a      	strb	r2, [r3, #21]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8006062:	2303      	movs	r3, #3
 8006064:	613b      	str	r3, [r7, #16]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	e01f      	b.n	80060ac <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0xcc>
	{
		this->TxData[indx++] = (Input_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 800606c:	8afb      	ldrh	r3, [r7, #22]
 800606e:	4a1e      	ldr	r2, [pc, #120]	@ (80060e8 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x108>)
 8006070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006074:	0a1b      	lsrs	r3, r3, #8
 8006076:	b299      	uxth	r1, r3
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	613a      	str	r2, [r7, #16]
 800607e:	b2c9      	uxtb	r1, r1
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	4413      	add	r3, r2
 8006084:	460a      	mov	r2, r1
 8006086:	74da      	strb	r2, [r3, #19]
		this->TxData[indx++] = (Input_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8006088:	8afb      	ldrh	r3, [r7, #22]
 800608a:	4a17      	ldr	r2, [pc, #92]	@ (80060e8 <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x108>)
 800608c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	613a      	str	r2, [r7, #16]
 8006096:	b2c9      	uxtb	r1, r1
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	4413      	add	r3, r2
 800609c:	460a      	mov	r2, r1
 800609e:	74da      	strb	r2, [r3, #19]
		startAddr++;  // increment the register address
 80060a0:	8afb      	ldrh	r3, [r7, #22]
 80060a2:	3301      	adds	r3, #1
 80060a4:	82fb      	strh	r3, [r7, #22]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3301      	adds	r3, #1
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	897b      	ldrh	r3, [r7, #10]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	dbdb      	blt.n	800606c <_ZN12Modbus_Slave17readInputRegs_FC4Ev+0x8c>
	}

	sendData(this->TxData, indx);  // send data... CRC will be calculated in the function itself
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3313      	adds	r3, #19
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff feff 	bl	8005ec0 <_ZN12Modbus_Slave8sendDataEPhi>
	memset(RxData, 0, sizeof(Buffer_Size_Rx_Modbus));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3303      	adds	r3, #3
 80060c6:	2204      	movs	r2, #4
 80060c8:	2100      	movs	r1, #0
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fcf8 	bl	8006ac0 <memset>
	memset(TxData, 0, sizeof(Buffer_Size_Tx_Modbus));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3313      	adds	r3, #19
 80060d4:	2204      	movs	r2, #4
 80060d6:	2100      	movs	r1, #0
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 fcf1 	bl	8006ac0 <memset>
	return 1;   // success
 80060de:	2301      	movs	r3, #1
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	08006b5c 	.word	0x08006b5c

080060ec <_ZN12Modbus_Slave15readHoldingRegsEv>:

uint8_t Modbus_Slave::readHoldingRegs(){
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	return 1;
 80060f4:	2301      	movs	r3, #1
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr

08006100 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev>:


// address = 0x01
uint8_t Modbus_Slave::WriteIDRegs_FC6(){
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
	uint16_t address=((this->RxData[2]<<8)|this->RxData[3]);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	795b      	ldrb	r3, [r3, #5]
 800610c:	021b      	lsls	r3, r3, #8
 800610e:	b21a      	sxth	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	799b      	ldrb	r3, [r3, #6]
 8006114:	b21b      	sxth	r3, r3
 8006116:	4313      	orrs	r3, r2
 8006118:	b21b      	sxth	r3, r3
 800611a:	81bb      	strh	r3, [r7, #12]
	uint16_t data=((this->RxData[4]<<8)|this->RxData[5]);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	79db      	ldrb	r3, [r3, #7]
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	b21a      	sxth	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	7a1b      	ldrb	r3, [r3, #8]
 8006128:	b21b      	sxth	r3, r3
 800612a:	4313      	orrs	r3, r2
 800612c:	b21b      	sxth	r3, r3
 800612e:	817b      	strh	r3, [r7, #10]
	if (address!=0x01)
 8006130:	89bb      	ldrh	r3, [r7, #12]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d005      	beq.n	8006142 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0x42>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);
 8006136:	2102      	movs	r1, #2
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff ff07 	bl	8005f4c <_ZN12Modbus_Slave15modbusExceptionEh>
		return 0;
 800613e:	2300      	movs	r3, #0
 8006140:	e036      	b.n	80061b0 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0xb0>
	}
	if ((data ==0) || (data >247)){
 8006142:	897b      	ldrh	r3, [r7, #10]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0x4e>
 8006148:	897b      	ldrh	r3, [r7, #10]
 800614a:	2bf7      	cmp	r3, #247	@ 0xf7
 800614c:	d905      	bls.n	800615a <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0x5a>
		modbusException(ILLEGAL_DATA_VALUE);
 800614e:	2103      	movs	r1, #3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff fefb 	bl	8005f4c <_ZN12Modbus_Slave15modbusExceptionEh>
		return 0;
 8006156:	2300      	movs	r3, #0
 8006158:	e02a      	b.n	80061b0 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0xb0>
	}
	this->Slave_id_to_Eeprom=data;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	897a      	ldrh	r2, [r7, #10]
 800615e:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<6;++i){
 8006160:	2300      	movs	r3, #0
 8006162:	73fb      	strb	r3, [r7, #15]
 8006164:	e00b      	b.n	800617e <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0x7e>
		this->TxData[i]=this->RxData[i];
 8006166:	7bfa      	ldrb	r2, [r7, #15]
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	440a      	add	r2, r1
 800616e:	78d1      	ldrb	r1, [r2, #3]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	4413      	add	r3, r2
 8006174:	460a      	mov	r2, r1
 8006176:	74da      	strb	r2, [r3, #19]
	for(uint8_t i=0;i<6;++i){
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	3301      	adds	r3, #1
 800617c:	73fb      	strb	r3, [r7, #15]
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	2b05      	cmp	r3, #5
 8006182:	d9f0      	bls.n	8006166 <_ZN12Modbus_Slave15WriteIDRegs_FC6Ev+0x66>
	}
	sendData(this->TxData,6);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	3313      	adds	r3, #19
 8006188:	2206      	movs	r2, #6
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff fe97 	bl	8005ec0 <_ZN12Modbus_Slave8sendDataEPhi>
	memset(RxData, 0, sizeof(Buffer_Size_Rx_Modbus));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	3303      	adds	r3, #3
 8006196:	2204      	movs	r2, #4
 8006198:	2100      	movs	r1, #0
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fc90 	bl	8006ac0 <memset>
	memset(TxData, 0, sizeof(Buffer_Size_Tx_Modbus));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3313      	adds	r3, #19
 80061a4:	2204      	movs	r2, #4
 80061a6:	2100      	movs	r1, #0
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fc89 	bl	8006ac0 <memset>
	return 1;
 80061ae:	2301      	movs	r3, #1
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <Get_Tempe_Press>:

#define SM9541_PRESSURE_MAX     1961.28  /*980.7*/
#define SM9541_PRESSURE_MIN     -1961.28


uint8_t Get_Tempe_Press(float *t9541, float *p9541){
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af02      	add	r7, sp, #8
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
	uint8_t buf95_read[4]={0};
 80061c2:	2300      	movs	r3, #0
 80061c4:	60bb      	str	r3, [r7, #8]
	uint8_t status =0;
 80061c6:	2300      	movs	r3, #0
 80061c8:	75fb      	strb	r3, [r7, #23]
	uint16_t pressure_adc,temperature_adc;
	float dat;
	if (HAL_I2C_Master_Receive(&hi2c1, 0x28<<1, buf95_read, 4, 200)==HAL_OK){
 80061ca:	f107 0208 	add.w	r2, r7, #8
 80061ce:	23c8      	movs	r3, #200	@ 0xc8
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	2304      	movs	r3, #4
 80061d4:	2150      	movs	r1, #80	@ 0x50
 80061d6:	4834      	ldr	r0, [pc, #208]	@ (80062a8 <Get_Tempe_Press+0xf0>)
 80061d8:	f7fc ff32 	bl	8003040 <HAL_I2C_Master_Receive>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d157      	bne.n	8006292 <Get_Tempe_Press+0xda>
				 status=buf95_read[0]>>6;
 80061e2:	7a3b      	ldrb	r3, [r7, #8]
 80061e4:	099b      	lsrs	r3, r3, #6
 80061e6:	75fb      	strb	r3, [r7, #23]
				 if (status==0){
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d151      	bne.n	8006292 <Get_Tempe_Press+0xda>
					 pressure_adc=(((uint16_t)buf95_read[0]&0x3f)<<8) | buf95_read[1];
 80061ee:	7a3b      	ldrb	r3, [r7, #8]
 80061f0:	021b      	lsls	r3, r3, #8
 80061f2:	b21b      	sxth	r3, r3
 80061f4:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80061f8:	b21a      	sxth	r2, r3
 80061fa:	7a7b      	ldrb	r3, [r7, #9]
 80061fc:	b21b      	sxth	r3, r3
 80061fe:	4313      	orrs	r3, r2
 8006200:	b21b      	sxth	r3, r3
 8006202:	82bb      	strh	r3, [r7, #20]
					 temperature_adc=((uint16_t)buf95_read[2]<<3) | (buf95_read[3]>>5);
 8006204:	7abb      	ldrb	r3, [r7, #10]
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	b21a      	sxth	r2, r3
 800620a:	7afb      	ldrb	r3, [r7, #11]
 800620c:	095b      	lsrs	r3, r3, #5
 800620e:	b2db      	uxtb	r3, r3
 8006210:	b21b      	sxth	r3, r3
 8006212:	4313      	orrs	r3, r2
 8006214:	b21b      	sxth	r3, r3
 8006216:	827b      	strh	r3, [r7, #18]
					 dat=SM9541_PRESSURE_MAX-SM9541_PRESSURE_MIN;
 8006218:	4b24      	ldr	r3, [pc, #144]	@ (80062ac <Get_Tempe_Press+0xf4>)
 800621a:	60fb      	str	r3, [r7, #12]
					 *p9541 = (pressure_adc - SM9541_MINCOUNT)*dat / (SM9541_MAXCOUNT - SM9541_MINCOUNT) +SM9541_PRESSURE_MIN;
 800621c:	8abb      	ldrh	r3, [r7, #20]
 800621e:	f2a3 6366 	subw	r3, r3, #1638	@ 0x666
 8006222:	4618      	mov	r0, r3
 8006224:	f7fa fa5a 	bl	80006dc <__aeabi_i2f>
 8006228:	4603      	mov	r3, r0
 800622a:	68f9      	ldr	r1, [r7, #12]
 800622c:	4618      	mov	r0, r3
 800622e:	f7fa faa9 	bl	8000784 <__aeabi_fmul>
 8006232:	4603      	mov	r3, r0
 8006234:	491e      	ldr	r1, [pc, #120]	@ (80062b0 <Get_Tempe_Press+0xf8>)
 8006236:	4618      	mov	r0, r3
 8006238:	f7fa fb58 	bl	80008ec <__aeabi_fdiv>
 800623c:	4603      	mov	r3, r0
 800623e:	4618      	mov	r0, r3
 8006240:	f7fa f8ea 	bl	8000418 <__aeabi_f2d>
 8006244:	a316      	add	r3, pc, #88	@ (adr r3, 80062a0 <Get_Tempe_Press+0xe8>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f7f9 ff85 	bl	8000158 <__aeabi_dsub>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4610      	mov	r0, r2
 8006254:	4619      	mov	r1, r3
 8006256:	f7fa f937 	bl	80004c8 <__aeabi_d2f>
 800625a:	4602      	mov	r2, r0
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	601a      	str	r2, [r3, #0]
					 *t9541 = (float)temperature_adc*200/2047 - 50;
 8006260:	8a7b      	ldrh	r3, [r7, #18]
 8006262:	4618      	mov	r0, r3
 8006264:	f7fa fa36 	bl	80006d4 <__aeabi_ui2f>
 8006268:	4603      	mov	r3, r0
 800626a:	4912      	ldr	r1, [pc, #72]	@ (80062b4 <Get_Tempe_Press+0xfc>)
 800626c:	4618      	mov	r0, r3
 800626e:	f7fa fa89 	bl	8000784 <__aeabi_fmul>
 8006272:	4603      	mov	r3, r0
 8006274:	4910      	ldr	r1, [pc, #64]	@ (80062b8 <Get_Tempe_Press+0x100>)
 8006276:	4618      	mov	r0, r3
 8006278:	f7fa fb38 	bl	80008ec <__aeabi_fdiv>
 800627c:	4603      	mov	r3, r0
 800627e:	490f      	ldr	r1, [pc, #60]	@ (80062bc <Get_Tempe_Press+0x104>)
 8006280:	4618      	mov	r0, r3
 8006282:	f7fa f975 	bl	8000570 <__aeabi_fsub>
 8006286:	4603      	mov	r3, r0
 8006288:	461a      	mov	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	601a      	str	r2, [r3, #0]
					 return 1;
 800628e:	2301      	movs	r3, #1
 8006290:	e000      	b.n	8006294 <Get_Tempe_Press+0xdc>
				 }
			}
	return 0;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	f3af 8000 	nop.w
 80062a0:	b851eb85 	.word	0xb851eb85
 80062a4:	409ea51e 	.word	0x409ea51e
 80062a8:	20000208 	.word	0x20000208
 80062ac:	457528f6 	.word	0x457528f6
 80062b0:	464ccc00 	.word	0x464ccc00
 80062b4:	43480000 	.word	0x43480000
 80062b8:	44ffe000 	.word	0x44ffe000
 80062bc:	42480000 	.word	0x42480000

080062c0 <Status_Current_Switch>:
    2500, 2500  // 2500 Pa
};

const uint8_t respVal[16]  = {1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4};

void Status_Current_Switch(){
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < 16; i++) {
 80062c6:	2300      	movs	r3, #0
 80062c8:	71fb      	strb	r3, [r7, #7]
 80062ca:	e020      	b.n	800630e <Status_Current_Switch+0x4e>
	        if ((data_adc >= minVal[i]) && (data_adc <= maxVal[i])) {
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	4a17      	ldr	r2, [pc, #92]	@ (800632c <Status_Current_Switch+0x6c>)
 80062d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062d4:	461a      	mov	r2, r3
 80062d6:	4b16      	ldr	r3, [pc, #88]	@ (8006330 <Status_Current_Switch+0x70>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d814      	bhi.n	8006308 <Status_Current_Switch+0x48>
 80062de:	79fb      	ldrb	r3, [r7, #7]
 80062e0:	4a14      	ldr	r2, [pc, #80]	@ (8006334 <Status_Current_Switch+0x74>)
 80062e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062e6:	461a      	mov	r2, r3
 80062e8:	4b11      	ldr	r3, [pc, #68]	@ (8006330 <Status_Current_Switch+0x70>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d30b      	bcc.n	8006308 <Status_Current_Switch+0x48>
	        	Response_Switch=respVal[i];
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	4a11      	ldr	r2, [pc, #68]	@ (8006338 <Status_Current_Switch+0x78>)
 80062f4:	5cd2      	ldrb	r2, [r2, r3]
 80062f6:	4b11      	ldr	r3, [pc, #68]	@ (800633c <Status_Current_Switch+0x7c>)
 80062f8:	701a      	strb	r2, [r3, #0]
	        	Value_Switch_Pre=rangeVal[i];
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	4a10      	ldr	r2, [pc, #64]	@ (8006340 <Status_Current_Switch+0x80>)
 80062fe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006302:	4b10      	ldr	r3, [pc, #64]	@ (8006344 <Status_Current_Switch+0x84>)
 8006304:	801a      	strh	r2, [r3, #0]
	            return;
 8006306:	e00c      	b.n	8006322 <Status_Current_Switch+0x62>
	for (uint8_t i = 0; i < 16; i++) {
 8006308:	79fb      	ldrb	r3, [r7, #7]
 800630a:	3301      	adds	r3, #1
 800630c:	71fb      	strb	r3, [r7, #7]
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	2b0f      	cmp	r3, #15
 8006312:	d9db      	bls.n	80062cc <Status_Current_Switch+0xc>
	        }
	    }
    // Default
	Response_Switch=respVal[12];
 8006314:	2201      	movs	r2, #1
 8006316:	4b09      	ldr	r3, [pc, #36]	@ (800633c <Status_Current_Switch+0x7c>)
 8006318:	701a      	strb	r2, [r3, #0]
	Value_Switch_Pre=rangeVal[12];
 800631a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800631e:	4b09      	ldr	r3, [pc, #36]	@ (8006344 <Status_Current_Switch+0x84>)
 8006320:	801a      	strh	r2, [r3, #0]
}
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	bc80      	pop	{r7}
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	08006bc0 	.word	0x08006bc0
 8006330:	20000184 	.word	0x20000184
 8006334:	08006be0 	.word	0x08006be0
 8006338:	08006c20 	.word	0x08006c20
 800633c:	20000358 	.word	0x20000358
 8006340:	08006c00 	.word	0x08006c00
 8006344:	2000035a 	.word	0x2000035a

08006348 <_ZN6HT1621C1Ev>:
#define WR0 (GPIOC->BSRR = (1 << (14 + 16)))
#define DATA1 (GPIOC->BSRR = (1 << 13))
#define DATA0 (GPIOC->BSRR = (1 << (13 + 16)))


HT1621::HT1621(){
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af02      	add	r7, sp, #8
 800634e:	6078      	str	r0, [r7, #4]
	GPIOx_Init(GPIOC, 13,OUTPUT_PP,NOPULL,MODE_OUTPUT_50MHZ);
 8006350:	2303      	movs	r3, #3
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	2300      	movs	r3, #0
 8006356:	2200      	movs	r2, #0
 8006358:	210d      	movs	r1, #13
 800635a:	481b      	ldr	r0, [pc, #108]	@ (80063c8 <_ZN6HT1621C1Ev+0x80>)
 800635c:	f7ff fc72 	bl	8005c44 <GPIOx_Init>
	GPIOx_Init(GPIOC, 14,OUTPUT_PP,NOPULL,MODE_OUTPUT_50MHZ);
 8006360:	2303      	movs	r3, #3
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	2300      	movs	r3, #0
 8006366:	2200      	movs	r2, #0
 8006368:	210e      	movs	r1, #14
 800636a:	4817      	ldr	r0, [pc, #92]	@ (80063c8 <_ZN6HT1621C1Ev+0x80>)
 800636c:	f7ff fc6a 	bl	8005c44 <GPIOx_Init>
	GPIOx_Init(GPIOC, 15,OUTPUT_PP,NOPULL,MODE_OUTPUT_50MHZ);
 8006370:	2303      	movs	r3, #3
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	2300      	movs	r3, #0
 8006376:	2200      	movs	r2, #0
 8006378:	210f      	movs	r1, #15
 800637a:	4813      	ldr	r0, [pc, #76]	@ (80063c8 <_ZN6HT1621C1Ev+0x80>)
 800637c:	f7ff fc62 	bl	8005c44 <GPIOx_Init>
	wrCmd(BIAS);
 8006380:	2152      	movs	r1, #82	@ 0x52
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f84c 	bl	8006420 <_ZN6HT16215wrCmdEh>
	wrCmd(RC256);
 8006388:	2130      	movs	r1, #48	@ 0x30
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f848 	bl	8006420 <_ZN6HT16215wrCmdEh>
	wrCmd(SYSDIS);
 8006390:	2100      	movs	r1, #0
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f844 	bl	8006420 <_ZN6HT16215wrCmdEh>
	wrCmd(WDTDIS1);
 8006398:	210a      	movs	r1, #10
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f840 	bl	8006420 <_ZN6HT16215wrCmdEh>
	wrCmd(SYSEN);
 80063a0:	2102      	movs	r1, #2
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f83c 	bl	8006420 <_ZN6HT16215wrCmdEh>
	wrCmd(LCDON);
 80063a8:	2106      	movs	r1, #6
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f838 	bl	8006420 <_ZN6HT16215wrCmdEh>

	clearAll();
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f8a3 	bl	80064fc <_ZN6HT16218clearAllEv>
	ValuesConstructor();
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f8bd 	bl	8006536 <_ZN6HT162117ValuesConstructorEv>
}
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4618      	mov	r0, r3
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40011000 	.word	0x40011000

080063cc <_ZN6HT16217wrBytesEhh>:

void HT1621::wrBytes(uint8_t addr,uint8_t sdata){
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	70fb      	strb	r3, [r7, #3]
 80063d8:	4613      	mov	r3, r2
 80063da:	70bb      	strb	r3, [r7, #2]
	  addr<<=2;
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	70fb      	strb	r3, [r7, #3]
	  CS0;
 80063e2:	4b0e      	ldr	r3, [pc, #56]	@ (800641c <_ZN6HT16217wrBytesEhh+0x50>)
 80063e4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80063e8:	611a      	str	r2, [r3, #16]
	  sendBits(0xa0,3);     //Write following to data memory
 80063ea:	2203      	movs	r2, #3
 80063ec:	21a0      	movs	r1, #160	@ 0xa0
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f836 	bl	8006460 <_ZN6HT16218sendBitsEhh>
	  sendBits(addr,6);     // at address addr
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	2206      	movs	r2, #6
 80063f8:	4619      	mov	r1, r3
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f830 	bl	8006460 <_ZN6HT16218sendBitsEhh>
	  sendBits(sdata,8);    // this is the data to be written.
 8006400:	78bb      	ldrb	r3, [r7, #2]
 8006402:	2208      	movs	r2, #8
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f82a 	bl	8006460 <_ZN6HT16218sendBitsEhh>
	  CS1;
 800640c:	4b03      	ldr	r3, [pc, #12]	@ (800641c <_ZN6HT16217wrBytesEhh+0x50>)
 800640e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006412:	611a      	str	r2, [r3, #16]
}
 8006414:	bf00      	nop
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40011000 	.word	0x40011000

08006420 <_ZN6HT16215wrCmdEh>:




void HT1621::wrCmd(uint8_t cmd){
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
	  CS0;
 800642c:	4b0b      	ldr	r3, [pc, #44]	@ (800645c <_ZN6HT16215wrCmdEh+0x3c>)
 800642e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006432:	611a      	str	r2, [r3, #16]
	  sendBits(0x80,4);
 8006434:	2204      	movs	r2, #4
 8006436:	2180      	movs	r1, #128	@ 0x80
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f811 	bl	8006460 <_ZN6HT16218sendBitsEhh>
	  sendBits(cmd,8);
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	2208      	movs	r2, #8
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f80b 	bl	8006460 <_ZN6HT16218sendBitsEhh>
	  CS1;
 800644a:	4b04      	ldr	r3, [pc, #16]	@ (800645c <_ZN6HT16215wrCmdEh+0x3c>)
 800644c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006450:	611a      	str	r2, [r3, #16]
}
 8006452:	bf00      	nop
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	40011000 	.word	0x40011000

08006460 <_ZN6HT16218sendBitsEhh>:
//		 		      HAL_Delay(1000);
//		 		      clearAll();
//		 		}
//}

void HT1621::sendBits(uint8_t sdata,uint8_t size){
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	70fb      	strb	r3, [r7, #3]
 800646c:	4613      	mov	r3, r2
 800646e:	70bb      	strb	r3, [r7, #2]
	uint8_t i;
	for (i=0;i<size;i++){
 8006470:	2300      	movs	r3, #0
 8006472:	73fb      	strb	r3, [r7, #15]
 8006474:	e01a      	b.n	80064ac <_ZN6HT16218sendBitsEhh+0x4c>
		WR0;
 8006476:	4b12      	ldr	r3, [pc, #72]	@ (80064c0 <_ZN6HT16218sendBitsEhh+0x60>)
 8006478:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800647c:	611a      	str	r2, [r3, #16]
		//delay_us(1);
		if (sdata & 0x80) DATA1;
 800647e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006482:	2b00      	cmp	r3, #0
 8006484:	da04      	bge.n	8006490 <_ZN6HT16218sendBitsEhh+0x30>
 8006486:	4b0e      	ldr	r3, [pc, #56]	@ (80064c0 <_ZN6HT16218sendBitsEhh+0x60>)
 8006488:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800648c:	611a      	str	r2, [r3, #16]
 800648e:	e003      	b.n	8006498 <_ZN6HT16218sendBitsEhh+0x38>
		else DATA0;
 8006490:	4b0b      	ldr	r3, [pc, #44]	@ (80064c0 <_ZN6HT16218sendBitsEhh+0x60>)
 8006492:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006496:	611a      	str	r2, [r3, #16]
		//delay_us(1);
		WR1;
 8006498:	4b09      	ldr	r3, [pc, #36]	@ (80064c0 <_ZN6HT16218sendBitsEhh+0x60>)
 800649a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800649e:	611a      	str	r2, [r3, #16]
		//delay_us(1);
		sdata <<= 1;
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	70fb      	strb	r3, [r7, #3]
	for (i=0;i<size;i++){
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	3301      	adds	r3, #1
 80064aa:	73fb      	strb	r3, [r7, #15]
 80064ac:	7bfa      	ldrb	r2, [r7, #15]
 80064ae:	78bb      	ldrb	r3, [r7, #2]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d3e0      	bcc.n	8006476 <_ZN6HT16218sendBitsEhh+0x16>
	}
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr
 80064c0:	40011000 	.word	0x40011000

080064c4 <_ZN6HT16219displayOnEv>:

void HT1621::displayOn()
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
	wrBytes(0x0E,0x01<<3);
 80064cc:	2208      	movs	r2, #8
 80064ce:	210e      	movs	r1, #14
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff ff7b 	bl	80063cc <_ZN6HT16217wrBytesEhh>
	wrBytes(0x30,0x8C);
 80064d6:	228c      	movs	r2, #140	@ 0x8c
 80064d8:	2130      	movs	r1, #48	@ 0x30
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7ff ff76 	bl	80063cc <_ZN6HT16217wrBytesEhh>
	wrBytes(0x0A,0x01);
 80064e0:	2201      	movs	r2, #1
 80064e2:	210a      	movs	r1, #10
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff ff71 	bl	80063cc <_ZN6HT16217wrBytesEhh>
	wrBytes(0x0E,0x80);
 80064ea:	2280      	movs	r2, #128	@ 0x80
 80064ec:	210e      	movs	r1, #14
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7ff ff6c 	bl	80063cc <_ZN6HT16217wrBytesEhh>



}
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <_ZN6HT16218clearAllEv>:


void HT1621::clearAll(){
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
	uint8_t addr=0;
 8006504:	2300      	movs	r3, #0
 8006506:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i=0;i<32;++i){
 8006508:	2300      	movs	r3, #0
 800650a:	73bb      	strb	r3, [r7, #14]
 800650c:	e00b      	b.n	8006526 <_ZN6HT16218clearAllEv+0x2a>
		  wrBytes(addr,0x00);
 800650e:	7bfb      	ldrb	r3, [r7, #15]
 8006510:	2200      	movs	r2, #0
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff ff59 	bl	80063cc <_ZN6HT16217wrBytesEhh>
	      addr+=2;
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	3302      	adds	r3, #2
 800651e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i=0;i<32;++i){
 8006520:	7bbb      	ldrb	r3, [r7, #14]
 8006522:	3301      	adds	r3, #1
 8006524:	73bb      	strb	r3, [r7, #14]
 8006526:	7bbb      	ldrb	r3, [r7, #14]
 8006528:	2b1f      	cmp	r3, #31
 800652a:	d9f0      	bls.n	800650e <_ZN6HT16218clearAllEv+0x12>
	}
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <_ZN6HT162117ValuesConstructorEv>:

void HT1621::ValuesConstructor(){
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  this->HT1621_data.map2[0]= 0x5F;  //'0'
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	225f      	movs	r2, #95	@ 0x5f
 8006542:	735a      	strb	r2, [r3, #13]
  this->HT1621_data.map2[1]= 0x06;  //'1'
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2206      	movs	r2, #6
 8006548:	739a      	strb	r2, [r3, #14]
  this->HT1621_data.map2[2]= 0x6B;  //'2'
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	226b      	movs	r2, #107	@ 0x6b
 800654e:	73da      	strb	r2, [r3, #15]
  this->HT1621_data.map2[3]= 0x2F;  //'3'
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	222f      	movs	r2, #47	@ 0x2f
 8006554:	741a      	strb	r2, [r3, #16]
  this->HT1621_data.map2[4]= 0x36;  //'4'
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2236      	movs	r2, #54	@ 0x36
 800655a:	745a      	strb	r2, [r3, #17]
  this->HT1621_data.map2[5]= 0x3D;  //'5'
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	223d      	movs	r2, #61	@ 0x3d
 8006560:	749a      	strb	r2, [r3, #18]
  this->HT1621_data.map2[6]= 0x7D;  //'6'
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	227d      	movs	r2, #125	@ 0x7d
 8006566:	74da      	strb	r2, [r3, #19]
  this->HT1621_data.map2[7]= 0x27;  //'7'
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2227      	movs	r2, #39	@ 0x27
 800656c:	751a      	strb	r2, [r3, #20]
  this->HT1621_data.map2[8]= 0x7F;  //'8'
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	227f      	movs	r2, #127	@ 0x7f
 8006572:	755a      	strb	r2, [r3, #21]
  this->HT1621_data.map2[9]= 0x3F;  //'9'
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	223f      	movs	r2, #63	@ 0x3f
 8006578:	759a      	strb	r2, [r3, #22]


  this->HT1621_data.map1[0]= 0xAF;  //'0'
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	22af      	movs	r2, #175	@ 0xaf
 800657e:	709a      	strb	r2, [r3, #2]
  this->HT1621_data.map1[1]= 0x06;  //'1'
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2206      	movs	r2, #6
 8006584:	70da      	strb	r2, [r3, #3]
  this->HT1621_data.map1[2]= 0x6D;  //'2'
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	226d      	movs	r2, #109	@ 0x6d
 800658a:	711a      	strb	r2, [r3, #4]
  this->HT1621_data.map1[3]= 0x4F;  //'3'
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	224f      	movs	r2, #79	@ 0x4f
 8006590:	715a      	strb	r2, [r3, #5]
  this->HT1621_data.map1[4]= 0xC6;  //'4'
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	22c6      	movs	r2, #198	@ 0xc6
 8006596:	719a      	strb	r2, [r3, #6]
  this->HT1621_data.map1[5]= 0xCB;  //'5'
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	22cb      	movs	r2, #203	@ 0xcb
 800659c:	71da      	strb	r2, [r3, #7]
  this->HT1621_data.map1[6]= 0xEB;  //'6'
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	22eb      	movs	r2, #235	@ 0xeb
 80065a2:	721a      	strb	r2, [r3, #8]
  this->HT1621_data.map1[7]= 0x4E;  //'7'
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	224e      	movs	r2, #78	@ 0x4e
 80065a8:	725a      	strb	r2, [r3, #9]
  this->HT1621_data.map1[8]= 0xEF;  //'8'
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	22ef      	movs	r2, #239	@ 0xef
 80065ae:	729a      	strb	r2, [r3, #10]
  this->HT1621_data.map1[9]= 0xCF;  //'9'
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	22cf      	movs	r2, #207	@ 0xcf
 80065b4:	72da      	strb	r2, [r3, #11]
  this->HT1621_data.map1[10]=0x00;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	731a      	strb	r2, [r3, #12]

  this->HT1621_data.map[0]= 0x20;  //'-'
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	701a      	strb	r2, [r3, #0]
  this->HT1621_data.map[1]= 0x00;  //' '
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	705a      	strb	r2, [r3, #1]

  this->HT1621_data.digit[0]=0x00;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	75da      	strb	r2, [r3, #23]
  this->HT1621_data.digit[1]=0x00;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	761a      	strb	r2, [r3, #24]
  this->HT1621_data.digit[2]=0x00;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	765a      	strb	r2, [r3, #25]
  this->HT1621_data.digit[3]=0x00;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	769a      	strb	r2, [r3, #26]
  this->HT1621_data.digit[4]=0x00;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	76da      	strb	r2, [r3, #27]
  this->HT1621_data.digit[5]=0x00;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	771a      	strb	r2, [r3, #28]
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr
	...

080065f8 <_ZN6HT16217ConvertEthh>:
//convert -> blacking -> refresh.

void HT1621::Convert(uint16_t a,uint8_t line,uint8_t tmp){
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	4608      	mov	r0, r1
 8006602:	4611      	mov	r1, r2
 8006604:	461a      	mov	r2, r3
 8006606:	4603      	mov	r3, r0
 8006608:	807b      	strh	r3, [r7, #2]
 800660a:	460b      	mov	r3, r1
 800660c:	707b      	strb	r3, [r7, #1]
 800660e:	4613      	mov	r3, r2
 8006610:	703b      	strb	r3, [r7, #0]
	uint8_t Current_Digit;
	if ((a > 1000) || (a < 0)) {
 8006612:	887b      	ldrh	r3, [r7, #2]
 8006614:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006618:	d910      	bls.n	800663c <_ZN6HT16217ConvertEthh+0x44>
		for (uint8_t i=0;i<5;++i) {
 800661a:	2300      	movs	r3, #0
 800661c:	73bb      	strb	r3, [r7, #14]
 800661e:	e009      	b.n	8006634 <_ZN6HT16217ConvertEthh+0x3c>
			this->HT1621_data.digit[i] =this->HT1621_data.map[10];
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	7a91      	ldrb	r1, [r2, #10]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	4413      	add	r3, r2
 800662a:	460a      	mov	r2, r1
 800662c:	75da      	strb	r2, [r3, #23]
		for (uint8_t i=0;i<5;++i) {
 800662e:	7bbb      	ldrb	r3, [r7, #14]
 8006630:	3301      	adds	r3, #1
 8006632:	73bb      	strb	r3, [r7, #14]
 8006634:	7bbb      	ldrb	r3, [r7, #14]
 8006636:	2b04      	cmp	r3, #4
 8006638:	d9f2      	bls.n	8006620 <_ZN6HT16217ConvertEthh+0x28>
		}
		return;
 800663a:	e03a      	b.n	80066b2 <_ZN6HT16217ConvertEthh+0xba>
	}
    for(Current_Digit = tmp;a>0; ++Current_Digit){
 800663c:	783b      	ldrb	r3, [r7, #0]
 800663e:	73fb      	strb	r3, [r7, #15]
 8006640:	e034      	b.n	80066ac <_ZN6HT16217ConvertEthh+0xb4>
      if (line==1) this->HT1621_data.digit[Current_Digit]=this->HT1621_data.map1[a%10];
 8006642:	787b      	ldrb	r3, [r7, #1]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d114      	bne.n	8006672 <_ZN6HT16217ConvertEthh+0x7a>
 8006648:	887a      	ldrh	r2, [r7, #2]
 800664a:	4b1c      	ldr	r3, [pc, #112]	@ (80066bc <_ZN6HT16217ConvertEthh+0xc4>)
 800664c:	fba3 1302 	umull	r1, r3, r3, r2
 8006650:	08d9      	lsrs	r1, r3, #3
 8006652:	460b      	mov	r3, r1
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	b29b      	uxth	r3, r3
 800665e:	4619      	mov	r1, r3
 8006660:	7bfb      	ldrb	r3, [r7, #15]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	440a      	add	r2, r1
 8006666:	7891      	ldrb	r1, [r2, #2]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	4413      	add	r3, r2
 800666c:	460a      	mov	r2, r1
 800666e:	75da      	strb	r2, [r3, #23]
 8006670:	e013      	b.n	800669a <_ZN6HT16217ConvertEthh+0xa2>
      else this->HT1621_data.digit[Current_Digit]=this->HT1621_data.map2[a%10];
 8006672:	887a      	ldrh	r2, [r7, #2]
 8006674:	4b11      	ldr	r3, [pc, #68]	@ (80066bc <_ZN6HT16217ConvertEthh+0xc4>)
 8006676:	fba3 1302 	umull	r1, r3, r3, r2
 800667a:	08d9      	lsrs	r1, r3, #3
 800667c:	460b      	mov	r3, r1
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	b29b      	uxth	r3, r3
 8006688:	4619      	mov	r1, r3
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	440a      	add	r2, r1
 8006690:	7b51      	ldrb	r1, [r2, #13]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4413      	add	r3, r2
 8006696:	460a      	mov	r2, r1
 8006698:	75da      	strb	r2, [r3, #23]
      a/=10;
 800669a:	887b      	ldrh	r3, [r7, #2]
 800669c:	4a07      	ldr	r2, [pc, #28]	@ (80066bc <_ZN6HT16217ConvertEthh+0xc4>)
 800669e:	fba2 2303 	umull	r2, r3, r2, r3
 80066a2:	08db      	lsrs	r3, r3, #3
 80066a4:	807b      	strh	r3, [r7, #2]
    for(Current_Digit = tmp;a>0; ++Current_Digit){
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	3301      	adds	r3, #1
 80066aa:	73fb      	strb	r3, [r7, #15]
 80066ac:	887b      	ldrh	r3, [r7, #2]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1c7      	bne.n	8006642 <_ZN6HT16217ConvertEthh+0x4a>
    }
}
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bc80      	pop	{r7}
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	cccccccd 	.word	0xcccccccd

080066c0 <_ZN6HT162117Write_Float_LinexEfh>:


void HT1621::Write_Float_Linex(float a,uint8_t line){
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b088      	sub	sp, #32
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	4613      	mov	r3, r2
 80066cc:	71fb      	strb	r3, [r7, #7]
	uint8_t h1[4]={0x08,0x06,0x04,0x02};
 80066ce:	4b5e      	ldr	r3, [pc, #376]	@ (8006848 <_ZN6HT162117Write_Float_LinexEfh+0x188>)
 80066d0:	617b      	str	r3, [r7, #20]
	uint8_t h2[4]={0x1A,0x18,0x16,0x14};
 80066d2:	4b5e      	ldr	r3, [pc, #376]	@ (800684c <_ZN6HT162117Write_Float_LinexEfh+0x18c>)
 80066d4:	613b      	str	r3, [r7, #16]
	for (uint8_t i=0;i<6;++i) this->HT1621_data.digit[i]=0x00;
 80066d6:	2300      	movs	r3, #0
 80066d8:	77fb      	strb	r3, [r7, #31]
 80066da:	e007      	b.n	80066ec <_ZN6HT162117Write_Float_LinexEfh+0x2c>
 80066dc:	7ffb      	ldrb	r3, [r7, #31]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4413      	add	r3, r2
 80066e2:	2200      	movs	r2, #0
 80066e4:	75da      	strb	r2, [r3, #23]
 80066e6:	7ffb      	ldrb	r3, [r7, #31]
 80066e8:	3301      	adds	r3, #1
 80066ea:	77fb      	strb	r3, [r7, #31]
 80066ec:	7ffb      	ldrb	r3, [r7, #31]
 80066ee:	2b05      	cmp	r3, #5
 80066f0:	d9f4      	bls.n	80066dc <_ZN6HT162117Write_Float_LinexEfh+0x1c>
	if (line ==1 ) {
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d113      	bne.n	8006720 <_ZN6HT162117Write_Float_LinexEfh+0x60>
		for (uint8_t i=0;i<4;++i) wrBytes(h1[i],0x00);
 80066f8:	2300      	movs	r3, #0
 80066fa:	77bb      	strb	r3, [r7, #30]
 80066fc:	e00c      	b.n	8006718 <_ZN6HT162117Write_Float_LinexEfh+0x58>
 80066fe:	7fbb      	ldrb	r3, [r7, #30]
 8006700:	3320      	adds	r3, #32
 8006702:	443b      	add	r3, r7
 8006704:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006708:	2200      	movs	r2, #0
 800670a:	4619      	mov	r1, r3
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f7ff fe5d 	bl	80063cc <_ZN6HT16217wrBytesEhh>
 8006712:	7fbb      	ldrb	r3, [r7, #30]
 8006714:	3301      	adds	r3, #1
 8006716:	77bb      	strb	r3, [r7, #30]
 8006718:	7fbb      	ldrb	r3, [r7, #30]
 800671a:	2b03      	cmp	r3, #3
 800671c:	d9ef      	bls.n	80066fe <_ZN6HT162117Write_Float_LinexEfh+0x3e>
 800671e:	e012      	b.n	8006746 <_ZN6HT162117Write_Float_LinexEfh+0x86>
	}
	else {
		for (uint8_t i=0;i<4;++i) wrBytes(h2[i],0x00);
 8006720:	2300      	movs	r3, #0
 8006722:	777b      	strb	r3, [r7, #29]
 8006724:	e00c      	b.n	8006740 <_ZN6HT162117Write_Float_LinexEfh+0x80>
 8006726:	7f7b      	ldrb	r3, [r7, #29]
 8006728:	3320      	adds	r3, #32
 800672a:	443b      	add	r3, r7
 800672c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8006730:	2200      	movs	r2, #0
 8006732:	4619      	mov	r1, r3
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff fe49 	bl	80063cc <_ZN6HT16217wrBytesEhh>
 800673a:	7f7b      	ldrb	r3, [r7, #29]
 800673c:	3301      	adds	r3, #1
 800673e:	777b      	strb	r3, [r7, #29]
 8006740:	7f7b      	ldrb	r3, [r7, #29]
 8006742:	2b03      	cmp	r3, #3
 8006744:	d9ef      	bls.n	8006726 <_ZN6HT162117Write_Float_LinexEfh+0x66>
	}


	uint16_t x=(a-(uint16_t)a)*10;
 8006746:	68b8      	ldr	r0, [r7, #8]
 8006748:	f7fa f9e2 	bl	8000b10 <__aeabi_f2uiz>
 800674c:	4603      	mov	r3, r0
 800674e:	b29b      	uxth	r3, r3
 8006750:	4618      	mov	r0, r3
 8006752:	f7f9 ffc3 	bl	80006dc <__aeabi_i2f>
 8006756:	4603      	mov	r3, r0
 8006758:	4619      	mov	r1, r3
 800675a:	68b8      	ldr	r0, [r7, #8]
 800675c:	f7f9 ff08 	bl	8000570 <__aeabi_fsub>
 8006760:	4603      	mov	r3, r0
 8006762:	493b      	ldr	r1, [pc, #236]	@ (8006850 <_ZN6HT162117Write_Float_LinexEfh+0x190>)
 8006764:	4618      	mov	r0, r3
 8006766:	f7fa f80d 	bl	8000784 <__aeabi_fmul>
 800676a:	4603      	mov	r3, r0
 800676c:	4618      	mov	r0, r3
 800676e:	f7fa f9cf 	bl	8000b10 <__aeabi_f2uiz>
 8006772:	4603      	mov	r3, r0
 8006774:	837b      	strh	r3, [r7, #26]
	if (line==1){
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d106      	bne.n	800678a <_ZN6HT162117Write_Float_LinexEfh+0xca>
		this->HT1621_data.digit[0]=this->HT1621_data.map1[x];
 800677c:	8b7b      	ldrh	r3, [r7, #26]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4413      	add	r3, r2
 8006782:	789a      	ldrb	r2, [r3, #2]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	75da      	strb	r2, [r3, #23]
 8006788:	e005      	b.n	8006796 <_ZN6HT162117Write_Float_LinexEfh+0xd6>
	}
	else {
		this->HT1621_data.digit[0]=this->HT1621_data.map2[x];
 800678a:	8b7b      	ldrh	r3, [r7, #26]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	7b5a      	ldrb	r2, [r3, #13]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	75da      	strb	r2, [r3, #23]
	}
	Convert((uint16_t)a,line,1);
 8006796:	68b8      	ldr	r0, [r7, #8]
 8006798:	f7fa f9ba 	bl	8000b10 <__aeabi_f2uiz>
 800679c:	4603      	mov	r3, r0
 800679e:	b299      	uxth	r1, r3
 80067a0:	79fa      	ldrb	r2, [r7, #7]
 80067a2:	2301      	movs	r3, #1
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f7ff ff27 	bl	80065f8 <_ZN6HT16217ConvertEthh>
	for(uint8_t i=0;this->HT1621_data.digit[i]!=0x00;++i){
 80067aa:	2300      	movs	r3, #0
 80067ac:	773b      	strb	r3, [r7, #28]
 80067ae:	e03f      	b.n	8006830 <_ZN6HT162117Write_Float_LinexEfh+0x170>
		if (i==1) {
 80067b0:	7f3b      	ldrb	r3, [r7, #28]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d11b      	bne.n	80067ee <_ZN6HT162117Write_Float_LinexEfh+0x12e>
			if (line==1){
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d10c      	bne.n	80067d6 <_ZN6HT162117Write_Float_LinexEfh+0x116>
				this->HT1621_data.digit[i] |= 0x10;
 80067bc:	7f3b      	ldrb	r3, [r7, #28]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	4413      	add	r3, r2
 80067c2:	7dda      	ldrb	r2, [r3, #23]
 80067c4:	7f3b      	ldrb	r3, [r7, #28]
 80067c6:	f042 0210 	orr.w	r2, r2, #16
 80067ca:	b2d1      	uxtb	r1, r2
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	460a      	mov	r2, r1
 80067d2:	75da      	strb	r2, [r3, #23]
 80067d4:	e00b      	b.n	80067ee <_ZN6HT162117Write_Float_LinexEfh+0x12e>
			}
			else {
				this->HT1621_data.digit[i] |= 0x80;
 80067d6:	7f3b      	ldrb	r3, [r7, #28]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4413      	add	r3, r2
 80067dc:	7dda      	ldrb	r2, [r3, #23]
 80067de:	7f3b      	ldrb	r3, [r7, #28]
 80067e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067e4:	b2d1      	uxtb	r1, r2
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4413      	add	r3, r2
 80067ea:	460a      	mov	r2, r1
 80067ec:	75da      	strb	r2, [r3, #23]
			}
		}
		if (line==1){
 80067ee:	79fb      	ldrb	r3, [r7, #7]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d10d      	bne.n	8006810 <_ZN6HT162117Write_Float_LinexEfh+0x150>
			wrBytes(h1[i],this->HT1621_data.digit[i]);
 80067f4:	7f3b      	ldrb	r3, [r7, #28]
 80067f6:	3320      	adds	r3, #32
 80067f8:	443b      	add	r3, r7
 80067fa:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 80067fe:	7f3b      	ldrb	r3, [r7, #28]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	7ddb      	ldrb	r3, [r3, #23]
 8006806:	461a      	mov	r2, r3
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f7ff fddf 	bl	80063cc <_ZN6HT16217wrBytesEhh>
 800680e:	e00c      	b.n	800682a <_ZN6HT162117Write_Float_LinexEfh+0x16a>
		}
		else {
			wrBytes(h2[i],this->HT1621_data.digit[i]);
 8006810:	7f3b      	ldrb	r3, [r7, #28]
 8006812:	3320      	adds	r3, #32
 8006814:	443b      	add	r3, r7
 8006816:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 800681a:	7f3b      	ldrb	r3, [r7, #28]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4413      	add	r3, r2
 8006820:	7ddb      	ldrb	r3, [r3, #23]
 8006822:	461a      	mov	r2, r3
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f7ff fdd1 	bl	80063cc <_ZN6HT16217wrBytesEhh>
	for(uint8_t i=0;this->HT1621_data.digit[i]!=0x00;++i){
 800682a:	7f3b      	ldrb	r3, [r7, #28]
 800682c:	3301      	adds	r3, #1
 800682e:	773b      	strb	r3, [r7, #28]
 8006830:	7f3b      	ldrb	r3, [r7, #28]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4413      	add	r3, r2
 8006836:	7ddb      	ldrb	r3, [r3, #23]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1b9      	bne.n	80067b0 <_ZN6HT162117Write_Float_LinexEfh+0xf0>
		}

	}
}
 800683c:	bf00      	nop
 800683e:	bf00      	nop
 8006840:	3720      	adds	r7, #32
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	02040608 	.word	0x02040608
 800684c:	1416181a 	.word	0x1416181a
 8006850:	41200000 	.word	0x41200000

08006854 <_ZN6HT162115Write_INT_LinexEfh>:


void HT1621::Write_INT_Linex(float a,uint8_t line){
 8006854:	b580      	push	{r7, lr}
 8006856:	b088      	sub	sp, #32
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	4613      	mov	r3, r2
 8006860:	71fb      	strb	r3, [r7, #7]
	uint8_t h1[4]={0x08,0x06,0x04,0x02};
 8006862:	4b66      	ldr	r3, [pc, #408]	@ (80069fc <_ZN6HT162115Write_INT_LinexEfh+0x1a8>)
 8006864:	617b      	str	r3, [r7, #20]
	uint8_t h2[4]={0x1A,0x18,0x16,0x14};
 8006866:	4b66      	ldr	r3, [pc, #408]	@ (8006a00 <_ZN6HT162115Write_INT_LinexEfh+0x1ac>)
 8006868:	613b      	str	r3, [r7, #16]
	for (uint8_t i=0;i<6;++i) this->HT1621_data.digit[i]=0x00;
 800686a:	2300      	movs	r3, #0
 800686c:	77fb      	strb	r3, [r7, #31]
 800686e:	e007      	b.n	8006880 <_ZN6HT162115Write_INT_LinexEfh+0x2c>
 8006870:	7ffb      	ldrb	r3, [r7, #31]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4413      	add	r3, r2
 8006876:	2200      	movs	r2, #0
 8006878:	75da      	strb	r2, [r3, #23]
 800687a:	7ffb      	ldrb	r3, [r7, #31]
 800687c:	3301      	adds	r3, #1
 800687e:	77fb      	strb	r3, [r7, #31]
 8006880:	7ffb      	ldrb	r3, [r7, #31]
 8006882:	2b05      	cmp	r3, #5
 8006884:	d9f4      	bls.n	8006870 <_ZN6HT162115Write_INT_LinexEfh+0x1c>
	if (line ==1 ) {
 8006886:	79fb      	ldrb	r3, [r7, #7]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d113      	bne.n	80068b4 <_ZN6HT162115Write_INT_LinexEfh+0x60>
		for (uint8_t i=0;i<4;++i) wrBytes(h1[i],0x00);
 800688c:	2300      	movs	r3, #0
 800688e:	77bb      	strb	r3, [r7, #30]
 8006890:	e00c      	b.n	80068ac <_ZN6HT162115Write_INT_LinexEfh+0x58>
 8006892:	7fbb      	ldrb	r3, [r7, #30]
 8006894:	3320      	adds	r3, #32
 8006896:	443b      	add	r3, r7
 8006898:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800689c:	2200      	movs	r2, #0
 800689e:	4619      	mov	r1, r3
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7ff fd93 	bl	80063cc <_ZN6HT16217wrBytesEhh>
 80068a6:	7fbb      	ldrb	r3, [r7, #30]
 80068a8:	3301      	adds	r3, #1
 80068aa:	77bb      	strb	r3, [r7, #30]
 80068ac:	7fbb      	ldrb	r3, [r7, #30]
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d9ef      	bls.n	8006892 <_ZN6HT162115Write_INT_LinexEfh+0x3e>
 80068b2:	e012      	b.n	80068da <_ZN6HT162115Write_INT_LinexEfh+0x86>
	}
	else {
		for (uint8_t i=0;i<4;++i) wrBytes(h2[i],0x00);
 80068b4:	2300      	movs	r3, #0
 80068b6:	777b      	strb	r3, [r7, #29]
 80068b8:	e00c      	b.n	80068d4 <_ZN6HT162115Write_INT_LinexEfh+0x80>
 80068ba:	7f7b      	ldrb	r3, [r7, #29]
 80068bc:	3320      	adds	r3, #32
 80068be:	443b      	add	r3, r7
 80068c0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80068c4:	2200      	movs	r2, #0
 80068c6:	4619      	mov	r1, r3
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f7ff fd7f 	bl	80063cc <_ZN6HT16217wrBytesEhh>
 80068ce:	7f7b      	ldrb	r3, [r7, #29]
 80068d0:	3301      	adds	r3, #1
 80068d2:	777b      	strb	r3, [r7, #29]
 80068d4:	7f7b      	ldrb	r3, [r7, #29]
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d9ef      	bls.n	80068ba <_ZN6HT162115Write_INT_LinexEfh+0x66>
	}
	float tmp=a;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	61bb      	str	r3, [r7, #24]
	if (a <0) a=-a;
 80068de:	f04f 0100 	mov.w	r1, #0
 80068e2:	68b8      	ldr	r0, [r7, #8]
 80068e4:	f7fa f8ec 	bl	8000ac0 <__aeabi_fcmplt>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <_ZN6HT162115Write_INT_LinexEfh+0xa2>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80068f4:	60bb      	str	r3, [r7, #8]

	if ((uint16_t)a == 0){
 80068f6:	68b8      	ldr	r0, [r7, #8]
 80068f8:	f7fa f90a 	bl	8000b10 <__aeabi_f2uiz>
 80068fc:	4603      	mov	r3, r0
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d112      	bne.n	800692a <_ZN6HT162115Write_INT_LinexEfh+0xd6>
		if (line==1){
 8006904:	79fb      	ldrb	r3, [r7, #7]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d107      	bne.n	800691a <_ZN6HT162115Write_INT_LinexEfh+0xc6>
			wrBytes(h1[0],this->HT1621_data.map1[0]);
 800690a:	7d39      	ldrb	r1, [r7, #20]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	789b      	ldrb	r3, [r3, #2]
 8006910:	461a      	mov	r2, r3
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff fd5a 	bl	80063cc <_ZN6HT16217wrBytesEhh>
		}
		else {
			wrBytes(h2[0],this->HT1621_data.map2[0]);
		}
		return;
 8006918:	e06c      	b.n	80069f4 <_ZN6HT162115Write_INT_LinexEfh+0x1a0>
			wrBytes(h2[0],this->HT1621_data.map2[0]);
 800691a:	7c39      	ldrb	r1, [r7, #16]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	7b5b      	ldrb	r3, [r3, #13]
 8006920:	461a      	mov	r2, r3
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f7ff fd52 	bl	80063cc <_ZN6HT16217wrBytesEhh>
 8006928:	e064      	b.n	80069f4 <_ZN6HT162115Write_INT_LinexEfh+0x1a0>
	}

	Convert((uint16_t)a,line,0);
 800692a:	68b8      	ldr	r0, [r7, #8]
 800692c:	f7fa f8f0 	bl	8000b10 <__aeabi_f2uiz>
 8006930:	4603      	mov	r3, r0
 8006932:	b299      	uxth	r1, r3
 8006934:	79fa      	ldrb	r2, [r7, #7]
 8006936:	2300      	movs	r3, #0
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f7ff fe5d 	bl	80065f8 <_ZN6HT16217ConvertEthh>
	for(uint8_t i=0;this->HT1621_data.digit[i]!=0x00;++i){
 800693e:	2300      	movs	r3, #0
 8006940:	773b      	strb	r3, [r7, #28]
 8006942:	e020      	b.n	8006986 <_ZN6HT162115Write_INT_LinexEfh+0x132>
		if (line==1){
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d10d      	bne.n	8006966 <_ZN6HT162115Write_INT_LinexEfh+0x112>
			wrBytes(h1[i],this->HT1621_data.digit[i]);
 800694a:	7f3b      	ldrb	r3, [r7, #28]
 800694c:	3320      	adds	r3, #32
 800694e:	443b      	add	r3, r7
 8006950:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8006954:	7f3b      	ldrb	r3, [r7, #28]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4413      	add	r3, r2
 800695a:	7ddb      	ldrb	r3, [r3, #23]
 800695c:	461a      	mov	r2, r3
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f7ff fd34 	bl	80063cc <_ZN6HT16217wrBytesEhh>
 8006964:	e00c      	b.n	8006980 <_ZN6HT162115Write_INT_LinexEfh+0x12c>
		}
		else {
			wrBytes(h2[i],this->HT1621_data.digit[i]);
 8006966:	7f3b      	ldrb	r3, [r7, #28]
 8006968:	3320      	adds	r3, #32
 800696a:	443b      	add	r3, r7
 800696c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8006970:	7f3b      	ldrb	r3, [r7, #28]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	7ddb      	ldrb	r3, [r3, #23]
 8006978:	461a      	mov	r2, r3
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f7ff fd26 	bl	80063cc <_ZN6HT16217wrBytesEhh>
	for(uint8_t i=0;this->HT1621_data.digit[i]!=0x00;++i){
 8006980:	7f3b      	ldrb	r3, [r7, #28]
 8006982:	3301      	adds	r3, #1
 8006984:	773b      	strb	r3, [r7, #28]
 8006986:	7f3b      	ldrb	r3, [r7, #28]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	7ddb      	ldrb	r3, [r3, #23]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1d8      	bne.n	8006944 <_ZN6HT162115Write_INT_LinexEfh+0xf0>
		}

	}

	if (tmp <0){
 8006992:	f04f 0100 	mov.w	r1, #0
 8006996:	69b8      	ldr	r0, [r7, #24]
 8006998:	f7fa f892 	bl	8000ac0 <__aeabi_fcmplt>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d028      	beq.n	80069f4 <_ZN6HT162115Write_INT_LinexEfh+0x1a0>
		if (a < 10) wrBytes(h1[1],0x40);
 80069a2:	4918      	ldr	r1, [pc, #96]	@ (8006a04 <_ZN6HT162115Write_INT_LinexEfh+0x1b0>)
 80069a4:	68b8      	ldr	r0, [r7, #8]
 80069a6:	f7fa f88b 	bl	8000ac0 <__aeabi_fcmplt>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d006      	beq.n	80069be <_ZN6HT162115Write_INT_LinexEfh+0x16a>
 80069b0:	7d7b      	ldrb	r3, [r7, #21]
 80069b2:	2240      	movs	r2, #64	@ 0x40
 80069b4:	4619      	mov	r1, r3
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f7ff fd08 	bl	80063cc <_ZN6HT16217wrBytesEhh>
 80069bc:	e01a      	b.n	80069f4 <_ZN6HT162115Write_INT_LinexEfh+0x1a0>
		else if (a <100) wrBytes(h1[2],0x40);
 80069be:	4912      	ldr	r1, [pc, #72]	@ (8006a08 <_ZN6HT162115Write_INT_LinexEfh+0x1b4>)
 80069c0:	68b8      	ldr	r0, [r7, #8]
 80069c2:	f7fa f87d 	bl	8000ac0 <__aeabi_fcmplt>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d006      	beq.n	80069da <_ZN6HT162115Write_INT_LinexEfh+0x186>
 80069cc:	7dbb      	ldrb	r3, [r7, #22]
 80069ce:	2240      	movs	r2, #64	@ 0x40
 80069d0:	4619      	mov	r1, r3
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f7ff fcfa 	bl	80063cc <_ZN6HT16217wrBytesEhh>
 80069d8:	e00c      	b.n	80069f4 <_ZN6HT162115Write_INT_LinexEfh+0x1a0>
		else if (a <1000) wrBytes(h1[3],0x40);
 80069da:	490c      	ldr	r1, [pc, #48]	@ (8006a0c <_ZN6HT162115Write_INT_LinexEfh+0x1b8>)
 80069dc:	68b8      	ldr	r0, [r7, #8]
 80069de:	f7fa f86f 	bl	8000ac0 <__aeabi_fcmplt>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d005      	beq.n	80069f4 <_ZN6HT162115Write_INT_LinexEfh+0x1a0>
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
 80069ea:	2240      	movs	r2, #64	@ 0x40
 80069ec:	4619      	mov	r1, r3
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f7ff fcec 	bl	80063cc <_ZN6HT16217wrBytesEhh>
	}
}
 80069f4:	3720      	adds	r7, #32
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	02040608 	.word	0x02040608
 8006a00:	1416181a 	.word	0x1416181a
 8006a04:	41200000 	.word	0x41200000
 8006a08:	42c80000 	.word	0x42c80000
 8006a0c:	447a0000 	.word	0x447a0000

08006a10 <_ZN6HT16218Write_IdEh>:

void HT1621::Write_Id(uint8_t a){
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	70fb      	strb	r3, [r7, #3]
	uint8_t h1[4]={0x08,0x06,0x04,0x02};
 8006a1c:	4b26      	ldr	r3, [pc, #152]	@ (8006ab8 <_ZN6HT16218Write_IdEh+0xa8>)
 8006a1e:	613b      	str	r3, [r7, #16]
	uint8_t h2[4]={0x1A,0x18,0x16,0x14};
 8006a20:	4b26      	ldr	r3, [pc, #152]	@ (8006abc <_ZN6HT16218Write_IdEh+0xac>)
 8006a22:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0;i<6;++i) this->HT1621_data.digit[i]=0x00;
 8006a24:	2300      	movs	r3, #0
 8006a26:	75fb      	strb	r3, [r7, #23]
 8006a28:	e007      	b.n	8006a3a <_ZN6HT16218Write_IdEh+0x2a>
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	4413      	add	r3, r2
 8006a30:	2200      	movs	r2, #0
 8006a32:	75da      	strb	r2, [r3, #23]
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
 8006a36:	3301      	adds	r3, #1
 8006a38:	75fb      	strb	r3, [r7, #23]
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	2b05      	cmp	r3, #5
 8006a3e:	d9f4      	bls.n	8006a2a <_ZN6HT16218Write_IdEh+0x1a>
	//for (uint8_t i=0;i<4;++i) wrBytes(h1[i],0x00);
	//for (uint8_t i=0;i<4;++i) wrBytes(h2[i],0x00);
	/////phu

	wrBytes(16,0x0C);
 8006a40:	220c      	movs	r2, #12
 8006a42:	2110      	movs	r1, #16
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff fcc1 	bl	80063cc <_ZN6HT16217wrBytesEhh>
	wrBytes(14,0x80);
 8006a4a:	2280      	movs	r2, #128	@ 0x80
 8006a4c:	210e      	movs	r1, #14
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7ff fcbc 	bl	80063cc <_ZN6HT16217wrBytesEhh>
	wrBytes(h1[3],0x06);
 8006a54:	7cfb      	ldrb	r3, [r7, #19]
 8006a56:	2206      	movs	r2, #6
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7ff fcb6 	bl	80063cc <_ZN6HT16217wrBytesEhh>
	wrBytes(h1[2],0x67);
 8006a60:	7cbb      	ldrb	r3, [r7, #18]
 8006a62:	2267      	movs	r2, #103	@ 0x67
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fcb0 	bl	80063cc <_ZN6HT16217wrBytesEhh>
	/////////////////////
	Convert((uint8_t)a,2,0);
 8006a6c:	78fb      	ldrb	r3, [r7, #3]
 8006a6e:	b299      	uxth	r1, r3
 8006a70:	2300      	movs	r3, #0
 8006a72:	2202      	movs	r2, #2
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff fdbf 	bl	80065f8 <_ZN6HT16217ConvertEthh>
	for(uint8_t i=0;this->HT1621_data.digit[i]!=0x00;++i){
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	75bb      	strb	r3, [r7, #22]
 8006a7e:	e00f      	b.n	8006aa0 <_ZN6HT16218Write_IdEh+0x90>
		wrBytes(h2[i],this->HT1621_data.digit[i]);
 8006a80:	7dbb      	ldrb	r3, [r7, #22]
 8006a82:	3318      	adds	r3, #24
 8006a84:	443b      	add	r3, r7
 8006a86:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8006a8a:	7dbb      	ldrb	r3, [r7, #22]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	4413      	add	r3, r2
 8006a90:	7ddb      	ldrb	r3, [r3, #23]
 8006a92:	461a      	mov	r2, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff fc99 	bl	80063cc <_ZN6HT16217wrBytesEhh>
	for(uint8_t i=0;this->HT1621_data.digit[i]!=0x00;++i){
 8006a9a:	7dbb      	ldrb	r3, [r7, #22]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	75bb      	strb	r3, [r7, #22]
 8006aa0:	7dbb      	ldrb	r3, [r7, #22]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	7ddb      	ldrb	r3, [r3, #23]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e9      	bne.n	8006a80 <_ZN6HT16218Write_IdEh+0x70>
	}
}
 8006aac:	bf00      	nop
 8006aae:	bf00      	nop
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	02040608 	.word	0x02040608
 8006abc:	1416181a 	.word	0x1416181a

08006ac0 <memset>:
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	4402      	add	r2, r0
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d100      	bne.n	8006aca <memset+0xa>
 8006ac8:	4770      	bx	lr
 8006aca:	f803 1b01 	strb.w	r1, [r3], #1
 8006ace:	e7f9      	b.n	8006ac4 <memset+0x4>

08006ad0 <__libc_init_array>:
 8006ad0:	b570      	push	{r4, r5, r6, lr}
 8006ad2:	2600      	movs	r6, #0
 8006ad4:	4d0c      	ldr	r5, [pc, #48]	@ (8006b08 <__libc_init_array+0x38>)
 8006ad6:	4c0d      	ldr	r4, [pc, #52]	@ (8006b0c <__libc_init_array+0x3c>)
 8006ad8:	1b64      	subs	r4, r4, r5
 8006ada:	10a4      	asrs	r4, r4, #2
 8006adc:	42a6      	cmp	r6, r4
 8006ade:	d109      	bne.n	8006af4 <__libc_init_array+0x24>
 8006ae0:	f000 f81a 	bl	8006b18 <_init>
 8006ae4:	2600      	movs	r6, #0
 8006ae6:	4d0a      	ldr	r5, [pc, #40]	@ (8006b10 <__libc_init_array+0x40>)
 8006ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8006b14 <__libc_init_array+0x44>)
 8006aea:	1b64      	subs	r4, r4, r5
 8006aec:	10a4      	asrs	r4, r4, #2
 8006aee:	42a6      	cmp	r6, r4
 8006af0:	d105      	bne.n	8006afe <__libc_init_array+0x2e>
 8006af2:	bd70      	pop	{r4, r5, r6, pc}
 8006af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af8:	4798      	blx	r3
 8006afa:	3601      	adds	r6, #1
 8006afc:	e7ee      	b.n	8006adc <__libc_init_array+0xc>
 8006afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b02:	4798      	blx	r3
 8006b04:	3601      	adds	r6, #1
 8006b06:	e7f2      	b.n	8006aee <__libc_init_array+0x1e>
 8006b08:	08006c30 	.word	0x08006c30
 8006b0c:	08006c30 	.word	0x08006c30
 8006b10:	08006c30 	.word	0x08006c30
 8006b14:	08006c38 	.word	0x08006c38

08006b18 <_init>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	bf00      	nop
 8006b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1e:	bc08      	pop	{r3}
 8006b20:	469e      	mov	lr, r3
 8006b22:	4770      	bx	lr

08006b24 <_fini>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	bf00      	nop
 8006b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2a:	bc08      	pop	{r3}
 8006b2c:	469e      	mov	lr, r3
 8006b2e:	4770      	bx	lr
